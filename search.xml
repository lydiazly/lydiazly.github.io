<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 简易教程 (lecture for Solar Group)</title>
    <url>//main.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/python-intro.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
<wbr> <a class="btn" href="https://pan.baidu.com/s/1nwsIcDr?pwd=s5re"><i class="fa fa-download fa-fw"></i>FITS Data</a>
</p>
<h2 id="简介"><a href="#简介" class="headerlink"></a>简介</h2>
<p>优势: 开源, 用户广, 用途广, 社区完善, 新手友好</p>
<p><a
href="https://www.jetbrains.com/research/python-developers-survey-2017/"
class="uri">https://www.jetbrains.com/research/python-developers-survey-2017/</a></p>
<p>2017年的 python 使用调查报告 <a
href="https://www.jetbrains.com/research/python-developers-survey-2017/"
class="uri">https://www.jetbrains.com/research/python-developers-survey-2017/</a>
<img data-src='/main/Python Developers Survey 2017 - Results-018.png' >
<img data-src='/main/Python Developers Survey 2017 - Results-019.png' >
<img data-src='/main/Python Developers Survey 2017 - Results-020.png' ></p>
<p>参考网站:</p>
<ul>
<li>官方网站: <a href="https://www.python.org/"
class="uri">https://www.python.org/</a></li>
<li>stackoverflow <a
href="https://stackoverflow.com/questions/tagged/python"
class="uri">https://stackoverflow.com/questions/tagged/python</a></li>
<li>官方文档 <a href="https://docs.python.org"
class="uri">https://docs.python.org</a></li>
<li>廖雪峰的网站 (包含 python2.7 和 python3 的教程) <a
href="https://www.liaoxuefeng.com"
class="uri">https://www.liaoxuefeng.com</a></li>
<li>wikibooks <a href="https://en.wikibooks.org/wiki/Python_Programming"
class="uri">https://en.wikibooks.org/wiki/Python_Programming</a></li>
<li>演示代码执行过程的工具 <a href="http://pythontutor.com/"
class="uri">http://pythontutor.com/</a></li>
<li>天文相关教程 (较新) <a href="https://python4astronomers.github.io"
class="uri">https://python4astronomers.github.io</a></li>
</ul>
<p><br> 获取 python 包/模块/函数的帮助:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(name)</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell</span></span><br><span class="line">$ pydoc &lt;name&gt;</span><br><span class="line">$ pydoc -w &lt;name&gt;  <span class="comment"># 生成一个 html 帮助文件</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipython/jupyter</span></span><br><span class="line">name?  <span class="comment"># 弹出帮助文档, `Esc` 退出文档</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="基本语法"><a href="#基本语法"
class="headerlink"></a>基本语法</h2>
<h3 id="语法特点"><a href="#语法特点"
class="headerlink"></a>语法特点</h3>
<ul>
<li>对象编程的概念<br> 类 -&gt; 创建一个实例 -&gt;
使用该实例所属的类下面的方法 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  <span class="comment"># l 是 list 的一个实例</span></span><br><span class="line">l.reverse()  <span class="comment"># reverse 是一个方法(函数), reverse() 是一个实例</span></span><br><span class="line">l.__dir__()  <span class="comment"># 查看 l 的所有方法(函数)</span></span><br></pre></td></tr></table></figure> <br></li>
<li>严格缩进 (通常采用4个半角空格) <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">      a += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure> <br></li>
<li>空格不敏感 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a + b * c ** <span class="number">2</span> / d</span><br><span class="line">f (a, b)</span><br></pre></td></tr></table></figure> <br></li>
<li>大小写敏感, 使用大小写组合的变量名风格
(下划线仍是合法变量名字符,但有特殊含义, 见 <a
href="/advance.html#脚本相关">Python 进阶#脚本相关</a>) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> BSpline</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dataFrame = pd.DataFrame(array)</span><br></pre></td></tr></table></figure> 见 <a href="#idl-sav-文件读取">IDL sav 文件读取</a>
<br><br></li>
<li>括号内换行不用换行符 <br><br></li>
<li>单行注释 <code># ...</code> <br><br></li>
<li>多行注释<br> 函数或模块的开头的多行注释
(将存储在<code>__doc__</code>变量), 可以用 <code>help()</code> 打印
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure> <br></li>
<li>同一行不同语句之间可用分号分隔 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>; <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure> <br></li>
<li>列表和数组的索引默认从<font color=red>0</font>开始 <br><br></li>
<li>列表的最后一个元素可以加逗号 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>,]</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>,&#125;</span><br></pre></td></tr></table></figure> <br></li>
<li><em>etc.</em></li>
</ul>
<h3 id="print函数"><a href="#print函数"
class="headerlink"></a>print函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.</span>; b = <span class="number">2.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a=%.3f, b=%.1e&#x27;</span> % (a, b))</span><br></pre></td></tr></table></figure>
<pre><code>a=1.000, b=2.0e+00</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>, b=<span class="subst">&#123;b:<span class="number">.3</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>a=1.0, b=2.000</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%python2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;xxx&#x27;</span>),</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;yyy&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>xxx yyy</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%python3</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;xxx&#x27;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;yyy&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>xxx yyy</code></pre>
<p>更多格式化参考 <a href="https://pyformat.info/"
class="uri">https://pyformat.info/</a></p>
<h3 id="基本运算"><a href="#基本运算"
class="headerlink"></a>基本运算</h3>
<p>运算符参考:<br> <a
href="https://en.wikibooks.org/wiki/Python_Programming/Basic_Math"
class="uri">https://en.wikibooks.org/wiki/Python_Programming/Basic_Math</a><br>
<a
href="https://www.tutorialspoint.com/python/python_basic_operators.htm"
class="uri">https://www.tutorialspoint.com/python/python_basic_operators.htm</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span>  <span class="comment"># 没有 a++ 这种语法</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> ** <span class="number">2</span>  <span class="comment"># 自动转换数据类型</span></span><br></pre></td></tr></table></figure>
<pre><code>9.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> != <span class="number">3</span>  <span class="comment"># 判断, 可以连写</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line">a <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># 注意这时不用 `==`</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<h3 id="字符串"><a href="#字符串" class="headerlink"></a>字符串</h3>
<p>用双引号和单引号皆可 (取决于所引内容).<br> 字符串具有和列表 (list)
类似的运算规则 (见之后的 list 说明):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> * <span class="number">10</span></span><br></pre></td></tr></table></figure>
<pre><code>&#39;aaaaaaaaaa&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>
<pre><code>&#39;ab&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;a&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n&#x27;</span>)  <span class="comment"># same as &#x27;\\n&#x27;</span></span><br></pre></td></tr></table></figure>
<pre><code>\n</code></pre>
<h3 id="list-tuple-dict-set"><a href="#list-tuple-dict-set"
class="headerlink"></a>list, tuple, dict, set</h3>
<ul>
<li>有序表 list, tuple</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># list, 元素可变</span></span><br><span class="line">t = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># tuple, 元素不可变</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># 一个切片(slice)</span></span><br></pre></td></tr></table></figure>
<pre><code>[0, 1, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t[<span class="number">0</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<pre><code>(0, 1, 2)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]  <span class="comment"># 索引: [start, stop, step] (结果不包含 stop)</span></span><br></pre></td></tr></table></figure>
<pre><code>[1, 3]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">1</span>]  <span class="comment"># step &lt; 0, 仍然不包含 stop (此例中 stop=1)</span></span><br></pre></td></tr></table></figure>
<pre><code>[5, 4, 3, 2]</code></pre>
<p>list 常用运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">l.append(<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># 添加在最后</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.insert(<span class="number">3</span>, <span class="string">&#x27;y&#x27;</span>)  <span class="comment"># 添加在 l[i] 之前</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l.pop(<span class="number">1</span>))  <span class="comment"># 删除某元素并返回该值</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>
<pre><code>[0, 1, 2, 3, 4, 5, &#39;x&#39;]
[0, 1, 2, &#39;y&#39;, 3, 4, 5, &#39;x&#39;]
1
[0, 2, &#39;y&#39;, 3, 4, 5, &#39;x&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(l * <span class="number">2</span>)  <span class="comment"># 重复N遍</span></span><br><span class="line"><span class="built_in">print</span>(l + [<span class="number">6</span>, <span class="number">7</span>])  <span class="comment"># 合并两个list</span></span><br></pre></td></tr></table></figure>
<pre><code>[1, &#39;y&#39;, 2, 3, 4, 5, &#39;x&#39;, 1, &#39;y&#39;, 2, 3, 4, 5, &#39;x&#39;]
[1, &#39;y&#39;, 2, 3, 4, 5, &#39;x&#39;, 6, 7]</code></pre>
<p>list 可以排序 (当元素为同一类型且可比较大小时), 返回到原列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l.sort()</span><br><span class="line">l</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;a&#39;, &#39;b&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">l.sort()</span><br><span class="line">l</span><br></pre></td></tr></table></figure>
<pre><code>[1, 2]</code></pre>
<ul>
<li>字典 dict</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = <span class="built_in">dict</span>(a=<span class="number">1</span>, b=<span class="number">2</span>) <span class="comment"># 注意这时没有引号</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>1</code></pre>
<ul>
<li>集合 set</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;  <span class="comment"># set, 将自动排序并去除重复, 常用于 for 循环</span></span><br><span class="line">s  <span class="comment"># 不能用 s[i] 来索引</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3&#125;</code></pre>
<p>set 不可索引, 但可用作 for 循环. 见 <a
href="/advance.html#循环-迭代器-生成器">Python 进阶#迭代器</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<pre><code>1
2
3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> s]</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 3]</code></pre>
<h3 id="if-语句"><a href="#if-语句" class="headerlink"></a>if 语句</h3>
<p>python 里没有 <code>case</code>, 只有 <code>if</code>
(非零数值、非空字符串、非空 list 等皆为 True) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:</span><br><span class="line">    &lt;执行<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="相关工具"><a href="#相关工具"
class="headerlink"></a>相关工具</h3>
<h4 id="pip"><a href="#pip" class="headerlink"></a>pip</h4>
<p><img data-src='/main/logo-large.72ad8bf1.svg' /></p>
<blockquote>
<p>The <strong>Python Package Index (PyPI)</strong> is a repository of
software for the Python programming language.<br/> PyPI helps you find
and install software developed and shared by the Python community.<br/>
<a href="https://pypi.org/" class="uri">https://pypi.org/</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip install &lt;pkg_name&gt;</span><br></pre></td></tr></table></figure>
<p>    (其他命令见 <a
href="/installpy.html#用-pip-安装-python-包">Python 安装和配置#用 pip
安装 python 包</a>)</p>
<h4 id="anaconda"><a href="#anaconda"
class="headerlink"></a>Anaconda</h4>
<p><img data-src='/main/DataScienceLibraries-01.png' />
<img data-src='/main/Conda-DistributionDiagram-01.png' /></p>
<p><img data-src='/main/Conda — Conda documentation.png' /></p>
<p><strong>Anaconda</strong> (https://www.anaconda.com/)<br> 安装好的
conda 包含独立于系统的 python 版本, 一部分已编译好的包, pip 工具,
以及不同环境的子目录.<br/> 可根据需要切换不同的 conda 环境以使用不同的
python 版本或不同的包的组合.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ conda install &lt;pkg_name&gt;</span><br></pre></td></tr></table></figure>
<p>其他命令见 <a href="/installpy.html#使用-conda-命令">Python
安装和配置#使用 conda 命令</a><br> 详细说明见 <a
href="/advance.html#anaconda">Python 进阶#Anaconda</a></p>
<h4 id="ipython-jupyter"><a href="#ipython-jupyter"
class="headerlink"></a>IPython &amp; Jupyter</h4>
<p><img style='float: center;' data-src='/main/IPython.png' /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Have a look (ipython)</span></span><br><span class="line">!cd &amp;&amp; gnome-terminal --window-<span class="keyword">with</span>-profile=<span class="string">&#x27;lydia_white&#x27;</span></span><br><span class="line">!sleep <span class="number">0.5</span> &amp;&amp; xdotool <span class="built_in">type</span> --delay <span class="number">200</span> <span class="string">&quot;ipython&quot;</span> &amp;&amp; xdotool key Return</span><br><span class="line">!sleep <span class="number">3</span> &amp;&amp; xdotool <span class="built_in">type</span> --delay <span class="number">200</span> <span class="string">&quot;!idl&quot;</span> &amp;&amp; xdotool key Return</span><br><span class="line">!sleep <span class="number">3</span> &amp;&amp; xdotool key Ctrl+d</span><br><span class="line">!sleep <span class="number">1</span> &amp;&amp; xdotool <span class="built_in">type</span> --delay <span class="number">200</span> <span class="string">&quot;!csh -c sswidl&quot;</span> &amp;&amp; xdotool key Return</span><br></pre></td></tr></table></figure>
<center>
<a href="http://jupyter.org/" class="uri">http://jupyter.org/</a>
</center>
<p><img style='float: center;' data-src='/main/jupyterlogo.png' /></p>
<center>
<a href="https://nbviewer.jupyter.org/"
class="uri">https://nbviewer.jupyter.org/</a>
</center>
<p><img style='float: center;' data-src='/main/nbviewer.png' /></p>
<p>参考文档 <a href="http://jupyter-notebook.readthedocs.io/en/stable/"
class="uri">http://jupyter-notebook.readthedocs.io/en/stable/</a></p>
<ul>
<li>打开 <code>jupyter notebook</code>:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ jupyter notebook [filename]</span><br></pre></td></tr></table></figure>
<h2 id="常用包介绍"><a href="#常用包介绍"
class="headerlink"></a>常用包介绍</h2>
<h3 id="python-自带包和模块"><a href="#python-自带包和模块"
class="headerlink"></a>Python 自带包和模块</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> * <span class="comment"># 包含 pi 等, 但更推荐 numpy</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint  <span class="comment"># 打印 list, dict 等更好看</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br></pre></td></tr></table></figure>
<h3 id="numpy-scipy"><a href="#numpy-scipy"
class="headerlink"></a>NumPy, SciPy</h3>
<h4 id="概览"><a href="#概览" class="headerlink"></a>概览</h4>
<center>
<a href="https://www.scipy.org" class="uri">https://www.scipy.org</a>
</center>
<p><img data-src='/main/SciPy.png' /></p>
<center>
<a href="http://scikit-image.org"
class="uri">http://scikit-image.org</a>
</center>
<p><img data-src='/main/scikitlogo.png' />
<img data-src='/main/skimage01.png' /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<p>导入包的不同方式将在各例子中看到.</p>
<p>参考:</p>
<ul>
<li>NumPy User Guide <a href="https://docs.scipy.org/doc/numpy/user/"
class="uri">https://docs.scipy.org/doc/numpy/user/</a></li>
<li>NumPy Reference <a
href="https://docs.scipy.org/doc/numpy/reference/"
class="uri">https://docs.scipy.org/doc/numpy/reference/</a></li>
<li>ndarray<br><a
href="https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html"
class="uri">https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html</a></li>
<li>Array manipulation routines<br><a
href="https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html"
class="uri">https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html</a></li>
<li>SciPy Cookbook <a href="http://scipy-cookbook.readthedocs.io/"
class="uri">http://scipy-cookbook.readthedocs.io/</a></li>
<li>与 IDL 的语法对照
<ul>
<li><a href="http://mathesaurus.sourceforge.net/idl-numpy.html"
class="uri">http://mathesaurus.sourceforge.net/idl-numpy.html</a></li>
<li><a
href="http://blog.rtwilson.com/ten-little-idl-programs-in-python/"
class="uri">http://blog.rtwilson.com/ten-little-idl-programs-in-python/</a></li>
<li><a href="http://www.astrobetter.com/blog/2009/05/04/idl-vs-python/"
class="uri">http://www.astrobetter.com/blog/2009/05/04/idl-vs-python/</a></li>
</ul></li>
</ul>
<h4 id="生成-numpy.ndarray-数组"><a href="#生成-numpy.ndarray-数组"
class="headerlink"></a>生成 numpy.ndarray 数组</h4>
<p>将 list 或 tuple 转换为 <code>numpy.ndarray</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="comment"># 切片(slice), 索引可以是 int 或 list (python list 只支持 list作为索引)</span></span><br><span class="line">a[<span class="number">0</span>]          <span class="comment"># 0</span></span><br><span class="line">a[-<span class="number">1</span>]         <span class="comment"># 4</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>]        <span class="comment"># array([0, 1, 2]) 注意!</span></span><br><span class="line">a[:<span class="number">3</span>]         <span class="comment"># array([0, 1, 2])</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">4</span>]        <span class="comment"># array([2, 3])</span></span><br><span class="line">a[<span class="number">2</span>:-<span class="number">1</span>]       <span class="comment"># array([2, 3]) 注意!</span></span><br><span class="line">a[<span class="number">2</span>:]         <span class="comment"># array([2, 3, 4])</span></span><br><span class="line">a[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]      <span class="comment"># array([0, 2])</span></span><br><span class="line">a[<span class="number">4</span>:<span class="number">2</span>:-<span class="number">1</span>]     <span class="comment"># array([4, 3])</span></span><br><span class="line">a[[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]]  <span class="comment"># array([1, 4, 3]) 花式切片, 索引是一个 list (不能是tuple)</span></span><br></pre></td></tr></table></figure></p>
<p>多维:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]); a</span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 1, 2],
       [3, 4, 5]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array(((<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))); a</span><br><span class="line"><span class="comment"># 这里的tuple已转成ndarray, 于是结果是可变的</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 1, 2],
       [3, 4, 5]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>1</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>1</code></pre>
<p>从一维数组转变为多维:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, -<span class="number">1</span>)); a</span><br><span class="line"><span class="comment"># reshape 的参数为 &lt; 0 表示该维度自动判断元素个数</span></span><br><span class="line"><span class="comment"># reshape 的参数是一个 list 或 tuple, 括号可以展开 (详见帮助文档)</span></span><br><span class="line"><span class="comment"># 此例中 reshape((3, 2)), reshape(3, 2), reshape((3, -1)), reshape(3, -1) 等价</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = a.reshape(-<span class="number">1</span>); b  <span class="comment"># reshape 的参数只有一个维度且 &lt; 0(自动)  =&gt; 展开成一维</span></span><br></pre></td></tr></table></figure>
<pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</code></pre>
<p>花式切片的多维例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>)</span><br><span class="line">a[[<span class="number">0</span>, <span class="number">1</span>],[<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="comment"># a[col_inds, row_inds], 此例等价于 a[[[0, 1], [0, 2]]], a[([0, 1], [0, 2])]</span></span><br></pre></td></tr></table></figure>
<pre><code>array([0, 6])</code></pre>
<ul>
<li><strong>np.zeros</strong>(shape,
dtype=float), <strong>np.ones</strong>(shape, dtype=float)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 默认浮点型</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0., 0., 0.],
       [0., 0., 0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 默认浮点型</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[1., 1., 1.],
       [1., 1., 1.]])</code></pre>
<ul>
<li><strong>np.arange</strong>([start,] stop[, step,], dtype=None)</li>
</ul>
<p>生成的数组元素数据类型和参数一致.<br><br> 方便记忆: 最简形式
<code>np.arange</code>(<em>N</em>) 中的整数 <em>N</em> 即为
<em>元素个数</em>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 1],
       [2, 3],
       [4, 5]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">6</span>).reshape((<span class="number">3</span>, -<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 1],
       [2, 3],
       [4, 5]])</code></pre>
<ul>
<li><strong>np.linspace</strong>(start, stop, num=50,
<strong>endpoint=True</strong>, retstep=False, dtype=None)<br>
默认生成的元素是浮点型<br> 注意 <code>np.linspace</code> 和
<code>np.arange</code> 的不同规则</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([0., 1.])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, endpoint=<span class="literal">False</span>) </span><br></pre></td></tr></table></figure>
<pre><code>array([0. , 0.5])</code></pre>
<p>更多数组创建方法见 numpy 官网:<br> <a
href="https://docs.scipy.org/doc/numpy/reference/routines.array-creation.html"
class="uri">https://docs.scipy.org/doc/numpy/reference/routines.array-creation.html</a><br>
<a
href="https://docs.scipy.org/doc/numpy/user/basics.creation.html#arrays-creation"
class="uri">https://docs.scipy.org/doc/numpy/user/basics.creation.html#arrays-creation</a></p>
<ul>
<li>转置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>); a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.T</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 0,  4,  8],
       [ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11]])</code></pre>
<p>更多数组操作见 numpy 官网 <a
href="https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html"
class="uri">https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html</a>
矩阵操作见 <a href="/advance.html#矩阵">Python 进阶#矩阵</a></p>
<h3 id="matplotlib"><a href="#matplotlib"
class="headerlink"></a>Matplotlib</h3>
<ul>
<li><p>官方示例 <a href="https://matplotlib.org/tutorials/index.html"
class="uri">https://matplotlib.org/tutorials/index.html</a>
<img data-src='/main/Matplotlib.png' />
<img data-src='/main/annotation_demo2_00.png' />
<img data-src='/main/contour_demo_05.png' /></p></li>
<li><p>官方教程 <a
href="https://matplotlib.org/tutorials/introductory/usage.html"
class="uri">https://matplotlib.org/tutorials/introductory/usage.html</a></p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<p>创建一个图像 (三种写法皆可):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(<span class="number">1</span>, (<span class="number">12</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)  <span class="comment"># 数字 (ijk) 表示: 这是一共i行j列中的组图中的第k个图</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.gcf()</span><br><span class="line">ax = plt.gca()</span><br></pre></td></tr></table></figure>
<p>获取帮助:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>(ax)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看某对象包含的方法</span></span><br><span class="line">ax.<span class="comment"># &lt;Tab&gt;, &lt;Shift-Tab&gt;</span></span><br><span class="line">plt.<span class="comment"># &lt;Tab&gt;, &lt;Shift-Tab&gt;</span></span><br></pre></td></tr></table></figure>
<p>例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib?</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib</span><br><span class="line">%run -e <span class="string">&#x27;examples/test_plot.py&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib</span><br><span class="line">%run -e <span class="string">&#x27;examples/test_imshow.py&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>颜色 <a
href="https://matplotlib.org/examples/color/colormaps_reference.html"
class="uri">https://matplotlib.org/examples/color/colormaps_reference.html</a></li>
<li>legend <a href="https://matplotlib.org/users/legend_guide.html"
class="uri">https://matplotlib.org/users/legend_guide.html</a> <br>
<img data-src='/main/named_colors.png' /></li>
</ul>
<h3 id="天文相关包"><a href="#天文相关包"
class="headerlink"></a>天文相关包</h3>
<h4 id="astropy"><a href="#astropy" class="headerlink"></a>Astropy</h4>
<p><img data-src='/main/astropy_banner.svg' /></p>
<p>官方文档 <a href="http://docs.astropy.org/en/stable/index.html"
class="uri">http://docs.astropy.org/en/stable/index.html</a></p>
<p>坐标系统 <a
href="http://docs.astropy.org/en/stable/coordinates/index.html"
class="uri">http://docs.astropy.org/en/stable/coordinates/index.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy <span class="keyword">import</span> units <span class="keyword">as</span> u</span><br><span class="line"><span class="keyword">from</span> astropy.coordinates <span class="keyword">import</span> SkyCoord</span><br></pre></td></tr></table></figure>
<p>参考 <a
href="https://python4astronomers.github.io/astropy/astropy.html"
class="uri">https://python4astronomers.github.io/astropy/astropy.html</a></p>
<h4 id="sunpy"><a href="#sunpy" class="headerlink"></a>SunPy</h4>
<p><img data-src='/main/Screenshot_20180625-005924.png' />
<img data-src='/main/sphx_glr_lat_lon_lines_001.png' />
<img data-src='/main/sphx_glr_submaps_and_cropping_001.png' /></p>
<p><br> HMI 示例见 <a href="/advance.html#sunpy-示例">Python 进阶#SunPy
示例</a><br> <a href="https://github.com/lydiazly/scripts-sunpy"
class="uri">https://github.com/lydiazly/scripts-sunpy</a></p>
<p><br><br> 参考:</p>
<ul>
<li>Gallery <a
href="http://docs.sunpy.org/en/stable/generated/gallery/index.html"
class="uri">http://docs.sunpy.org/en/stable/generated/gallery/index.html</a></li>
<li>SunPy Guide <a
href="http://docs.sunpy.org/en/stable/guide/index.html"
class="uri">http://docs.sunpy.org/en/stable/guide/index.html</a></li>
<li>SunPy Map<br><a
href="http://docs.sunpy.org/en/stable/code_ref/map.html#sunpy.map.mapbase.GenericMap"
class="uri">http://docs.sunpy.org/en/stable/code_ref/map.html#sunpy.map.mapbase.GenericMap</a></li>
<li>Example Gallery <a
href="http://docs.sunpy.org/en/stable/generated/gallery/index.html"
class="uri">http://docs.sunpy.org/en/stable/generated/gallery/index.html</a></li>
<li>A brief tour of SunPy <a
href="http://docs.sunpy.org/en/stable/guide/tour.html"
class="uri">http://docs.sunpy.org/en/stable/guide/tour.html</a></li>
<li>Finding and Downloading Data using Fido<br><a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html</a></li>
</ul>
<p>简单的例子 (来自官网):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> sunpy.data.sample</span><br><span class="line"></span><br><span class="line">aia = sunpy.<span class="built_in">map</span>.Map(sunpy.data.sample.AIA_171_IMAGE)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(<span class="number">1</span>, (<span class="number">5</span>, <span class="number">5</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax = plt.subplot(<span class="number">111</span>, projection=aia)</span><br><span class="line"></span><br><span class="line">aia.plot()</span><br><span class="line">aia.draw_limb()</span><br><span class="line">aia.draw_grid()</span><br><span class="line">aia.draw_limb()</span><br><span class="line">plt.colorbar();</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.show()</span></span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/miniconda3/lib/python3.6/site-packages/sunpy/map/sources/sdo.py:48: SunpyDeprecationWarning: Use Matplotlib to load the colormaps
  self.plot_settings[&#39;cmap&#39;] = cm.get_cmap(self._get_cmap_name())</code></pre>
<figure>
<img data-src="/main/main_126_1.png" alt="png" />
<figcaption aria-hidden="true">png</figcaption>
</figure>
<p>获取一些常数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.sun <span class="keyword">import</span> constants <span class="keyword">as</span> con</span><br><span class="line"><span class="comment"># one astronomical unit (the average distance between the Sun and Earth)</span></span><br><span class="line"><span class="built_in">print</span>(con.au)</span><br></pre></td></tr></table></figure>
<pre><code>  Name   = Astronomical Unit
  Value  = 149597870700.0
  Uncertainty  = 0.0
  Unit  = m
  Reference = IAU 2012 Resolution B2</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the solar radius</span></span><br><span class="line"><span class="built_in">print</span>(con.radius)</span><br></pre></td></tr></table></figure>
<pre><code>  Name   = Solar radius
  Value  = 695508000.0
  Uncertainty  = 26000.0
  Unit  = m
  Reference = Allen&#39;s Astrophysical Quantities 4th Ed.</code></pre>
<h2 id="常见数据文件读写"><a href="#常见数据文件读写"
class="headerlink"></a>常见数据文件读写</h2>
<h3 id="一般情况"><a href="#一般情况"
class="headerlink"></a>一般情况</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># &#x27;w&#x27;, &#x27;r&#x27;, ...</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>更好的用法: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># &#x27;w&#x27;, &#x27;r&#x27;, ...</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p>
<h3 id="txt-csv-文件读写"><a href="#txt-csv-文件读写"
class="headerlink"></a>txt, csv 文件读写</h3>
<ul>
<li>逐行读取整行的方式:<br> 使用 <code>strip</code>
可以用来去掉读入的每行末尾的 ''</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lines = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        lines.append(line.strip().split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">lines</span><br></pre></td></tr></table></figure>
<pre><code>[[&#39;col1&#39;, &#39;col2&#39;, &#39;col3&#39;],
 [&#39;row1&#39;, &#39;1&#39;, &#39;1e1&#39;],
 [&#39;row2&#39;, &#39;2&#39;, &#39;2e-1&#39;],
 [&#39;row3&#39;, &#39;3&#39;, &#39;3e+2&#39;]]</code></pre>
<ul>
<li>使用 numpy, 读取后直接转成数组的方式 (推荐):<br>
<code>np.loadtxt</code>, <code>np.genfromtxt</code> (写文件是
<code>np.savetxt</code>)<br> 超大文件读取建议用 pandas 包.</li>
</ul>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = np.loadtxt(fname, skiprows=<span class="number">1</span>, delimiter=<span class="string">&#x27;,&#x27;</span>) <span class="comment"># 默认分割符为空格</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>col1, col2 = np.loadtxt(fname, skiprows=<span class="number">1</span>, usecols=(<span class="number">1</span>, <span class="number">2</span>), unpack=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><code>np.genfromtxt</code> 和 <code>np.loadtxt</code> 类似,
增加了处理 missing values 的功能.<br> (但参数 skiprows=1 需替换为
skip_header=1)</p>
<p>例 (这里使用功能更多的 <code>np.genfromtxt</code> 代替
<code>np.loadtxt</code>):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.genfromtxt(<span class="string">&#x27;data/data.csv&#x27;</span>,</span><br><span class="line">                    skip_header=<span class="number">1</span>,</span><br><span class="line">                    names=(<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>, <span class="string">&#x27;col3&#x27;</span>),</span><br><span class="line">                    dtype=(<span class="string">&#x27;U15&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;float&#x27;</span>),</span><br><span class="line">                    delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[[<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>]])  <span class="comment"># 设定了 names 之后, 可以用名称索引</span></span><br></pre></td></tr></table></figure>
<pre><code>[(&#39;row1&#39;, 1) (&#39;row2&#39;, 2) (&#39;row3&#39;, 3)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.genfromtxt(<span class="string">&#x27;data/data2.csv&#x27;</span>,</span><br><span class="line">                    skip_header=<span class="number">1</span>,</span><br><span class="line">                    names=(<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>, <span class="string">&#x27;col3&#x27;</span>),</span><br><span class="line">                    dtype=(<span class="string">&#x27;U15&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;float&#x27;</span>),</span><br><span class="line">                    missing_values=<span class="literal">None</span>,</span><br><span class="line">                    filling_values=(<span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, np.nan),  <span class="comment"># 分开指定</span></span><br><span class="line">                    delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>
<pre><code>[(&#39;row1&#39;, 0, 10. ) (&#39;&#39;, 2,  0.2) (&#39;row3&#39;, 3,  nan)]</code></pre>
<ul>
<li>一般而言, 对于一个由分隔符分隔的字符串, 转成一个数组的方式:<br>
<code>np.fromstring(string, dtype=float, count=-1, sep='')</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fromstring(<span class="string">&#x27;0 1 2&#x27;</span>, dtype=<span class="built_in">int</span>, sep=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fromstring(<span class="string">&#x27;0., 1., 2.&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([0., 1., 2.])</code></pre>
<h3 id="numpy-save-文件读写"><a href="#numpy-save-文件读写"
class="headerlink"></a>numpy save 文件读写</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.save(<span class="string">&#x27;fname&#x27;</span>, arr)  <span class="comment"># &#x27;fname.npy&#x27;</span></span><br><span class="line">np.savez(<span class="string">&#x27;fname&#x27;</span>, arr)  <span class="comment"># &#x27;fname.npz&#x27;, 多个变量</span></span><br><span class="line">np.savez_compressed(<span class="string">&#x27;fname&#x27;</span>, arr)  <span class="comment"># &#x27;fname.npz&#x27;, 多个变量 &amp; 压缩</span></span><br><span class="line">np.load(<span class="string">&#x27;fname.npz&#x27;</span>)  <span class="comment"># Load the files created by savez_compressed.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存入</span></span><br><span class="line">arr = np.ones(<span class="number">5</span>)  <span class="comment"># 默认 `float64`</span></span><br><span class="line">np.savez(<span class="string">&#x27;data/np_array&#x27;</span>, a=arr, b=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls data/*.npz</span><br></pre></td></tr></table></figure>
<pre><code>data/np_array.npz</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 载入</span></span><br><span class="line">data = np.load(<span class="string">&#x27;data/np_array.npz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>((data[<span class="string">&#x27;a&#x27;</span>], data[<span class="string">&#x27;b&#x27;</span>], <span class="built_in">int</span>(data[<span class="string">&#x27;b&#x27;</span>])))  <span class="comment"># 默认以`ndarray`读取</span></span><br></pre></td></tr></table></figure>
<pre><code>(array([1., 1., 1., 1., 1.]), array(0), 0)</code></pre>
<h3 id="idl-sav-文件读取"><a href="#idl-sav-文件读取"
class="headerlink"></a>IDL sav 文件读取</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io.idl <span class="keyword">import</span> readsav</span><br><span class="line">data = readsav(<span class="string">&#x27;dname.sav&#x27;</span>, verbose=<span class="literal">True</span>, python_dict=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>默认读出的是<code>scipy.io.idl.AttrDict</code>类型, 即 key
的大小写不敏感.<br> 想要得到大小写敏感的 python dict, 设置
<code>python_dict=True</code> 即可. <br><br> 例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io.idl <span class="keyword">import</span> readsav</span><br><span class="line">data = readsav(<span class="string">&#x27;data/myidlfile.sav&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"><span class="built_in">print</span>(data.keys())  <span class="comment"># 注意返回的是一个`dict_keys`对象, 如需索引需要手动转为list</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;X&#x27;</span>].shape)  <span class="comment"># 大小写不敏感</span></span><br><span class="line">data = readsav(<span class="string">&#x27;data/myidlfile.sav&#x27;</span>, python_dict=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;x&#x27;</span>].shape)  <span class="comment"># 大小写敏感</span></span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &#39;scipy.io.idl.AttrDict&#39;&gt;
dict_keys([&#39;x&#39;, &#39;y&#39;, &#39;str&#39;])
(25,)
&lt;class &#39;dict&#39;&gt;
(25,)</code></pre>
<h3 id="fits-文件读取"><a href="#fits-文件读取"
class="headerlink"></a>FITS 文件读取</h3>
<ul>
<li>Astropy</li>
</ul>
<p>参考:<br> <a href="http://docs.astropy.org/en/stable/io/fits"
class="uri">http://docs.astropy.org/en/stable/io/fits</a><br> <a
href="https://python4astronomers.github.io/astropy/fits.html"
class="uri">https://python4astronomers.github.io/astropy/fits.html</a></p>
<blockquote>
<p>[Note]<br> If you are already familiar with PyFITS, astropy.io.fits
is in fact the same code as the latest version of PyFITS, and you can
adapt old scripts that use PyFITS to use Astropy by simply doing:
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy.io <span class="keyword">import</span> fits <span class="keyword">as</span> pyfits</span><br></pre></td></tr></table></figure> However, for new scripts, we recommend the following
import: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy.io <span class="keyword">import</span> fits</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><code>fits.open</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> astropy.io <span class="keyword">import</span> fits</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdulist = fits.<span class="built_in">open</span>(<span class="string">&#x27;&lt;filename&gt;.fit&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdulist.info()  <span class="comment"># hdulist 是一个由 HDU objects 组成的类似列表的对象</span></span><br><span class="line">Filename: &lt;filename&gt;.fit</span><br><span class="line">No.    Name         <span class="type">Type</span>      Cards   Dimensions   Format</span><br><span class="line"><span class="number">0</span>    PRIMARY     PrimaryHDU    ...       ...        ...</span><br><span class="line"><span class="number">1</span>    ENERGIES    BinTableHDU   ...       ...        ...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu = hdulist[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.data  <span class="comment"># ndarray</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.header[<span class="string">&#x27;&lt;key&gt;&#x27;</span>]  <span class="comment"># 得到某个 header keyword</span></span><br><span class="line"><span class="comment"># 修改数据后</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.writeto(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>) <span class="comment"># 保存 HDU object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdulist.writeto(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>)  <span class="comment"># 或保存整个表</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个 fits Primary HDU object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu = fits.PrimaryHDU()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.writeto(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>)  <span class="comment"># 保存 HDU object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.writeto(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>, clobber=<span class="literal">True</span>)  <span class="comment"># 保存到已存在文件</span></span><br></pre></td></tr></table></figure>
<code>fits.getdata</code>, <code>fits.getheader</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = fits.getdata(<span class="string">&#x27;&lt;filename&gt;.fit&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>header = fits.getheader(<span class="string">&#x27;&lt;filename&gt;.fit&#x27;</span>)</span><br></pre></td></tr></table></figure>
<br> * SunPy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sunpy.io</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdulist = sunpy.io.read_file(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>)  <span class="comment"># 自动判断文件类型</span></span><br><span class="line"><span class="comment"># or use `hdulist = sunpy.io.fits.read(&#x27;&lt;filename&gt;.fits&#x27;)`</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu = hdulist[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hdu.data  <span class="comment"># ndarray</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>smap = sunpy.<span class="built_in">map</span>.Map(<span class="string">&#x27;&lt;filename&gt;.fits&#x27;</span>)</span><br><span class="line"><span class="comment"># 得到一个 sunpy `GenericMap` object</span></span><br></pre></td></tr></table></figure>
<p>例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy.io <span class="keyword">import</span> fits</span><br><span class="line">fname = <span class="string">&#x27;scripts-sunpy/plothmi/data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span></span><br><span class="line">hdulist = fits.<span class="built_in">open</span>(fname)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdulist.info()</span><br></pre></td></tr></table></figure>
<pre><code>Filename: scripts-sunpy/plothmi/data/hmi.B_720s.20150827_052400_TAI.field.fits
No.    Name      Ver    Type      Cards   Dimensions   Format
  0  PRIMARY       1 PrimaryHDU       6   ()      
  1                1 CompImageHDU    155   (4096, 4096)   int32   </code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdulist.verify(<span class="string">&#x27;silentfix+warn&#x27;</span>)</span><br><span class="line">hdu = hdulist[<span class="number">1</span>]</span><br><span class="line">hdu.data.shape</span><br></pre></td></tr></table></figure>
<pre><code>(4096, 4096)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sunpy.io</span><br><span class="line">hdulist = sunpy.io.read_file(fname)</span><br><span class="line">hdu = hdulist[<span class="number">1</span>]</span><br><span class="line">hdu.data.shape</span><br></pre></td></tr></table></figure>
<pre><code>(4096, 4096)</code></pre>
<h2 id="其他包和软件"><a href="#其他包和软件"
class="headerlink"></a>其他包和软件</h2>
<ul>
<li>Astroconda <a href="https://astroconda.readthedocs.io/en/latest/"
class="uri">https://astroconda.readthedocs.io/en/latest/</a> &gt;
AstroConda is a free Conda channel maintained by the Space Telescope
Science Institute (STScI) in Baltimore, Maryland. This channel provides
tools and utilities required to process and analyze data from the Hubble
Space Telescope (HST), James Webb Space Telescope (JWST), and others.
<br><br></li>
<li>PyCharm <a href="https://www.jetbrains.com/pycharm/"
class="uri">https://www.jetbrains.com/pycharm/</a>
<img data-src='/main/pycharm.jpg' > <br><br></li>
<li>Jupyterlab <a href="http://jupyterlab.readthedocs.io/en/stable/"
class="uri">http://jupyterlab.readthedocs.io/en/stable/</a>
<img data-src='/main/jupyterlab.png' ></li>
</ul>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 进阶 (lecture for Solar Group)</title>
    <url>//advance.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/python-intro.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
<wbr> <a class="btn" href="https://pan.baidu.com/s/1nwsIcDr?pwd=s5re"><i class="fa fa-download fa-fw"></i>FITS Data</a>
</p>
<h2 id="anaconda"><a href="#anaconda"
class="headerlink"></a>Anaconda</h2>
<blockquote>
<p>A <strong>conda package</strong> is a compressed tarball file that
contains system-level libraries, Python or other modules, executable
programs and other components. <strong>Conda</strong> keeps track of the
dependencies between packages and platforms.<br>
(https://conda.io/docs/user-guide/concepts.html)</p>
</blockquote>
<ul>
<li>凡使用 <span style="color:blue">pip install</span>
安装的包均为编译安装, <span style="color:blue">conda install</span>
安装的则为编译好的二进制包.</li>
<li>conda 包可以打包其他语言, pip 包容易出现系统依赖问题</li>
<li>conda 包的依赖管理更完善</li>
<li>conda 环境下仍可使用 pip 进行安装, 但所使用的 pip 命令和系统中的 pip
互不影响, 安装的包的位置也在 conda 本身的目录下.</li>
<li>每个环境互不影响, 各环境下的包虽然必须分别安装 (也可以 clone
一个现有环境),<br> 但如果有不同环境中有重复的包 conda 将默认使用
<em>hard link</em>.</li>
</ul>
<p>(更多讨论参考 <a
href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/)"
class="uri">https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/)</a>
<span id="more"></span></p>
<p><img data-src='/advance/Screenshot_20180617-181206.png' width='650'/></p>
<ul>
<li>python 位置 (未使用 conda 时)</li>
</ul>
<p>使用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -m site</span><br></pre></td></tr></table></figure> 可以看到有哪些目录.</p>
<p>三个部分:</p>
<ul>
<li><strong>root</strong>
<pre>
/<span style="color:#800080"><b>usr</b></span>/lib/...
/<span style="color:#800080"><b>usr</b></span>/bin/...
</pre></li>
<li><strong>user</strong>
<pre>
/home/&lt;user&gt;/<span style="color:#800080"><b>.local</b></span>/lib/...
/home/&lt;user&gt;/<span style="color:#800080"><b>.local</b></span>/bin/...
</pre></li>
<li><strong>anaconda/miniconda</strong>
<pre>
/home/&lt;user&gt;/<b><span style="color:#800080">miniconda3</span></b>/</span>/lib/...
/home/&lt;user&gt;/<b><span style="color:#800080">miniconda3</span></b>/</span>/bin/...
</pre></li>
<li>conda 目录结构 (安装之后自动修改了软连接,
修改环境变量后系统优先使用这个位置)</li>
</ul>
<pre>
/home/&lt;user&gt;/<span style="color:#800080"><b>miniconda3/</b></span>
    ├── <span style="color:navy"><b>pkgs/</b></span>
    ├── <span style="color:dimgray"><b>bin/</b></span>
    │        ├── <span style="color:magenta">python</span> -&gt; <span style="color:green">python3.6</span>
    │        ├── <span style="color:magenta">python3</span> -&gt; <span style="color:green">python3.6</span>
    │        ├── <span style="color:green">python3.6</span>
    │        ├── <span style="color:green">jupyter</span>
    │        ├── <span style="color:green">h5dump</span>
    │        └── ...
    ├── <span style="color:dimgray"><b>include/</b></span>
    ├── <span style="color:dimgray"><b>lib/</b></span>
    ├── <span style="color:dimgray"><b>share/</b></span>
    ├── <span style="color:navy"><b>envs</b></span>
    │        ├── <span style="color:blue"><b>env1/</b></span>
    │        │        ├── <span style="color:dimgray"><b>bin/</b></span>
    │        │        ├── <span style="color:dimgray"><b>include/</b></span>
    │        │        ├── <span style="color:dimgray"><b>lib/</b></span>
    │        │        ├── <span style="color:dimgray"><b>share/</b></span>
    │        │        └── ...
    │        ├── <span style="color:blue"><b>env2/</b></span>
    │        └── ...
    └── ...
</pre>
<h2 id="ipython-jupyter"><a href="#ipython-jupyter"
class="headerlink"></a>IPython &amp; Jupyter</h2>
<p>参考文档 <a href="http://jupyter-notebook.readthedocs.io/en/stable/"
class="uri">http://jupyter-notebook.readthedocs.io/en/stable/</a></p>
<ul>
<li>配置文件路径</li>
</ul>
<p>一般用户配置文件在 <code>~/.jupyter</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!jupyter --paths</span><br></pre></td></tr></table></figure>
<pre><code>config:
    /home/lydia/.jupyter
    /home/lydia/miniconda3/etc/jupyter
    /usr/local/etc/jupyter
    /etc/jupyter
data:
    /home/lydia/.local/share/jupyter
    /home/lydia/miniconda3/share/jupyter
    /usr/local/share/jupyter
    /usr/share/jupyter
runtime:
    /run/user/1000/jupyter</code></pre>
<ul>
<li>列出所有 magic functions:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%lsmagic</span><br></pre></td></tr></table></figure>
<ul>
<li>运行脚本:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run script.py</span><br><span class="line">%run script.ipynb</span><br></pre></td></tr></table></figure>
<ul>
<li>在单个 Cell 中调用其他语言 (子进程):</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">%%sh</span><br><span class="line"><span class="built_in">cd</span> ~/miniconda3/</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/miniconda3</code></pre>
<p>可以看到实际并未改变当前目录 (因为是子进程):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>
<pre><code>&#39;/home/lydia/codes/zly/python/python-intro&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%script idl</span><br><span class="line">cd, current=d</span><br><span class="line"><span class="built_in">print</span>, d</span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/codes/zly/python/python-intro


IDL Version 8.2.1 (linux x86_64 m64). (c) 2012, Exelis Visual Information Solutions, Inc.</code></pre>
<ul>
<li>逐行使用 bash 命令 (注意不加 '!' 的区别):</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!idl -e field3dgui</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!ls ./</span><br></pre></td></tr></table></figure>
<p>得到的结果可以存入变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">current, = !pwd  <span class="comment"># returns a list</span></span><br><span class="line">current</span><br></pre></td></tr></table></figure>
<pre><code>&#39;/home/lydia/python-intro&#39;</code></pre>
<p>下面这两句不能写在一个 Cell 中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd -q ~/miniconda3/</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>
<pre><code>&#39;/home/lydia/miniconda3&#39;</code></pre>
<p>用 <code>&#123;var&#125;</code> (推荐) 或 <code>$var</code> (不推荐) 调用当前
ipython 环境的变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd &#123;current&#125;</span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/codes/zly/python/python-intro</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd <span class="string">&quot;$current&quot;</span></span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/codes/zly/python/python-intro</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd $current</span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/codes/zly/python/python-intro</code></pre>
<p>见 <del><a
href="http://mmcdan.github.io/posts/interacting-with-the-shell-via-jupyter-notebook/"
class="uri">http://mmcdan.github.io/posts/interacting-with-the-shell-via-jupyter-notebook/</a></del>
(broken)</p>
<ul>
<li>列出当前的变量信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line">%whos <span class="built_in">int</span> <span class="built_in">str</span></span><br></pre></td></tr></table></figure>
<pre><code>Variable   Type    Data/Info
----------------------------
a          int     1
b          str     x</code></pre>
<h2 id="语法细节"><a href="#语法细节"
class="headerlink"></a>语法细节</h2>
<h3 id="python2-python3"><a href="#python2-python3"
class="headerlink"></a>python2 &amp; python3</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%python2</span><br><span class="line"><span class="built_in">print</span> <span class="number">1</span> / <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span> <span class="number">1</span> // <span class="number">2</span></span><br></pre></td></tr></table></figure>
<pre><code>0
0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%python3</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> // <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>0.5
0</code></pre>
<p>详见 <a href="#python-2---3-的转换">Python 2 -&gt; 3 的转换</a></p>
<h3 id="list-tuple"><a href="#list-tuple" class="headerlink"></a>list,
tuple</h3>
<ul>
<li>对 list 或 tuple, 当只有一个元素时, 注意加逗号:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>]</span><br><span class="line"><span class="built_in">type</span>(l)</span><br></pre></td></tr></table></figure>
<pre><code>list</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>,]</span><br><span class="line"><span class="built_in">type</span>(l)</span><br></pre></td></tr></table></figure>
<pre><code>list</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">type</span>(l)</span><br></pre></td></tr></table></figure>
<pre><code>int</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">type</span>(l)</span><br></pre></td></tr></table></figure>
<pre><code>tuple</code></pre>
<ul>
<li>赋值, 星号 (<code>*</code>) 表达式用来展开 list/tuple, 双星号
(<code>**</code>) 用来展开 dict (常用于函数参数表):</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, *c = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a, b, c</span><br></pre></td></tr></table></figure>
<pre><code>(0, 1, [2, 3])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, *_ = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 或 a, = ...</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>0</code></pre>
<h3 id="dict"><a href="#dict" class="headerlink"></a>dict</h3>
<ul>
<li>dict 改变某个 key 但 value 不变的方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;c&#x27;</span>] = d.pop(<span class="string">&#x27;b&#x27;</span>)  <span class="comment"># 利用 `pop` 返回值, 更改 key 值</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure>
<pre><code>&#123;&#39;a&#39;: 1, &#39;c&#39;: 2&#125;</code></pre>
<ul>
<li>dict 求并集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">&#x27;a&#x27;</span> : -<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span> : <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span> : <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(d1, **d2)  <span class="comment"># 重复的 key 取后一个的值</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;&#39;a&#39;: -1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(<span class="built_in">list</span>(d1.items()) + <span class="built_in">list</span>(d2.items()))  <span class="comment"># 注意其中的 list</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;&#39;a&#39;: -1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1.update(d2)</span><br><span class="line">d1</span><br></pre></td></tr></table></figure>
<pre><code>&#123;&#39;a&#39;: -1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</code></pre>
<h3 id="set"><a href="#set" class="headerlink"></a>set</h3>
<ul>
<li>set 基本操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.add(<span class="number">3</span>) <span class="comment"># one element only</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.update([<span class="number">4</span>, <span class="number">5</span>]) <span class="comment"># iterable: list/tuple/set/...</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3, 4, 5&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.remove(<span class="number">1</span>)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>
<pre><code>&#123;2, 3, 4, 5&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.discard(<span class="number">0</span>)  <span class="comment"># No error if not exist</span></span><br><span class="line">s</span><br></pre></td></tr></table></figure>
<pre><code>&#123;2, 3, 4, 5&#125;</code></pre>
<ul>
<li>set 求交集, 并集, 差集, 对称差集, 子集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;.intersection(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &amp; &#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 或用 and</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;2&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;.union(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; | &#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 或用 or</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;.difference(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; - &#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 在前不在后</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;1&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;.symmetric_difference(&#123;<span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 3&#125;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; ^ &#123;<span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 不同时在两边</span></span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 3&#125;</code></pre>
<ul>
<li>属于, 包含于(子集)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># list/tuple/set</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> <span class="keyword">not</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># list/tuple/set</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;.issubset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;.issuperset(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; &gt;= &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<h3 id="一些特性的演示"><a href="#一些特性的演示"
class="headerlink"></a>一些特性的演示</h3>
<p>插件 <a href="https://github.com/lgpage/nbtutor"
class="uri">https://github.com/lgpage/nbtutor</a><br> 网页版 <a
href="http://pythontutor.com/"
class="uri">http://pythontutor.com/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%reload_ext nbtutor</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f</span><br><span class="line">l1= (<span class="number">0</span>)</span><br><span class="line">l2 = (<span class="number">0</span>,)</span><br></pre></td></tr></table></figure>
<p><a href="http://t.cn/Rg9J3bf">网页版演示</a></p>
<p><img data-src='/advance/nbtutor1.png' width='550'/></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f -i</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, [a, b]) <span class="comment"># list in tuple</span></span><br><span class="line">a = <span class="string">&#x27;x&#x27;</span> <span class="comment"># change element in list</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;xx&#x27;</span> <span class="comment"># change element in tuple</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>
<pre><code>(1, 2, [&#39;xx&#39;, 4])</code></pre>
<p><a href="http://t.cn/Rg9idUn">网页版演示</a></p>
<p><img data-src='/advance/nbtutor2.png' width='550'/></p>
<h3 id="包含判断的单行循环"><a href="#包含判断的单行循环"
class="headerlink"></a>包含判断的单行循环</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> l <span class="keyword">if</span> i &gt; <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>[3, 4, 5]</code></pre>
<p>例如用 <code>globals()</code> 来得到字符串形式的变量名 (python
的变量没有提供这个功能的关键字, 因为"变量名"存储在namespaces中)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">namestr</span>(<span class="params">obj, namespace</span>):</span><br><span class="line">    <span class="keyword">return</span> [name <span class="keyword">for</span> name <span class="keyword">in</span> namespace <span class="keyword">if</span> namespace[name] <span class="keyword">is</span> obj][<span class="number">0</span>]</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> (a, b):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;namestr(var, <span class="built_in">globals</span>())&#125;</span> = <span class="subst">&#123;var&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>a = 1
b = 2</code></pre>
<h3 id="单行-if-三元关系运算"><a href="#单行-if-三元关系运算"
class="headerlink"></a>单行 if (三元关系运算)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">&#x27;y&#x27;</span> <span class="keyword">if</span> a &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;n&#x27;</span></span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>&#39;y&#39;</code></pre>
<h3 id="循环-迭代器-生成器"><a href="#循环-迭代器-生成器"
class="headerlink"></a>循环, 迭代器, 生成器</h3>
<p>Python 的 for 循环不使用索引变量, 而使用遍历<strong>迭代器</strong>
(iterator) 的方式处理<strong>可迭代对象</strong> (range, set 等):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>遍历的方式是使用 <code>iter</code> 和 <code>next</code> 函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">iter</span>(<span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 生成一个 range_iterator 对象</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 转换为 list</span></span><br></pre></td></tr></table></figure>
<pre><code>[0, 1, 2, 3, 4]</code></pre>
<p><code>enumerate</code> 函数适合需要同时使用索引和内容时使用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(l):  <span class="comment"># enumerate()是一个迭代器</span></span><br><span class="line">    i = ...</span><br><span class="line">    item = ...  <span class="comment"># l[i] = ...</span></span><br></pre></td></tr></table></figure>
<p>生成器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 产生一个生成器, 可转化成 list, tuple</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>&lt;generator object &lt;genexpr&gt; at 0x14da87e652b0&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">next</span>(a)  <span class="comment"># 生成器也是迭代器</span></span><br></pre></td></tr></table></figure>
<pre><code>4</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]  <span class="comment"># 产生一个 list</span></span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>[0, 1, 2]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转化成 tuple</span></span><br><span class="line"><span class="built_in">tuple</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<pre><code>(0, 1, 2)</code></pre>
<h3 id="函数定义"><a href="#函数定义"
class="headerlink"></a>函数定义</h3>
<ul>
<li>一般的函数定义:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, *args, **kwargs</span>):</span><br><span class="line">    <span class="comment"># func1(x, y, arg1, arg2, ..., key1=val1, key2=val2, ...)</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> ... <span class="comment"># 没有 return 或为空 则返回 None</span></span><br></pre></td></tr></table></figure>
<ul>
<li>单行函数 lambda</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>3</code></pre>
<p>用 <code>lambda</code> 语法来定义:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> x, y: x + y)(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 不一定需要定义函数名称</span></span><br></pre></td></tr></table></figure>
<pre><code>3</code></pre>
<h3 id="命名空间和变量作用域"><a href="#命名空间和变量作用域"
class="headerlink"></a>命名空间和变量作用域</h3>
<p><a
href="https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html"
class="uri">https://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html</a></p>
<p><img data-src='/advance/scope_resolution_1.png' width='400' /></p>
<ul>
<li>Built-in Functions <a
href="https://docs.python.org/3/library/functions.html"
class="uri">https://docs.python.org/3/library/functions.html</a></li>
<li>Built-in Constants <a
href="https://docs.python.org/3/library/constants.html"
class="uri">https://docs.python.org/3/library/constants.html</a></li>
</ul>
<p><code>globals()</code> 以 dict 形式返回当前所有全局变量,
包括导入的包名, ipython/jupyter 的 <code>In</code>, <code>Out</code>
等.<br> python 以 name -&gt; obj 的形式存储这些变量.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">globals</span>()[<span class="string">&#x27;a&#x27;</span>] <span class="keyword">is</span> a</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">&#x27;local&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">f()</span><br><span class="line"><span class="built_in">print</span>(i, <span class="string">&#x27;global&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>2 local
1 global</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">i  <span class="comment"># 值被改变了 (“leaking”)</span></span><br></pre></td></tr></table></figure>
<pre><code>3</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">i  <span class="comment"># 用这种方式就不会发生“leaking”</span></span><br></pre></td></tr></table></figure>
<pre><code>1</code></pre>
<p>有关函数中的变量作用方式细节, 参考这里提到的例子: <a
href="https://stackoverflow.com/a/575887">stackoverflow</a></p>
<blockquote>
<ul>
<li><p>Any time you see <font color=blue><strong>varname
=</strong></font>, you're <strong>creating a new name</strong> binding
within the function's scope.<br>Whatever value <code>varname</code> was
bound to before is lost within this scope.</p></li>
<li><p>Any time you see
<font color=blue><strong>varname.foo()</strong></font>, you're
<strong>calling a method</strong> on <code>varname</code>. The method
may alter <code>varname</code> (e.g. <code>list.append</code>). <br>
<code>varname</code> (or, rather, the object that <code>varname</code>
names) may exist in more than one scope, and since it's the same object,
<br><strong>any changes will be visible in all scopes</strong>.</p></li>
</ul>
</blockquote>
<h2 id="numpy"><a href="#numpy" class="headerlink"></a>NumPy</h2>
<h3 id="numpy-的数据类型-dtype"><a href="#numpy-的数据类型-dtype"
class="headerlink"></a>numpy 的数据类型 dtype</h3>
<p><a href="https://www.tutorialspoint.com/numpy/numpy_data_types.htm"
class="uri">https://www.tutorialspoint.com/numpy/numpy_data_types.htm</a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dtype(np.int64) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;i8&#x27;</span>) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;&lt;i8&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dtype(np.int64) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;int&#x27;</span>) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dtype(np.int64) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;&gt;i8&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dtype(np.float64) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;f8&#x27;</span>) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;&lt;f8&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.dtype(np.float64) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;float&#x27;</span>) <span class="keyword">is</span> np.dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure> 见 <a
href="#fortran-二进制文件读写">Fortran 二进制文件读写</a> 中的应用.</p>
<h3 id="np.arange-参数为浮点数时要注意的细节"><a
href="#np.arange-参数为浮点数时要注意的细节"
class="headerlink"></a>np.arange 参数为浮点数时要注意的细节</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0.</span>, <span class="number">1.8</span>, <span class="number">0.3</span>)  <span class="comment"># 默认不包含 `stop` 这个点</span></span><br></pre></td></tr></table></figure>
<pre><code>array([0. , 0.3, 0.6, 0.9, 1.2, 1.5])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0.</span>, <span class="number">2.1</span>, <span class="number">0.3</span>)  <span class="comment"># 这里却包括了, 为什么?</span></span><br></pre></td></tr></table></figure>
<pre><code>array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8, 2.1])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%.16f&#x27;</span> % <span class="number">2.1</span>  <span class="comment"># 因为浮点数计算方式产生的精度问题</span></span><br></pre></td></tr></table></figure>
<pre><code>&#39;2.1000000000000001&#39;</code></pre>
<p>看一个求和的例子中同样的问题 (用 <code>list</code> 和
<code>numpy.ndarray</code> 效果一样):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.17f&#x27;</span> % <span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># sum([0.1, ..., 0.1])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.17f&#x27;</span> % <span class="built_in">sum</span>([<span class="number">0.1</span>] * <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 因为同样问题, 累积了误差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.17f&#x27;</span> % math.fsum([<span class="number">0.1</span>] * <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<pre><code>0.10000000000000001
0.99999999999999989
1.00000000000000000</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>([<span class="number">0.1</span>] * <span class="number">10</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>False</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.fsum([<span class="number">0.1</span>] * <span class="number">10</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.fsum([<span class="number">0.1</span>] * <span class="number">10</span>) == <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<p>参考 <a href="https://docs.python.org/3/tutorial/floatingpoint.html"
class="uri">https://docs.python.org/3/tutorial/floatingpoint.html</a></p>
<p>建议是: 使用整数; 对浮点数的情况, stop 值设得略小一些
(比如减去步长的一般) 以防止改点被包含, 或使用 <code>np.linspace</code>
代替.</p>
<h3 id="矩阵"><a href="#矩阵" class="headerlink"></a>矩阵</h3>
<p><code>np.matrix</code>(矩阵) 是 <code>np.ndarray</code>(数组)
的一个子类, 继承了父级的方法, 也定义了新的方法 (例如矩阵运算).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(np.matrix, np.ndarray)</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.matrix([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]); a</span><br></pre></td></tr></table></figure>
<pre><code>matrix([[0, 1, 2],
        [3, 4, 5]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.matrix(<span class="string">&quot;0 1 2; 3 4 5&quot;</span>); a</span><br></pre></td></tr></table></figure>
<pre><code>matrix([[0, 1, 2],
        [3, 4, 5]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>numpy.matrixlib.defmatrix.matrix</code></pre>
<p><code>np.asmatrix</code> (或简写作 <code>np.mat</code>) 相当于
<code>np.matrix(data, copy=False)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">m = np.matrix(x)</span><br><span class="line">m[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">m = np.mat(x)</span><br><span class="line">m[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<pre><code>array([[5, 2],
       [3, 4]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x.__array_interface__[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>] == m.__array_interface__[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<p>注意: <code>np.matrix</code> 既是一个类名也是一个函数名, 而
<code>np.mat</code>, <code>np.asmatrix</code> 只是函数名.</p>
<h3 id="数组和矩阵运算"><a href="#数组和矩阵运算"
class="headerlink"></a>数组和矩阵运算</h3>
<h4 id="数组运算"><a href="#数组运算"
class="headerlink"></a>数组运算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>); a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.<span class="built_in">max</span>()</span><br></pre></td></tr></table></figure>
<pre><code>11</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a * a  <span class="comment"># 注意这是对应位置的元素间的运算</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[  0,   1,   4,   9],
       [ 16,  25,  36,  49],
       [ 64,  81, 100, 121]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a ** <span class="number">2</span>  <span class="comment"># 注意这是对应位置的元素间的运算</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[  0,   1,   4,   9],
       [ 16,  25,  36,  49],
       [ 64,  81, 100, 121]])</code></pre>
<h4 id="使用数组进行矩阵运算"><a href="#使用数组进行矩阵运算"
class="headerlink"></a>使用数组进行矩阵运算</h4>
<p><code>scipy.linalg</code> 与 <code>numpy.linalg</code> 的比较: <a
href="https://scipy.github.io/devdocs/tutorial/linalg.html"
class="uri">https://scipy.github.io/devdocs/tutorial/linalg.html</a>
&gt;* <code>scipy.linalg</code> contains <strong>all</strong> the
functions in <code>numpy.linalg</code> plus some other more
<strong>advanced</strong> ones not contained in
<code>numpy.linalg</code> * Despite its convenience, the use of the
<code>numpy.matrix</code> class is <strong>discouraged</strong>. *
<code>scipy.linalg</code> operations can be applied
<strong>equally</strong> to <code>numpy.matrix</code> or to 2D
<code>numpy.ndarray</code> objects.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.diagflat([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>]); a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1., 0., 0.],
       [0., 2., 0.],
       [0., 0., 3.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.array([[-<span class="number">1.</span>, -<span class="number">1.</span>, -<span class="number">1.</span>],[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]]); b</span><br></pre></td></tr></table></figure>
<pre><code>array([[-1., -1., -1.],
       [ 0.,  0.,  0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.linalg <span class="keyword">import</span> inv</span><br><span class="line">inv(a)  <span class="comment"># 求逆</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1.        ,  0.        , -0.        ],
       [ 0.        ,  0.5       , -0.        ],
       [ 0.        ,  0.        ,  0.33333333]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.dot(b.T)  <span class="comment"># 矩阵内积</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[-1.,  0.],
       [-2.,  0.],
       [-3.,  0.]])</code></pre>
<h4 id="直接使用矩阵类型进行运算"><a href="#直接使用矩阵类型进行运算"
class="headerlink"></a>直接使用矩阵类型进行运算</h4>
<p>使用 numpy 的矩阵类型 <code>numpy.matrix</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.mat(np.diagflat([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])); a</span><br></pre></td></tr></table></figure>
<pre><code>matrix([[1., 0., 0.],
        [0., 2., 0.],
        [0., 0., 3.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.mat(np.array([[-<span class="number">1.</span>, -<span class="number">1.</span>, -<span class="number">1.</span>],[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])); b</span><br></pre></td></tr></table></figure>
<pre><code>matrix([[-1., -1., -1.],
        [ 0.,  0.,  0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a * b.T  <span class="comment"># 矩阵内积, 注意与数组的运算符定义不同</span></span><br></pre></td></tr></table></figure>
<pre><code>matrix([[-1.,  0.],
        [-2.,  0.],
        [-3.,  0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a @ b.T  <span class="comment"># 矩阵内积的新写法, python 3.5+</span></span><br></pre></td></tr></table></figure>
<pre><code>matrix([[-1.,  0.],
        [-2.,  0.],
        [-3.,  0.]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.I  <span class="comment"># 求逆</span></span><br></pre></td></tr></table></figure>
<pre><code>matrix([[ 1.        ,  0.        , -0.        ],
        [ 0.        ,  0.5       , -0.        ],
        [ 0.        ,  0.        ,  0.33333333]])</code></pre>
<h3 id="用作坐标格点的数组的几种形式"><a
href="#用作坐标格点的数组的几种形式"
class="headerlink"></a>用作坐标格点的数组的几种形式</h3>
<ul>
<li><strong><code>np.meshgrid</code></strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>); x</span><br><span class="line">array([ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = np.linspace(<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>); y</span><br><span class="line">array([<span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>])</span><br><span class="line"><span class="comment"># X, Y 形状相同: N x M 矩阵, shape=(N, M)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, Y = np.meshgrid(x, y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X                         <span class="comment"># X[j, :] 表示同一层 y[j] 对应的不同 x 值</span></span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>],          <span class="comment">#  0_____x</span></span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>],          <span class="comment">#  |</span></span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>],          <span class="comment">#  |y</span></span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y</span><br><span class="line">array([[<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],          <span class="comment"># Y[:, i] 表示同一层 x[i] 对应的不同 y 值</span></span><br><span class="line">       [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [<span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>],</span><br><span class="line">       [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]])</span><br></pre></td></tr></table></figure>
<p>可用来计算坐标的函数 (例如磁场的表达式等等, 见 <a
href="https://github.com/lydiazly/python-intro/blob/master/examples/streamplot.py">examples/streamplot.py</a>
) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">U =   (np.cos(k1 * X) * np.exp(-k1 * Y)</span><br><span class="line">     - np.cos(k2 * X) * np.exp(-k2 * Y))</span><br><span class="line">V = (- np.sin(k1 * X) * np.exp(-k1 * Y)</span><br><span class="line">     + np.sin(k2 * X) * np.exp(-k2 * Y))</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">y = np.linspace(<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y, indexing=<span class="string">&#x27;ij&#x27;</span>)</span><br><span class="line">Y.shape</span><br></pre></td></tr></table></figure>
<pre><code>(3, 4)</code></pre>
<ul>
<li><strong><code>np.mgrid</code></strong></li>
</ul>
<p><code>j</code> 标记默认是虚数单位,
但在这里表示前面的数字是格点数.<br> 格点数使用变量
<em><code>n</code></em> 时, 可写成:
<em><code>n</code></em><code>*1j + 1j</code>, 1不能省
(否则j定义为变量)<br> 类似的 <code>np.ogrid</code> 可参见 numpy
相关文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = np.linspace(<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面三行等价</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, Y = np.mgrid[<span class="number">0</span>:<span class="number">2</span>:<span class="number">3j</span>, <span class="number">3</span>:<span class="number">6</span>:<span class="number">4j</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, Y = np.array([i.astype(np.float64) <span class="keyword">for</span> i <span class="keyword">in</span> np.mgrid[<span class="number">0</span>:<span class="number">3</span>, <span class="number">3</span>:<span class="number">7</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X, Y = np.array(np.meshgrid(x, y, indexing=<span class="string">&#x27;ij&#x27;</span>))</span><br><span class="line"><span class="comment"># np.mgrid[0:2:3j, 3:6:4j] 得到的数据类型为 &#x27;float64&#x27;</span></span><br><span class="line"><span class="comment"># np.mgrid[0:3, 3:6] 得到的数据类型为 &#x27;int64&#x27;</span></span><br><span class="line"><span class="comment"># np.meshgrid(x, y, indexing=&#x27;ij&#x27;) 得到一个 list, 数据格式同x, y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># X, Y 形状相同: M x N 矩阵, shape=(M, N)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X                      <span class="comment"># X[i, :] 表示 x[i]</span></span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],   <span class="comment">#  0_____y</span></span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],   <span class="comment">#  |</span></span><br><span class="line">       [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>]])  <span class="comment">#  |x</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y                      <span class="comment"># Y[:, j] 表示 y[j]</span></span><br><span class="line">array([[<span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>],</span><br><span class="line">       [<span class="number">3.</span>, <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br></pre></td></tr></table></figure>
<h3 id="mask"><a href="#mask" class="headerlink"></a>mask</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>); a</span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &gt; <span class="number">4</span>  <span class="comment"># mask</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[False, False, False],
       [False, False,  True],
       [ True,  True,  True]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.where(a &gt; <span class="number">4</span>)  <span class="comment"># 得到 tuple(col_indexs, row_indexs)</span></span><br></pre></td></tr></table></figure>
<pre><code>(array([1, 2, 2, 2]), array([2, 0, 1, 2]))</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">zip</span>(*np.where(a &gt; <span class="number">4</span>)))  <span class="comment"># 也可以用 np.array(np.where(a &gt; 4)).T</span></span><br></pre></td></tr></table></figure>
<pre><code>[(1, 2), (2, 0), (2, 1), (2, 2)]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[a &gt; <span class="number">4</span>] = -<span class="number">1</span>; a  <span class="comment"># same as a[np.where(a &gt; 4)]</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2],
       [ 3,  4, -1],
       [-1, -1, -1]])</code></pre>
<h3 id="其他对数组元素的处理"><a href="#其他对数组元素的处理"
class="headerlink"></a>其他对数组元素的处理</h3>
<p>处理含有 NaN 的数据:</p>
<p>e.g. 求最值可使用 <code>np.nanmin(...)</code> 和
<code>np.nanmax(...)</code></p>
<h2 id="matplotlib"><a href="#matplotlib"
class="headerlink"></a>Matplotlib</h2>
<ul>
<li>官方教程 <a
href="https://matplotlib.org/tutorials/introductory/usage.html"
class="uri">https://matplotlib.org/tutorials/introductory/usage.html</a></li>
</ul>
<p><img data-src='/advance/anatomy.png' width='600' /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.gcf() <span class="comment"># current figure</span></span><br><span class="line">ax = plt.gca()  <span class="comment"># current `Axes`</span></span><br><span class="line">im = plt.gci()  <span class="comment"># current artist(图像内容), 可由诸如 plt.imshow(...) 得到</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>得到当前 backend: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.get_backend()</span><br></pre></td></tr></table></figure> 或 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> maplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mpl.get_backend()</span><br></pre></td></tr></table></figure></p></li>
<li><p>选择 backend (在导入其他 matplotlib 模块之前):
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>matplotlib.use(<span class="string">&#x27;TkAgg&#x27;</span>)  <span class="comment"># &#x27;Qt5Agg&#x27;, &#x27;TkAgg&#x27;, &#x27;Agg&#x27;, ...</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>用户配置文档 <code>matplotlibrc</code><br> 通常的位置:
<code>~/.config/matplotlib/matplotlibrc</code> (Linux)</p></li>
<li><p>用 <code>zorder</code> 来控制图层:</p></li>
</ul>
<p>这个例子中也展示了加入一个动态的竖线的方法,
这条线在保存后的图像中不会显示.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib</span><br><span class="line">%run -e <span class="string">&#x27;examples/test_plot.py&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <a
href="https://github.com/joferkington/mpldatacursor">这个工具</a>
动态标注光标位置的值:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib</span><br><span class="line">%run -e <span class="string">&#x27;examples/test_imshow.py&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>点击图像后在命令行显示光标处信息的例子</li>
</ul>
<p>命令行脚本: <a
href="https://github.com/lydiazly/python-intro/blob/master/examples/test_imshow_click.py">examples/test_imshow_click.py</a>
(jupyter 中无法使用)</p>
<ul>
<li>布局问题 <a
href="https://matplotlib.org/tutorials/intermediate/constrainedlayout_guide.html"
class="uri">https://matplotlib.org/tutorials/intermediate/constrainedlayout_guide.html</a></li>
<li>绘制平行投影的3D图 <a
href="https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html"
class="uri">https://matplotlib.org/mpl_toolkits/mplot3d/tutorial.html</a></li>
<li>更复杂的 3D 可转存可视化数据用其他软件或使用 Mayavi
(http://docs.enthought.com/mayavi/mayavi)</li>
</ul>
<h2 id="sunpy-示例"><a href="#sunpy-示例" class="headerlink"></a>SunPy
示例</h2>
<h3 id="示例文件"><a href="#示例文件"
class="headerlink"></a>示例文件</h3>
<ul>
<li><p>读取 fits, submap, 作图 <a
href="/example_plothmi.html">example_plothmi</a></p></li>
<li><p>投影 <a
href="/example_projection.html">example_projection</a></p></li>
<li><p>下载数据 <a href="/fido.html">fido</a>, <a
href="/jsoc.html">jsoc</a></p></li>
</ul>
<p>注意: 这些例子只是提供一个使用参考, 不一定是最优的.</p>
<h3 id="示例中的-fits-读取方法"><a href="#示例中的-fits-读取方法"
class="headerlink"></a>示例中的 fits 读取方法</h3>
<p>更多 FITS 的读取方法参见 <a href="/main.html#fits-文件读取">Python
简易教程#FITS-文件读取</a><br> 另见 <a
href="http://docs.astropy.org/en/stable/io/fits/usage/scripts.html">Astropy
的命令行工具</a></p>
<p>读取<code>HMIMap</code> 的例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 `sunpy.map` 的时间会略有点长</span></span><br><span class="line"><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line">smap = sunpy.<span class="built_in">map</span>.Map(<span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span>)</span><br><span class="line"><span class="built_in">type</span>(smap)</span><br></pre></td></tr></table></figure>
<pre><code>sunpy.map.sources.sdo.HMIMap</code></pre>
<p>这是 <code>GenericMap</code> 的一个子类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(sunpy.<span class="built_in">map</span>.sources.sdo.HMIMap, sunpy.<span class="built_in">map</span>.mapbase.GenericMap)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta  <span class="comment"># headers</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(smap.data)  <span class="comment"># 索引从 0 开始</span></span><br></pre></td></tr></table></figure>
<pre><code>numpy.ndarray</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.data.shape  <span class="comment"># (dimy, dimx)</span></span><br></pre></td></tr></table></figure>
<pre><code>(4096, 4096)</code></pre>
<p><code>smap.data[i, j]</code> 中的 i 为 Y 轴, 单位为 pixel:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.imshow(smap.data[<span class="number">0</span>:<span class="number">2000</span>, :], origin=<span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/advance/advance_205_0.png" alt="png" />
<figcaption aria-hidden="true">png</figcaption>
</figure>
<h3 id="关于-scaled-image-data"><a href="#关于-scaled-image-data"
class="headerlink"></a>关于 Scaled Image Data</h3>
<p>这一部分将更仔细地检查 Astropy 对示例中的 FITS 文件的处理.</p>
<p>参见 <a
href="http://docs.astropy.org/en/stable/io/fits/usage/image.html#scaled-data"
class="uri">http://docs.astropy.org/en/stable/io/fits/usage/image.html#scaled-data</a></p>
<blockquote>
<p>Images are scaled only when either of the BSCALE/BZERO keywords are
present in the header and either of their values is not the default
value (BSCALE=1, BZERO=0).</p>
</blockquote>
<p>由于 <code>astropy.io.fits</code> 的特性, 读取 'Scaled Image Data'
时, 调用 <code>.data</code> 将自动对数据进行缩放: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">physical value = BSCALE * (storage value) + BZERO</span><br></pre></td></tr></table></figure>
<code>astropy.io.fits.open</code> 中使用
<code>do_not_scale_image_data=True</code> 可禁用这一步骤.</p>
<p>见 <a
href="http://docs.astropy.org/en/stable/io/fits/appendix/faq.html#why-is-an-image-containing-integer-data-being-converted-unexpectedly-to-floats">astropy.io.fits
FAQ</a></p>
<p>数据类型:</p>
<table>
<thead>
<tr>
<th style="text-align: center;">BITPIX</th>
<th style="text-align: left;">Numpy Data Type</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">8</td>
<td style="text-align: left;">numpy.uint8 (unsigned integer)</td>
</tr>
<tr>
<td style="text-align: center;">16</td>
<td style="text-align: left;">numpy.int16</td>
</tr>
<tr>
<td style="text-align: center;">32</td>
<td style="text-align: left;">numpy.int32</td>
</tr>
<tr>
<td style="text-align: center;">-32</td>
<td style="text-align: left;">numpy.float32</td>
</tr>
<tr>
<td style="text-align: center;">-64</td>
<td style="text-align: left;">numpy.float64</td>
</tr>
</tbody>
</table>
<p>可以使用 Astropy 的命令行工具在 shell 中查看信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span></span><br><span class="line">!fitsinfo &#123;fname&#125;</span><br></pre></td></tr></table></figure>
<pre><code>Filename: data/hmi.B_720s.20150827_052400_TAI.field.fits
No.    Name      Ver    Type      Cards   Dimensions   Format
  0  PRIMARY       1 PrimaryHDU       6   ()      
  1                1 CompImageHDU    155   (4096, 4096)   int32   </code></pre>
<p>可以看到该文件存储的数据类型是整形.</p>
<p>用命令行工具查看关键字 'BITPIX':</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!fitsheader -e <span class="number">1</span> --keyword BITPIX &#123;fname&#125;</span><br></pre></td></tr></table></figure>
<pre><code># HDU 1 in data/hmi.B_720s.20150827_052400_TAI.field.fits:
BITPIX  =                   32 / data type of original image                    </code></pre>
<p>使用 <code>astropy.io.fits</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy.io <span class="keyword">import</span> fits</span><br><span class="line">hdulist = fits.<span class="built_in">open</span>(fname)</span><br><span class="line">hdu = hdulist[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.header[<span class="string">&#x27;BITPIX&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>32</code></pre>
<p>'BSCALE' 不为零则为 'scaled':</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.header[<span class="string">&#x27;BSCALE&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>0.01</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.header[<span class="string">&#x27;BZERO&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>0.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdulist.verify(<span class="string">&#x27;silentfix+warn&#x27;</span>)  <span class="comment"># 调用 `.data` 时如果出错, 需要先进行这一步修复</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.data.dtype  <span class="comment"># 已自动变换为 &#x27;physical value&#x27;, 同时 `.header` 将被修改</span></span><br></pre></td></tr></table></figure>
<pre><code>dtype(&#39;float64&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.data[<span class="number">1000</span>, <span class="number">1000</span>]</span><br></pre></td></tr></table></figure>
<pre><code>142.83</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.data[<span class="number">0</span>,<span class="number">0</span>]  <span class="comment"># -2147483648 被转为 nan</span></span><br></pre></td></tr></table></figure>
<pre><code>nan</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.header[<span class="string">&#x27;BITPIX&#x27;</span>]  <span class="comment"># 值被改变了. 同时 &#x27;BSCALE&#x27;, &#x27;BZERO&#x27; 被删除</span></span><br></pre></td></tr></table></figure>
<pre><code>-64</code></pre>
<p>手动 scale:</p>
<p>'BSCALE' 虽然之前已被删除, 但值仍存储在 <code>._orig_bscale</code>
中. <code>.scale</code> 将使用这个值.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.scale(<span class="string">&#x27;int32&#x27;</span>)  <span class="comment"># 在此之后 `.data` 将变换回 &#x27;storage value&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu._orig_bscale</span><br></pre></td></tr></table></figure>
<pre><code>0.01</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu._orig_bzero</span><br></pre></td></tr></table></figure>
<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.data[<span class="number">1000</span>, <span class="number">1000</span>]</span><br></pre></td></tr></table></figure>
<pre><code>14283</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.data[<span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># nan 被转为 -2147483648</span></span><br></pre></td></tr></table></figure>
<pre><code>-2147483648</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hdu.header[<span class="string">&#x27;BITPIX&#x27;</span>]  <span class="comment"># 值再次被改变了</span></span><br></pre></td></tr></table></figure>
<pre><code>32</code></pre>
<p>使用 SunPy 处理时, 'BITPIX', 'BSCALE', 'BZERO' 的值被保留,
<code>.data</code> 仍进行了 scale 的过程.</p>
<p>针对不同文件, 如果 SunPy 的程序内部使用 <code>astropy.io.fits</code>
处理文件时调用了 <code>.data</code> 再返回 header, 即
<code>astropy.io.fits</code> 已经如上所述改变了 header, 那么 SunPy
所返回的 header 中 'BITPIX', 'BSCALE', 'BZERO' 可能已经被改变.</p>
<p>下面的例子中得到的 header 是最初的值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line">smap = sunpy.<span class="built_in">map</span>.Map(<span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BITPIX&#x27;</span>]  <span class="comment"># 得到的是未被改变的 header</span></span><br></pre></td></tr></table></figure>
<pre><code>32</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BSCALE&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>0.01</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BZERO&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>0.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.data[<span class="number">1000</span>, <span class="number">1000</span>]  <span class="comment"># 这一步并不改变 `.meta` 的值</span></span><br></pre></td></tr></table></figure>
<pre><code>142.83</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BITPIX&#x27;</span>]  <span class="comment"># 不变</span></span><br></pre></td></tr></table></figure>
<pre><code>32</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BSCALE&#x27;</span>]  <span class="comment"># 不变</span></span><br></pre></td></tr></table></figure>
<pre><code>0.01</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;BZERO&#x27;</span>]  <span class="comment"># 不变</span></span><br></pre></td></tr></table></figure>
<pre><code>0.0</code></pre>
<h3 id="坐标和单位"><a href="#坐标和单位"
class="headerlink"></a>坐标和单位</h3>
<p><strong>SunPy map</strong> <a
href="http://docs.sunpy.org/en/stable/code_ref/map.html#using-map-objects"
class="uri">http://docs.sunpy.org/en/stable/code_ref/map.html#using-map-objects</a>
&gt;A number of the <strong>properties</strong> of this class are
returned as <strong>two-value named tuples</strong> that can either be -
indexed by
position: <strong><font color=blue>[0]</font>, <font color=blue>[1]</font></strong>
- be accessed by the names: - pixel
axes: <strong><font color=blue>.x</font>, <font color=blue>.y</font></strong><br>
x and y refer to the FITS axes (x for columns y for rows) - spatial
axes: <strong><font color=blue>.axis1</font>, <font color=blue>.axis2</font></strong><br>
axis1 corresponds to the coordinate axis for x and axis2 corresponds to
y.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.dimensions</span><br></pre></td></tr></table></figure>
<pre><code>PixelPair(x=&lt;Quantity 4096. pix&gt;, y=&lt;Quantity 4096. pix&gt;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.dimensions.x  <span class="comment"># 得到一个 `astropy.units.quantity.Quantity`, 包含 value 和 unit</span></span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(4096 \; \mathrm{pix}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.dimensions.x.unit</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\mathrm{pix}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.dimensions.x.value</span><br></pre></td></tr></table></figure>
<pre><code>4096.0</code></pre>
<p><code>astropy.units</code> 的使用方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u.AA</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\mathrm{\mathring{A}}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4096</span> * u.pix  <span class="comment"># same as `u.pixel`</span></span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(4096 \; \mathrm{pix}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">4096</span>, <span class="number">4096</span>) * u.pix  <span class="comment"># 注意这里是 `astropy.units` 的运算, 和 list 运算规则不同</span></span><br></pre></td></tr></table></figure>
<p><span class="math inline">\([4096,~4096] \; \mathrm{pix}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.dimensions.x.unit <span class="keyword">is</span> u.pix  <span class="comment"># 说明 x 是单位是 u.pix</span></span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(smap.center)</span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/miniconda3/lib/python3.6/site-packages/sunpy/map/mapbase.py:669: Warning: Missing metadata for heliographic longitude: assuming longitude of 0 degrees
  lon=self.heliographic_longitude,





astropy.coordinates.sky_coordinate.SkyCoord</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>((<span class="number">0</span>, <span class="number">0</span>) * u.pix)</span><br></pre></td></tr></table></figure>
<pre><code>[&lt;Quantity 0. pix&gt;, &lt;Quantity 0. pix&gt;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.pixel_to_world(*(<span class="number">4096</span>, <span class="number">4096</span>) * u.pix)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;SkyCoord (Helioprojective: obstime=2015-08-27 05:22:21.800000, rsun=696000000.0 m, observer=&lt;HeliographicStonyhurst Coordinate (obstime=2015-08-27 05:22:21.800000): (lon, lat, radius) in (deg, deg, m)
    (0., 7.089004, 1.51196988e+11)&gt;): (Tx, Ty) in arcsec
    (-1040.36199634, -1030.86554911)&gt;</code></pre>
<p>查看 <code>SkyCoord</code> 的帮助:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> astropy.coordinates</span><br><span class="line"><span class="built_in">help</span>(astropy.coordinates.sky_coordinate.SkyCoord)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.center.Tx</span><br></pre></td></tr></table></figure>
<p><span
class="math inline">\(\mathrm{-7.65399^{\prime\prime}}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.pixel_to_world(*(<span class="number">2000</span>, <span class="number">2000</span>) * u.pix)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;SkyCoord (Helioprojective: obstime=2015-08-27 05:22:21.800000, rsun=696000000.0 m, observer=&lt;HeliographicStonyhurst Coordinate (obstime=2015-08-27 05:22:21.800000): (lon, lat, radius) in (deg, deg, m)
    (0., 7.089004, 1.51196988e+11)&gt;): (Tx, Ty) in arcsec
    (16.55031204, 26.53575639)&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.pixel_to_world(*(<span class="number">2000</span>, <span class="number">2000</span>) * u.pix).transform_to(<span class="string">&#x27;heliographic_stonyhurst&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;SkyCoord (HeliographicStonyhurst: obstime=2015-08-27 05:22:21.800000): (lon, lat, radius) in (deg, deg, km)
    (1.00568591, 8.68202918, 696000.0000022)&gt;</code></pre>
<p>查看坐标信息:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.coordinate_frame</span><br></pre></td></tr></table></figure>
<pre><code>/home/lydia/miniconda3/lib/python3.6/site-packages/sunpy/map/mapbase.py:669: Warning: Missing metadata for heliographic longitude: assuming longitude of 0 degrees
  lon=self.heliographic_longitude,





&lt;Helioprojective Frame (obstime=2015-08-27 05:22:21.800000, rsun=696000000.0 m, observer=&lt;HeliographicStonyhurst Coordinate (obstime=2015-08-27 05:22:21.800000): (lon, lat, radius) in (deg, deg, m)
    (0., 7.089004, 1.51196988e+11)&gt;)&gt;</code></pre>
<p>出现这个 Warning 时:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">smap.meta[<span class="string">&#x27;hgln_obs&#x27;</span>] = <span class="number">0.</span>; smap.meta[<span class="string">&#x27;hgln_obs&#x27;</span>] = <span class="number">0.</span>; smap.meta[<span class="string">&#x27;hgln_obs&#x27;</span>] = <span class="number">0.</span></span><br><span class="line">smap.coordinate_frame</span><br></pre></td></tr></table></figure>
<pre><code>&lt;Helioprojective Frame (obstime=2015-08-27 05:22:21.800000, rsun=696000000.0 m, observer=&lt;HeliographicStonyhurst Coordinate (obstime=2015-08-27 05:22:21.800000): (lon, lat, radius) in (deg, deg, m)
    (0., 7.089004, 1.51196988e+11)&gt;)&gt;</code></pre>
<h3 id="语法对比"><a href="#语法对比"
class="headerlink"></a>语法对比</h3>
<p>比较 <code>plothmi.py</code> 与对应 IDL 程序的语法:</p>
<p>下面的语句中, 为了简便和方便对比, 使用了自定义的一些函数. 导入方法:
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> read_sdo, plot_map, plot_vmap, image_to_helio</span><br></pre></td></tr></table></figure></p>
<p>读取数据 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; IDL</span><br><span class="line">read_sdo,&lt;fname&gt;,index,data</span><br><span class="line">index2map,index,data,mapa</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># 为简化过程而自定义的函数, 读入时打印文件名和数组大小</span></span><br><span class="line">mapa = read_sdo(&lt;fname&gt;)</span><br></pre></td></tr></table></figure></p>
<p>旋转 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; IDL</span><br><span class="line">; 2 表示180°</span><br><span class="line">mapbx.data = rotate(mapbx,2)</span><br><span class="line">mapby.data = rotate(mapbx,2)</span><br><span class="line">mapbz.data = rotate(mapbx,2)</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># 利用 &#x27;crota2&#x27; 的值确定角度</span></span><br><span class="line">mapbx = mapbx.rotate(order=<span class="number">1</span>)</span><br><span class="line">mapby = mapby.rotate(order=<span class="number">1</span>)</span><br><span class="line">mapbz = mapbz.rotate(order=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>截取 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; IDL</span><br><span class="line">sub_map,mapbx,smapbx,xrange=[500,800.0],yrange=[-500,-100.0]</span><br><span class="line">sub_map,mapby,smapby,ref_map=smapbx</span><br><span class="line">sub_map,mapbz,smapbz,ref_map=smapbx</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># 左下到右上</span></span><br><span class="line">bl = SkyCoord(<span class="number">500</span>*u.arcsec, -<span class="number">500</span>*u.arcsec, frame=mapbz.coordinate_frame)</span><br><span class="line">tr = SkyCoord(<span class="number">800</span>*u.arcsec, -<span class="number">100.</span>*u.arcsec, frame=mapbz.coordinate_frame)</span><br><span class="line">smapbx = mapbx.submap(bl, tr)</span><br><span class="line">smapby = mapby.submap(bl, tr)</span><br><span class="line">smapbz = mapbz.submap(bl, tr)</span><br></pre></td></tr></table></figure></p>
<p>绘图 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; IDL</span><br><span class="line">plot_map,smapbz,dmax=2000,dmin=-2000,color=0,charsize=1.8,...</span><br><span class="line">plot_vmap,/over,smapbx,smapby,mapbz=smapbz,limit=180,scale=0.012,iskip=15,jskip=15,...</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># 主要调用的是 matplotlib</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=smapbz) <span class="comment"># 使用 smapbz 中定义的坐标系统</span></span><br><span class="line">plot_map(ax, smapbz)</span><br><span class="line">plot_vmap(ax, smapbx, smapby, smapbz, iskip=iskip, jskip=jskip, cmin=<span class="number">100.</span>, vmax=<span class="number">500.</span>, cmap=<span class="string">&#x27;binary&#x27;</span>, ...)</span><br></pre></td></tr></table></figure></p>
<p>坐标变换 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; IDL</span><br><span class="line">; magnetic_modeling_codes/.../05projection_modified_version.pro</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># `image_to_helio`(变换为 Helioprojective(Cartesian) system)</span></span><br><span class="line"><span class="comment"># 调用自定义的旋转矩阵函数 `proj_matrix`, 参考文献与原IDL程序相同</span></span><br><span class="line">hx, hy = image_to_helio(smapbz)  <span class="comment"># numpy 数组</span></span><br><span class="line">smapbx_h, smapby_h, smapbz_h = image_to_helio(smapbx, smapby, smapbz) <span class="comment"># sunpy `Map`</span></span><br><span class="line"></span><br><span class="line">plot_map(ax, smapbz_h, coords=(hx, hy))</span><br><span class="line">plot_vmap(ax, smapbx_h, smapby_h, smapbz_h, coords=(hx, hy), ...)</span><br></pre></td></tr></table></figure></p>
<h2 id="插值-拟合"><a href="#插值-拟合" class="headerlink"></a>插值,
拟合</h2>
<p>选择不限于这里列举的包, 以后也可能会有更合适的方法出现.</p>
<p>相关安装见 <a href="/installpy.html#其他">Python 安装和配置</a></p>
<h3 id="插值"><a href="#插值" class="headerlink"></a>插值</h3>
<ul>
<li><p>numpy <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = interp1d(x, y, kind=&#x27;cubic&#x27;[, fill_value=&#x27;extrapolate&#x27;])</span><br><span class="line">x2 = np.linspace(...)</span><br><span class="line">y2 = f(x2)</span><br></pre></td></tr></table></figure> 见 <a
href="https://github.com/lydiazly/python-intro/blob/master/examples/test_plot.py">examples/test_plot.py</a></p></li>
<li><p>scipy <a
href="https://docs.scipy.org/doc/scipy/tutorial/interpolate.html"
class="uri">https://docs.scipy.org/doc/scipy/tutorial/interpolate.html</a></p></li>
</ul>
<h3 id="求极值"><a href="#求极值" class="headerlink"></a>求极值</h3>
<ul>
<li>PeakUtils <a href="http://peakutils.readthedocs.io/en/latest/"
class="uri">http://peakutils.readthedocs.io/en/latest/</a></li>
</ul>
<p>官方例图
(http://peakutils.readthedocs.io/en/latest/tutorial_a.html):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> peakutils</span><br><span class="line">indexes = peakutils.indexes(y, thres=<span class="number">0.5</span>, min_dist=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src='/advance/tut_a_2.png' width='500' /></p>
<p>Enhancing the resolution by interpolation: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">peaks_x = peakutils.interpolate(x, y, ind=indexes)</span><br></pre></td></tr></table></figure></p>
<h3 id="拟合"><a href="#拟合" class="headerlink"></a>拟合</h3>
<ul>
<li>LMFIT (Non-Linear Least-Squares Minimization and Curve-Fitting)</li>
</ul>
<p>下载 <a href="https://github.com/lmfit/lmfit-py"
class="uri">https://github.com/lmfit/lmfit-py</a></p>
<p>文档 <a href="http://lmfit.github.io/lmfit-py/"
class="uri">http://lmfit.github.io/lmfit-py/</a></p>
<p>有现成模型, 也可以自定义模型.<br>
可以方便地叠加不同拟合模型(比如多个高斯, 线性加高斯, 等等).<br> 例子见
<a
href="https://github.com/lydiazly/python-intro/raw/master/examples/lmfits.zip">examples/lmfits</a>
(来自 <a
href="http://lmfit.github.io/lmfit-py/builtin_models.html#example-1-fit-peak-data-to-gaussian-lorentzian-and-voigt-profiles">LMFIT网站示例</a>
)</p>
<p>使用内置模型:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lmfit.models <span class="keyword">import</span> GaussianModel  <span class="comment"># 内置的模型</span></span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;test_peak.dat&#x27;</span>)</span><br><span class="line">x = data[:, <span class="number">0</span>]</span><br><span class="line">y = data[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">mod = GaussianModel()  <span class="comment"># 实例化一个模型</span></span><br><span class="line">pars = mod.guess(y, x=x)  <span class="comment"># 给初值</span></span><br><span class="line">out = mod.fit(y, pars, x=x)  <span class="comment"># 拟合结果</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out.fit_report())  <span class="comment"># 拟合结果的详细信息</span></span><br><span class="line">plt.plot(x, out.init_fit, <span class="string">&#x27;k--&#x27;</span>)</span><br><span class="line">plt.plot(x, out.best_fit, <span class="string">&#x27;r-&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">%run examples/lmfits/fit_peak.py</span><br></pre></td></tr></table></figure>
<pre><code>[[Model]]
    Model(voigt)
[[Fit Statistics]]
    # fitting method   = leastsq
    # function evals   = 21
    # data points      = 401
    # variables        = 4
    chi-square         = 10.9301767
    reduced chi-square = 0.02753193
    Akaike info crit   = -1436.57602
    Bayesian info crit = -1420.60017
[[Variables]]
    sigma:      0.89518909 +/- 0.01415450 (1.58%) (init = 0.8775)
    center:     9.24374847 +/- 0.00441903 (0.05%) (init = 9.25)
    amplitude:  34.1914737 +/- 0.17946860 (0.52%) (init = 65.43358)
    gamma:      0.52540198 +/- 0.01857955 (3.54%) (init = 0.7)
    fwhm:       3.22385343 +/- 0.05097475 (1.58%) == &#39;3.6013100*sigma&#39;
    height:     10.0872204 +/- 0.03482130 (0.35%) == &#39;amplitude*wofz((1j*gamma)/(sigma*sqrt(2))).real/(sigma*sqrt(2*pi))&#39;
[[Correlations]] (unreported correlations are &lt; 0.100)
    C(sigma, gamma)     = -0.928
    C(amplitude, gamma) =  0.821
    C(sigma, amplitude) = -0.651</code></pre>
<figure>
<img data-src="/advance/advance_279_1.png" alt="png" />
<figcaption aria-hidden="true">png</figcaption>
</figure>
<p>多个模型叠加:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lmfit.models <span class="keyword">import</span> ExponentialModel, GaussianModel</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;NIST_Gauss2.dat&#x27;</span>)</span><br><span class="line">x = data[:, <span class="number">0</span>]</span><br><span class="line">y = data[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">exp_mod = ExponentialModel(prefix=<span class="string">&#x27;exp_&#x27;</span>)</span><br><span class="line">gauss1 = GaussianModel(prefix=<span class="string">&#x27;g1_&#x27;</span>)</span><br><span class="line">gauss2 = GaussianModel(prefix=<span class="string">&#x27;g2_&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pars1 = exp_mod.guess(y, x=x)  <span class="comment"># 分段设参数的方法见下面的脚本文件</span></span><br><span class="line">pars2 = gauss1.guess(y, x=x)</span><br><span class="line">pars3 = gauss2.guess(y, x=x)</span><br><span class="line"></span><br><span class="line">pars = pars1 + pars2 + pars3  <span class="comment"># 叠加参数</span></span><br><span class="line">mod = gauss1 + gauss2 + exp_mod  <span class="comment"># 叠加模型</span></span><br><span class="line"></span><br><span class="line">out = mod.fit(y, pars, x=x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(out.fit_report())</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.plot(x, out.init_fit, <span class="string">&#x27;k--&#x27;</span>)</span><br><span class="line">plt.plot(x, out.best_fit, <span class="string">&#x27;r-&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%capture output</span><br><span class="line">%matplotlib inline</span><br><span class="line">%run examples/lmfits/fit_peaks.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output.outputs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/advance/advance_283_0.png" alt="png" />
<figcaption aria-hidden="true">png</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%capture output</span><br><span class="line">%matplotlib inline</span><br><span class="line">%run examples/lmfits/fit_peaks_components.py</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output.outputs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/advance/advance_285_0.png" alt="png" />
<figcaption aria-hidden="true">png</figcaption>
</figure>
<p>自定义模型的方法见 <a
href="http://lmfit.github.io/lmfit-py/builtin_models.html#user-defined-models">LMFIT网站示例</a></p>
<h3 id="其他"><a href="#其他" class="headerlink"></a>其他</h3>
<ul>
<li>Sherpa(Modeling and Fitting) <a
href="http://cxc.cfa.harvard.edu/contrib/sherpa/"
class="uri">http://cxc.cfa.harvard.edu/contrib/sherpa/</a><br></li>
<li>2-D Fitting in Sherpa <a
href="https://python4astronomers.github.io/fitting/image.html"
class="uri">https://python4astronomers.github.io/fitting/image.html</a><br></li>
<li><em>etc.</em></li>
</ul>
<h2 id="copy-注意事项"><a href="#copy-注意事项"
class="headerlink"></a>copy 注意事项</h2>
<p><strong>"shallow copy"</strong> vs <strong>"deep copy"</strong></p>
<ul>
<li>对于 list 的情况</li>
</ul>
<p>演示插件 <a href="https://github.com/lgpage/nbtutor"
class="uri">https://github.com/lgpage/nbtutor</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f -i</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">c = deepcopy(a)</span><br><span class="line">d = a[:] <span class="comment"># 列表的切片是深拷贝</span></span><br><span class="line">b[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">c[<span class="number">1</span>] = -<span class="number">2</span></span><br><span class="line">d[<span class="number">2</span>] = -<span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b), <span class="built_in">id</span>(c), <span class="built_in">id</span>(d))</span><br></pre></td></tr></table></figure>
<pre><code>23284866388232 23284866388232 23284855519880 23284856061064</code></pre>
<p><a href="http://t.cn/RgK1OHf">网页版演示</a></p>
<p><img data-src='/advance/nbtutor3.png' width='550'/></p>
<ul>
<li>对于 dict 的情况</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f -i</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">a = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">2</span>, <span class="number">3</span>:<span class="number">3</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">c = a.copy()  <span class="comment"># 深拷贝</span></span><br><span class="line">d = deepcopy(a)</span><br><span class="line">b[<span class="number">1</span>] = -<span class="number">1</span></span><br><span class="line">c[<span class="number">2</span>] = -<span class="number">2</span></span><br><span class="line">d[<span class="number">3</span>] = -<span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b), <span class="built_in">id</span>(c), <span class="built_in">id</span>(d))</span><br></pre></td></tr></table></figure>
<pre><code>22492371132064 22492371132064 22492397510376 22492397507280</code></pre>
<p><a href="http://t.cn/RgKrHOx">网页版演示</a></p>
<p><img data-src='/advance/nbtutor4.png' width='550'/></p>
<ul>
<li>对于 set 的情况</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f -i</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = a</span><br><span class="line">c = a.copy()  <span class="comment"># 深拷贝</span></span><br><span class="line">d = deepcopy(a)</span><br><span class="line">b.add(<span class="number">4</span>)</span><br><span class="line">c.add(<span class="number">5</span>)</span><br><span class="line">d.add(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a), <span class="built_in">id</span>(b), <span class="built_in">id</span>(c), <span class="built_in">id</span>(d))</span><br></pre></td></tr></table></figure>
<pre><code>22492476895528 22492476895528 22492476895304 22492374233384</code></pre>
<p><a href="http://t.cn/RgKd3E7">网页版演示</a></p>
<p><img data-src='/advance/nbtutor5.png' width='550'/></p>
<ul>
<li>对于 numpy 的情况</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%nbtutor -r -f -i</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">b = a[:] <span class="comment"># 浅拷贝!</span></span><br><span class="line">c = a.copy()  <span class="comment"># 深拷贝, 同 deepcopy(a)</span></span><br><span class="line">d = a[[<span class="number">0</span>, <span class="number">2</span>]]  <span class="comment"># 花式切片是深拷贝</span></span><br><span class="line">b[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">c[<span class="number">1</span>] = -<span class="number">2</span></span><br><span class="line">d[<span class="number">1</span>] = -<span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># id 虽各不同, 但 .__array_interface__[&#x27;data&#x27;][0] 可能相同</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a, b, c, d):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(i), i.__array_interface__[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<pre><code>22928831926400 93879086511872
22928831928960 93879086511872
22928829201984 93879072448320
22928829199344 93879078700736</code></pre>
<p><a href="http://t.cn/Rg9hST6">网页版演示</a> (<strong>Site
Error</strong>: Ruby and Python+Anaconda backends are permanently
unavailable)</p>
<p>参见之前的 <a href="#矩阵">np.matrix, np.asmatrix</a></p>
<h2 id="其他格式文件读写"><a href="#其他格式文件读写"
class="headerlink"></a>其他格式文件读写</h2>
<h3 id="用-pandas-读-csv"><a href="#用-pandas-读-csv"
class="headerlink"></a>用 pandas 读 csv</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data/data.csv&quot;</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
col1
</th>
<th>
col2
</th>
<th>
col3
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
row1
</td>
<td>
1
</td>
<td>
10.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
row2
</td>
<td>
2
</td>
<td>
0.2
</td>
</tr>
<tr>
<th>
2
</th>
<td>
row3
</td>
<td>
3
</td>
<td>
300.0
</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.columns</span><br></pre></td></tr></table></figure>
<pre><code>Index([&#39;col1&#39;, &#39;col2&#39;, &#39;col3&#39;], dtype=&#39;object&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.col1</span><br></pre></td></tr></table></figure>
<pre><code>0    row1
1    row2
2    row3
Name: col1, dtype: object</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&#x27;col1&#x27;</span>]</span><br></pre></td></tr></table></figure>
<pre><code>0    row1
1    row2
2    row3
Name: col1, dtype: object</code></pre>
<p>只取一部分:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;data/data.csv&quot;</span>, nrows=<span class="number">2</span>, usecols=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">data</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
col1
</th>
<th>
col3
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
row1
</td>
<td>
10.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
row2
</td>
<td>
0.2
</td>
</tr>
</tbody>
</table>
</div>
<p>对于超大文件, 参见: <a
href="https://www.dataquest.io/blog/pandas-big-data/"
class="uri">https://www.dataquest.io/blog/pandas-big-data/</a></p>
<h3 id="fortran-二进制文件读写"><a href="#fortran-二进制文件读写"
class="headerlink"></a>Fortran 二进制文件读写</h3>
<h4 id="unformatted-sequential"><a href="#unformatted-sequential"
class="headerlink"></a>Unformatted (sequential)</h4>
<p>使用 <code>scipy.io.FortranFile</code><br> 参考: <a
href="https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.io.FortranFile.read_record.html"
class="uri">https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.io.FortranFile.read_record.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python (write)</span></span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> FortranFile</span><br><span class="line">var1 = <span class="number">1.1</span>  <span class="comment"># &#x27;&lt;f8&#x27;</span></span><br><span class="line">var2 = <span class="number">0</span>  <span class="comment"># &#x27;&lt;i8&#x27;</span></span><br><span class="line">arr = np.arange(<span class="number">6.</span>).reshape((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># &#x27;(2, 3)&lt;f8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(var1, var2)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;arr[0, 1] = <span class="subst">&#123;arr[<span class="number">0</span>, <span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行存入</span></span><br><span class="line"><span class="keyword">with</span> FortranFile(<span class="string">&#x27;data/data_fortran1-1.dat&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write_record(var1)</span><br><span class="line">    f.write_record(var2)</span><br><span class="line">    f.write_record(arr)</span><br><span class="line"><span class="comment"># 单行存入</span></span><br><span class="line"><span class="keyword">with</span> FortranFile(<span class="string">&#x27;data/data_fortran1-2.dat&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write_record(var1, var2, arr)</span><br></pre></td></tr></table></figure>
<pre><code>1.1 0
[[0. 1. 2.]
 [3. 4. 5.]]
arr[0, 1] = 1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python (read)</span></span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> FortranFile</span><br><span class="line"><span class="comment"># 多行存入的情况</span></span><br><span class="line"><span class="keyword">with</span> FortranFile(<span class="string">&#x27;data/data_fortran1-1.dat&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    var1 = <span class="built_in">float</span>(f.read_record(<span class="string">&#x27;&lt;f8&#x27;</span>))</span><br><span class="line">    var2 = <span class="built_in">int</span>(f.read_record(<span class="string">&#x27;&lt;i8&#x27;</span>))  <span class="comment"># 注意精度(上面python存入的是默认&#x27;int64&#x27;)</span></span><br><span class="line">    arr = f.read_record(<span class="string">&#x27;(2, 3)&lt;f8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;data_fortran1-1.dat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(var1, var2)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment"># 单行存入的情况</span></span><br><span class="line"><span class="keyword">with</span> FortranFile(<span class="string">&#x27;data/data_fortran1-2.dat&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment">#     data = f.read_record(&#x27;&lt;f8, &lt;i8, (2, 3)&lt;f8&#x27;)  # 不指定名称</span></span><br><span class="line">    data = f.read_record([(<span class="string">&#x27;var1&#x27;</span>, <span class="string">&#x27;&lt;f8&#x27;</span>), (<span class="string">&#x27;var2&#x27;</span>, <span class="string">&#x27;&lt;i8&#x27;</span>),</span><br><span class="line">                         (<span class="string">&#x27;arr&#x27;</span>, <span class="string">&#x27;(2, 3)&lt;f8&#x27;</span>)])  <span class="comment"># 指定名称: (name, dtype)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\ndata_fortran1-2.dat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;keys = <span class="subst">&#123;data.dtype.names&#125;</span>&#x27;</span>)  <span class="comment"># 如读取时未指定名称则为 [&#x27;f0&#x27;, &#x27;f1&#x27;, ...]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(data[<span class="string">&#x27;var1&#x27;</span>]), <span class="built_in">int</span>(data[<span class="string">&#x27;var2&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;arr&#x27;</span>])</span><br></pre></td></tr></table></figure>
<pre><code>data_fortran1-1.dat
1.1 0
[[0. 1. 2.]
 [3. 4. 5.]]

data_fortran1-2.dat
keys = (&#39;var1&#39;, &#39;var2&#39;, &#39;arr&#39;)
1.1 0
[[[0. 1. 2.]
  [3. 4. 5.]]]</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">cd</span> examples/</span><br><span class="line">ifort -o test_read_seq test_read_seq.f90</span><br><span class="line">./test_read_seq</span><br></pre></td></tr></table></figure>
<pre><code> data_fortran1-1.dat
   1.1  0.0
   0.0  1.0  2.0
   3.0  4.0  5.0
 arr(2, 1) =   1.0

 data_fortran1-2.dat
   1.1  0.0
   0.0  1.0  2.0
   3.0  4.0  5.0
 arr(2, 1) =   1.0</code></pre>
<p>见 Structured arrays: <a
href="https://docs.scipy.org/doc/numpy/user/basics.rec.html"
class="uri">https://docs.scipy.org/doc/numpy/user/basics.rec.html</a></p>
<h4 id="unformatted-stream"><a href="#unformatted-stream"
class="headerlink"></a>Unformatted (stream)</h4>
<p><code>struct</code> 参考 <a
href="https://docs.python.org/3/library/struct.html"
class="uri">https://docs.python.org/3/library/struct.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python (write)</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">var1 = <span class="number">1.1</span>  <span class="comment"># &#x27;&lt;f8&#x27;</span></span><br><span class="line">var2 = <span class="number">0</span>  <span class="comment"># &#x27;&lt;i8&#x27;</span></span><br><span class="line">arr = np.arange(<span class="number">6.</span>).reshape((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># &#x27;(2, 3)&lt;f8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(var1, var2)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;arr[0, 1] = <span class="subst">&#123;arr[<span class="number">0</span>, <span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/data_fortran2.dat&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(struct.pack(<span class="string">&#x27;d&#x27;</span>, var1))</span><br><span class="line">    f.write(struct.pack(<span class="string">&#x27;i&#x27;</span>, var2))  <span class="comment"># 注意 `struct` 的 &#x27;i&#x27; 是 &#x27;&lt;i4&#x27;</span></span><br><span class="line">    arr.tofile(f)</span><br></pre></td></tr></table></figure>
<pre><code>1.1 0
[[0. 1. 2.]
 [3. 4. 5.]]
arr[0, 1] = 1.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python (read)</span></span><br><span class="line"><span class="comment"># 使用 `np.fromfile`, 读入的是 `ndarray`</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data/data_fortran2.dat&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    var1 = <span class="built_in">float</span>(np.fromfile(f, dtype=<span class="string">&#x27;&lt;f8&#x27;</span>, count=<span class="number">1</span>))</span><br><span class="line">    var2 = <span class="built_in">int</span>(np.fromfile(f, dtype=<span class="string">&#x27;&lt;i4&#x27;</span>, count=<span class="number">1</span>))</span><br><span class="line">    arr = np.fromfile(f, dtype=<span class="string">&#x27;&lt;f8&#x27;</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(var1, var2)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>
<pre><code>1.1 0
[[0. 1. 2.]
 [3. 4. 5.]]</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">cd</span> examples/</span><br><span class="line">ifort -o test_read_stream test_read_stream.f90</span><br><span class="line">./test_read_stream</span><br></pre></td></tr></table></figure>
<pre><code>  1.1 0.0
  0.0 1.0 2.0
  3.0 4.0 5.0
 arr(2, 1) =  1.0</code></pre>
<h3 id="hdf5-文件读写-ncdf-cdf-文件读取"><a
href="#hdf5-文件读写-ncdf-cdf-文件读取" class="headerlink"></a>HDF5
文件读写, NCDF, CDF 文件读取</h3>
<h4 id="读写-hdf5-文件-读-ncdf-文件"><a
href="#读写-hdf5-文件-读-ncdf-文件" class="headerlink"></a>读写 HDF5
文件, 读 NCDF 文件</h4>
<p>HDF5 格式介绍 <a
href="https://portal.hdfgroup.org/display/HDF5/Introduction+to+HDF5"
class="uri">https://portal.hdfgroup.org/display/HDF5/Introduction+to+HDF5</a></p>
<p>相关包: <code>h5py</code> 或 <code>pandas</code> +
<code>pytables</code>
(http://www.pytables.org/usersguide/datatypes.html)</p>
<p>安装见 <a href="/installpy.html#其他">Python 安装和配置</a></p>
<ul>
<li>查看</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ h5dump -H &lt;filename&gt;.hdf5</span><br><span class="line">$ ncdump -h &lt;filename&gt;.ncdf</span><br></pre></td></tr></table></figure>
<ul>
<li>用 <code>h5py</code> 读写:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line">arr = np.arange(<span class="number">10000</span>).reshape(<span class="number">50</span>,-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">with</span> h5py.File(<span class="string">&#x27;test.hdf5&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f[<span class="string">&#x27;data&#x27;</span>] = arr</span><br><span class="line">    <span class="comment"># 或</span></span><br><span class="line">    <span class="comment"># f.create_dataset(&#x27;data&#x27;, data=arr)</span></span><br><span class="line">    <span class="comment"># 其中 compression=&#x27;gzip&#x27;, compression_opts=[0-9], 可分条目用不同压缩</span></span><br><span class="line">    f[<span class="string">&#x27;lb&#x27;</span>] = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<p> 读纯 HDF5/NCDF 文件: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = h5py.File(<span class="string">&#x27;test.hdf5&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">keys = <span class="built_in">list</span>(f.keys())  <span class="comment"># [&#x27;data&#x27;, &#x27;lb&#x27;]</span></span><br><span class="line">items = <span class="built_in">list</span>(f.items())</span><br><span class="line">a = f[<span class="string">&#x27;data&#x27;</span>].value</span><br></pre></td></tr></table></figure>  读 pandas 存的文件:
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = f[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;block0_values&#x27;</span>].value</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># f[&#x27;&lt;key&gt;&#x27;] 得到的是 Dataset 或 Group 的引用</span></span><br><span class="line"><span class="comment"># 用 f[&#x27;&lt;key&gt;&#x27;].value 或切片 f[&#x27;&lt;key&gt;&#x27;][:] 得到原来的格式</span></span><br><span class="line"><span class="comment"># f[&#x27;&lt;key&gt;&#x27;] 可替代为f.get(&#x27;&lt;key&gt;&#x27;)</span></span><br><span class="line"><span class="comment"># 关闭之后 f[&#x27;data&#x27;] 的引用失效, 因此存出数据要加上.value或[:]保存数据, 或使用 deepcopy</span></span><br></pre></td></tr></table></figure>  打印读取的信息: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">pprint([(<span class="string">f&#x27;<span class="subst">&#123;k:&gt;<span class="number">20</span>&#125;</span>&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">str</span>(f[k].shape):&gt;<span class="number">20</span>&#125;</span>&#x27;</span>, <span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">str</span>(f[k].dtype):&gt;<span class="number">20</span>&#125;</span>&#x27;</span>) <span class="keyword">for</span> k <span class="keyword">in</span> f.keys()])</span><br><span class="line">pprint([(<span class="string">f&#x27;<span class="subst">&#123;k:&gt;<span class="number">20</span>&#125;</span>&#x27;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(f[k][<span class="string">&#x27;block0_values&#x27;</span>].shape):&gt;<span class="number">20</span>&#125;</span>&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">str</span>(f[k][<span class="string">&#x27;block0_values&#x27;</span>].dtype):&gt;<span class="number">20</span>&#125;</span>&quot;</span>) <span class="keyword">for</span> k <span class="keyword">in</span> f.keys()])</span><br></pre></td></tr></table></figure></p>
<ul>
<li>用pandas读写:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<p> 写: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr2 = pd.DataFrame(arr)</span><br><span class="line"><span class="comment"># complevel=[0-9], complib=&#123;&#x27;zlib&#x27;, &#x27;lzo&#x27;, &#x27;bzip2&#x27;, &#x27;blosc&#x27;&#125;</span></span><br><span class="line"><span class="keyword">with</span> pd.HDFStore(<span class="string">&#x27;test2.hdf5&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f[<span class="string">&#x27;data&#x27;</span>] = arr2</span><br><span class="line">    f[<span class="string">&#x27;lb&#x27;</span>] = pd.DataFrame(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>)))</span><br></pre></td></tr></table></figure>  读 pandas 写的文件: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = pd.HDFStore(<span class="string">&#x27;test2.hdf5&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">keys = f.keys()  <span class="comment"># [&#x27;/data&#x27;, &#x27;/lb&#x27;], 存在子目录</span></span><br><span class="line">items = <span class="built_in">list</span>(f.items())</span><br><span class="line">a = f.data.values  <span class="comment"># a = f.&lt;key&gt; 得到的是 DataFrame 的引用, f.&lt;key&gt;.values 得到原来的格式</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p>
<ul>
<li>读纯 HDF5/NCDF 文件:<br> 比如 h5py 写的文件, 目录结构和 pandas
写的不同, 要用<code>.root</code><br> 其他软件生成的文件可能不能读</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = pd.HDFStore(<span class="string">&#x27;test.hdf5&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">keys = <span class="built_in">list</span>(f.root._v_children.keys())  <span class="comment"># [&#x27;data&#x27;, &#x27;lb&#x27;]</span></span><br><span class="line">items = <span class="built_in">list</span>(f.root._v_children.items())  <span class="comment"># [&#x27;data&#x27;, &#x27;lb&#x27;], 有些文件没有.items</span></span><br><span class="line">a = f.root.data.read()</span><br><span class="line"><span class="comment"># f.root 得到 tables.group.RootGroup, f.root.&lt;key&gt; 得到tables.group.CArray</span></span><br><span class="line"><span class="comment"># f.get_node(&#x27;&lt;key&gt;&#x27;) 得到 tables.group.CArray</span></span><br><span class="line"><span class="comment"># f.root.&lt;key&gt; 可替代为 f[&#x27;&lt;key&gt;&#x27;] (有些文件不行)</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p> 打印 (以免数据有 None, 用 <code>np.shape</code>): <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pprint([(<span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>&#x27;</span>                      .rjust(<span class="number">20</span>),</span><br><span class="line">         <span class="string">f&#x27;<span class="subst">&#123;np.shape(f.get_node(k))&#125;</span>&#x27;</span>.rjust(<span class="number">20</span>),</span><br><span class="line">         <span class="string">f&#x27;<span class="subst">&#123;np.dtype(f.get_node(k))&#125;</span>&#x27;</span>.rjust(<span class="number">20</span>))</span><br><span class="line">         <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">list</span>(f.root._v_children.keys())])</span><br></pre></td></tr></table></figure>
 Bug: 无法读出 <code>H5T_STRING</code></p>
<h4 id="大小比较"><a href="#大小比较"
class="headerlink"></a>大小比较</h4>
<p>用于比较的文件名说明:</p>
<table>
<thead>
<tr>
<th style="text-align: left;">Filename</th>
<th style="text-align: left;">Method</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: left;"><em>xxx</em>_np.npy</td>
<td style="text-align: left;"><strong><code>np.save</code></strong></td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_np.npz</td>
<td
style="text-align: left;"><strong><code>np.savez_compressed</code></strong></td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_compimg.fits</td>
<td style="text-align: left;"><strong>FITS</strong> CompImageHDU
(compressed)</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_prim.fits</td>
<td style="text-align: left;"><strong>FITS</strong> PrimaryHDU</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_h5py_0.hdf5</td>
<td style="text-align: left;"><strong><code>h5py</code></strong> no
compression</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_h5py_gzip.hdf5</td>
<td style="text-align: left;"><strong><code>h5py</code></strong>
compression='gzip', compression_opts=9</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_h5py_lzf.hdf5</td>
<td style="text-align: left;"><strong><code>h5py</code></strong>
compression='lzf'</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_pd_0.hdf5</td>
<td style="text-align: left;"><strong><code>pandas</code></strong> no
compression</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_pd_blosc.hdf5</td>
<td style="text-align: left;"><strong><code>pandas</code></strong>
complib='blosc', complevel=9</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_pd_bzip2.hdf5</td>
<td style="text-align: left;"><strong><code>pandas</code></strong>
complib='bzip2', complevel=9</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_pd_lzo.hdf5</td>
<td style="text-align: left;"><strong><code>pandas</code></strong>
complib='lzo', complevel=9</td>
</tr>
<tr>
<td style="text-align: left;"><em>xxx</em>_pd_zlib.hdf5</td>
<td style="text-align: left;"><strong><code>pandas</code></strong>
complib='zlib', complevel=9</td>
</tr>
</tbody>
</table>
<ul>
<li>对于相关性强的数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run examples/test_hdf5.py</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_*.np*</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_h5py_*.hdf5</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_pd_*.hdf5</span><br></pre></td></tr></table></figure>
<pre><code>array: 15.3 M

7.7M    data/test_np.npy
1.3M    data/test_np.npz

16M data/test_h5py_0.hdf5
2.9M    data/test_h5py_gzip.hdf5
7.7M    data/test_h5py_lzf.hdf5

16M data/test_pd_0.hdf5
272K    data/test_pd_blosc.hdf5
248K    data/test_pd_bzip2.hdf5
256K    data/test_pd_lzo.hdf5
172K    data/test_pd_zlib.hdf5</code></pre>
<ul>
<li>随机数数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run examples/test_hdf5_2.py</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_*.np*</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_h5py_*.hdf5</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/test_pd_*.hdf5</span><br></pre></td></tr></table></figure>
<pre><code>array: 15.3 M

7.7M    data/test_np.npy
7.2M    data/test_np.npz

16M data/test_h5py_0.hdf5
8.0M    data/test_h5py_gzip.hdf5
9.5M    data/test_h5py_lzf.hdf5

16M data/test_pd_0.hdf5
7.7M    data/test_pd_blosc.hdf5
7.2M    data/test_pd_bzip2.hdf5
7.7M    data/test_pd_lzo.hdf5
7.1M    data/test_pd_zlib.hdf5</code></pre>
<ul>
<li>从 FITS 文件读取再转存</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span></span><br><span class="line">%run examples/test_fits_hdf5.py &#123;fname&#125;</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h &#123;fname&#125;</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_*.np*</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_*.fits</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_h5py_*.hdf5</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_pd_*.hdf5</span><br></pre></td></tr></table></figure>
<pre><code>array: 64.0 M

21M data/hmi.B_720s.20150827_052400_TAI.field.fits

65M data/fits_np.npy
27M data/fits_np.npz

21M data/fits_compimg.fits
65M data/fits_prim.fits

65M data/fits_h5py_0.hdf5
27M data/fits_h5py_gzip.hdf5
40M data/fits_h5py_lzf.hdf5

65M data/fits_pd_0.hdf5
23M data/fits_pd_blosc.hdf5
21M data/fits_pd_bzip2.hdf5
23M data/fits_pd_lzo.hdf5
20M data/fits_pd_zlib.hdf5</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fname = <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.disambig.fits&#x27;</span></span><br><span class="line">%run examples/test_fits_hdf5.py &#123;fname&#125;</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h &#123;fname&#125;</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_*.np*</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_*.fits</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_h5py_*.hdf5</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">!du -h data/fits_pd_*.hdf5</span><br></pre></td></tr></table></figure>
<pre><code>array: 32.0 M

5.4M    data/hmi.B_720s.20150827_052400_TAI.disambig.fits

33M data/fits_np.npy
5.2M    data/fits_np.npz

5.4M    data/fits_compimg.fits
33M data/fits_prim.fits

33M data/fits_h5py_0.hdf5
5.3M    data/fits_h5py_gzip.hdf5
9.7M    data/fits_h5py_lzf.hdf5

33M data/fits_pd_0.hdf5
9.5M    data/fits_pd_blosc.hdf5
4.1M    data/fits_pd_bzip2.hdf5
7.6M    data/fits_pd_lzo.hdf5
4.8M    data/fits_pd_zlib.hdf5</code></pre>
<h4 id="读取-cdf-文件"><a href="#读取-cdf-文件"
class="headerlink"></a>读取 CDF 文件</h4>
<p>相关包 <code>cdflib</code>, 安装见 <a
href="/installpy.html#其他">Python 安装和配置#其他</a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cdflib</span><br><span class="line">f = cdflib.CDF(<span class="string">&quot;&lt;filename&gt;.cdf&quot;</span>)</span><br><span class="line">f.cdf_info()  <span class="comment"># 总体信息</span></span><br><span class="line">f.varinq(<span class="string">&#x27;&lt;key&gt;&#x27;</span>)  <span class="comment"># 变量信息</span></span><br><span class="line">f.varget(<span class="string">&#x27;&lt;key&gt;&#x27;</span>)  <span class="comment"># 值</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p>
<h3 id="numpy-to-vtk"><a href="#numpy-to-vtk"
class="headerlink"></a>NumPy to VTK</h3>
<p>参考 <a
href="https://pyscience.wordpress.com/2014/09/06/numpy-to-vtk-converting-your-numpy-arrays-to-vtk-arrays-and-files/"
class="uri">https://pyscience.wordpress.com/2014/09/06/numpy-to-vtk-converting-your-numpy-arrays-to-vtk-arrays-and-files/</a><br>
以及 <a href="/installpy.html#其他">Python 安装和配置</a> <br><br>
e.g.<br> 运行 <a
href="https://github.com/lydiazly/python-intro/blob/master/examples/field2dvtk.py">examples/field2dvtk.py</a>
,<br> 打开Paraview, 选择 state 文件 'field2d.pvsm', 再选择数据文件
'field2d.vtr'</p>
<h3 id="matlab-mat-文件读写"><a href="#matlab-mat-文件读写"
class="headerlink"></a>Matlab mat 文件读写</h3>
<p>(未测试) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.io</span><br><span class="line">scipy.io.loadmat(<span class="string">&quot;&lt;filename&gt;&quot;</span>, mdict=<span class="literal">None</span>, appendmat=<span class="literal">True</span>, **kwargs)</span><br><span class="line"><span class="comment"># 如果 appendmat=True，则文件名不需要&#x27;.mat&#x27;后缀)</span></span><br><span class="line">scipy.io.savemat(<span class="string">&quot;&lt;filename&gt;&quot;</span>, mdict, appendmat=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">                 long_field_names=<span class="literal">False</span>, do_compression=<span class="literal">False</span>, oned_as=<span class="string">&#x27;row&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="脚本相关"><a href="#脚本相关"
class="headerlink"></a>脚本相关</h2>
<h3 id="脚本结构"><a href="#脚本结构"
class="headerlink"></a>脚本结构</h3>
<p>文件头: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure></p>
<p>脚本结构: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">假设这个文件的名称为 mymodule.py</span></span><br><span class="line"><span class="string">使用 `imort mymodule` 导入</span></span><br><span class="line"><span class="string">这些文字会出现在 `help(mymodule)` 或 `pydoc mymodule` 中</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x, y, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个注释必须缩进</span></span><br><span class="line"><span class="string">    args: a tuple - (arg1, arg2, ...)</span></span><br><span class="line"><span class="string">    kwargs: a dict - &#123;key1 : val1, key2 : val2&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> c</span><br><span class="line">    <span class="keyword">return</span> x + y + c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x</span>):</span><br><span class="line">    a = func1(x, x)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_func3</span>(<span class="params">x</span>):  <span class="comment"># `from xxx import *` 将不会导入这个函数</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span>  <span class="comment"># return 不写时返回 None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># your code here</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure> <code>import</code> 这个文档时,
<code>__name__</code> 为模块名, 因此 <code>main()</code> 不执行</p>
<p><code>help()</code> 也可以查看模块内的函数文档:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> usr_sunpy</span><br><span class="line"><span class="built_in">help</span>(usr_sunpy.plot_map)</span><br></pre></td></tr></table></figure>
<h3 id="try-...-except-...-语法"><a href="#try-...-except-...-语法"
class="headerlink"></a>try ... except ... 语法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ValueError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ZeroDivisionError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;no error!&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;finally...&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>见 <a href="#paraview-脚本">Paraview 的例子</a></p>
<h3 id="paraview-脚本"><a href="#paraview-脚本"
class="headerlink"></a>Paraview 脚本</h3>
<p>官方文档 <a
href="https://www.paraview.org/ParaView/Doc/Nightly/www/py-doc/index.html"
class="uri">https://www.paraview.org/ParaView/Doc/Nightly/www/py-doc/index.html</a>
<br><br> * 记录语句: 1. Tools -&gt; Start Trace 2. 进行各种操作 3. Tools
-&gt; Stop Trace 之后得到一个包含刚才操作命令的脚本,
参考其中的语句就可以写自己的脚本了. <br><br> * 需要导入的模块:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">from paraview.simple import *</span><br></pre></td></tr></table></figure>
<p><br> * 使用 pvpython (默认渲染) pvbatch (默认不渲染) 来执行脚本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pvbatch myscript.py</span><br></pre></td></tr></table></figure>
<p>也可以使用文件头 <code>#!/usr/bin/env pvbatch</code>,
加执行权限后直接执行: <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./myscript.py</span><br></pre></td></tr></table></figure> 注意: 打包的 paraview 所使用的
python 是 paraview 自带的 python2.7</p>
<p><img data-src='/advance/Screenshot_20180618-151438.png' width='700' /></p>
<ul>
<li>常用语句:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">view = GetActiveView()</span><br><span class="line">scene = GetAnimationScene()</span><br></pre></td></tr></table></figure>
<p><code>view.ViewTime</code> 修改时 <code>scene.AnimationTime</code>
不变 <code>scene.AnimationTime</code> 修改时 <code>view.ViewTime</code>
也同时被改变</p>
<p>注意: filter 必须是显示状态 (<code>Show(&lt;filter&gt;)</code>)
才能修改时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">!code -n examples/stat1.py</span><br></pre></td></tr></table></figure>
<ul>
<li>字体选择参考路径:<br>
<ul>
<li>/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf</li>
<li>/home/<user>/miniconda3/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf</li>
</ul></li>
<li>python 调用问题 (paraview 5.5.0+ 没有这个问题):</li>
</ul>
<p>paraview 某个版本之后就默认使用 python 2.7.11+.<br>
运行之前先修改环境变量 ( <code>PYTHONPATH</code> 和
<code>PYTHONSTARTUP</code>), <br>
运行结束结束后恢复这两个变量即可.<br><br> 这个过程可以使用脚本
(而不用alias): <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">unset</span> PYTHONSTARTUP  <span class="comment"># 如果有的话</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=/&lt;your_path&gt;/ParaView/lib/python2.7/site-packages</span><br><span class="line">/&lt;your_path&gt;/ParaView/bin/paraview <span class="variable">$@</span></span><br></pre></td></tr></table></figure> 用这个脚本替代原有 <code>paraview</code>,
<code>pvpython</code> 和 <code>pvbatch</code> 命令.</p>
<h3 id="python-2---3-的转换"><a href="#python-2---3-的转换"
class="headerlink"></a>Python 2 -&gt; 3 的转换</h3>
<p>比较推荐的安全的检查方式:</p>
<ul>
<li><p>备份的原文件且自动生成转换过的文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ 2to3 -w filename</span><br></pre></td></tr></table></figure></p></li>
<li><p>手动比较, 在需要的地方对照修改 filename.bak<br> 主要查看 print,
range, map 等函数.<br> 添加<br>
 <code>from __future__ import division, print_function</code><br> 在其他
import 前. <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install meld</span><br><span class="line">$ meld filename filename.bak</span><br></pre></td></tr></table></figure></p></li>
<li><p>确认无误后, 将手动修改的文件复制回去 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mv -v filename.bak filename</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>python 内查看版本的方法, 可用于 <code>if</code> 语句等 (更推荐用
<code>try...except...</code> 语法):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.version_info &gt;= (<span class="number">3</span>, <span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(sys.version_info.major &gt;= <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="执行-shell-命令"><a href="#执行-shell-命令"
class="headerlink"></a>执行 shell 命令</h3>
<p><a href="https://docs.python.org/3/library/subprocess.html"
class="uri">https://docs.python.org/3/library/subprocess.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">fname = <span class="string">&#x27;installpy.ipynb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是以列表形式传递参数</span></span><br><span class="line">subprocess.run([<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, fname]) <span class="comment"># doesn&#x27;t capture output</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果需要 `decode(&#x27;ascii&#x27;)` 转码</span></span><br><span class="line"><span class="built_in">print</span>(subprocess.run([<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, fname], stdout=subprocess.PIPE)</span><br><span class="line">                    .stdout.decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(subprocess.check_output([<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, fname]).decode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>-rw-rw-r-- 1 lydia lydia 142508 Jun 24 16:21 installpy.ipynb

-rw-rw-r-- 1 lydia lydia 142508 Jun 24 16:21 installpy.ipynb</code></pre>
<p>利用 bash 的特长来做一些字符串操作:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用整行命令需要 `shell=True`, 虽然并不是推荐的做法, 但偶尔使用无妨 (见官方文档)</span></span><br><span class="line"><span class="comment"># `r`用来取消转义</span></span><br><span class="line"><span class="comment"># `echo`使用`-n`来去掉输出的 &#x27;\n&#x27;</span></span><br><span class="line">fname_head = subprocess.check_output(<span class="string">r&quot;echo -n %s | sed &#x27;s/\.ipynb//&#x27;&quot;</span></span><br><span class="line">                                     % fname, shell=<span class="literal">True</span>).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="comment"># 或使用 strip 去掉 &#x27;\n&#x27;</span></span><br><span class="line">fname_head = subprocess.check_output(<span class="string">r&quot;echo %s | sed &#x27;s/\.ipynb//&#x27;&quot;</span></span><br><span class="line">             % fname, shell=<span class="literal">True</span>).strip().decode(<span class="string">&#x27;ascii&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span>(fname_head)</span><br></pre></td></tr></table></figure>
<pre><code>installpy</code></pre>
<p>字符串编码见 <a
href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000">廖雪峰的网站</a></p>
<ul>
<li>得到命令执行的路径</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure>
<pre><code>&#39;/home/lydia/codes/zly/python/python-intro&#39;</code></pre>
<ul>
<li>得到脚本文件所在的路径(仅脚本中使用)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.split(os.path.abspath(__file__))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>或 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.dirname(os.path.abspath(__file__))</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>os.path.split</code> 和 <code>os.path.dirname</code>
的用法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.split(<span class="string">&#x27;your/path/filename&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>(&#39;your/path&#39;, &#39;filename&#39;)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.path.dirname(<span class="string">&#x27;your/path/filename&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&#39;your/path&#39;</code></pre>
<p><code>os.path.dirname</code> 类似于 bash 的 <code>dirname</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!dirname <span class="string">&#x27;your/path/filename&#x27;</span></span><br></pre></td></tr></table></figure>
<pre><code>your/path</code></pre>
<h3 id="脚本选项"><a href="#脚本选项"
class="headerlink"></a>脚本选项</h3>
<p>推荐 <code>argparse</code>, 在过去的其他方法的基础上有所增强 <a
href="https://docs.python.org/3/library/argparse.html"
class="uri">https://docs.python.org/3/library/argparse.html</a></p>
<p>脚本内: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;Process some integers.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;an integer for the accumulator&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--sum&#x27;</span>, dest=<span class="string">&#x27;accumulate&#x27;</span>, action=<span class="string">&#x27;store_const&#x27;</span>,</span><br><span class="line">                    const=<span class="built_in">sum</span>, default=<span class="built_in">max</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;sum the integers (default: find the max)&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="built_in">print</span>(args.accumulate(args.integers))</span><br></pre></td></tr></table></figure> Shell: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python prog.py -h</span><br><span class="line">usage: prog.py [-h] [--sum] N [N ...]</span><br><span class="line">Process some integers.</span><br><span class="line">positional arguments:</span><br><span class="line"> N           an integer for the accumulator</span><br><span class="line">optional arguments:</span><br><span class="line"> -h, --help  show this help message and exit</span><br><span class="line"> --sum       sum the integers (default: find the max)</span><br></pre></td></tr></table></figure></p>
<h3 id="处理-warnings"><a href="#处理-warnings"
class="headerlink"></a>处理 warnings</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Suppress warnings of NaNs:</span></span><br><span class="line"><span class="keyword">with</span> np.errstate(invalid=<span class="string">&#x27;ignore&#x27;</span>):</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># Suppress other warnings, e.g.</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">    warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>, category=xxx)  <span class="comment"># UserWarning, FutureWarning, etc.</span></span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="urllib-requests"><a href="#urllib-requests"
class="headerlink"></a>urllib, requests</h2>
<p>示例和文件来自 <a href="http://python4astronomers.github.io"
class="uri">http://python4astronomers.github.io</a></p>
<p>注意 python3 不再使用 <code>urllib2</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">&#x27;http://python4astronomers.github.io/_downloads/myidlfile.sav&#x27;</span></span><br><span class="line">urllib.request.urlretrieve(url, <span class="string">&#x27;myidlfile.sav&#x27;</span>)</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myidlfile.sav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(urllib.request.urlopen(url).read())</span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myidlfile.sav&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(requests.get(url).content)</span><br><span class="line"><span class="comment"># 分块下载</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(&lt;url&gt;)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">128</span>):</span><br><span class="line">        f.write(chunk)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>conda</tag>
        <tag>astropy</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 安装和配置</title>
    <url>//installpy.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/installpy.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
</p>
<p><small><font color=gray>[Update 2022-07-12] Some outputs were updated
with python 3.10.</font></small></p>
<span id="more"></span>
<h2 id="安装-python"><a href="#安装-python" class="headerlink"></a>安装
python</h2>
<h3 id="安装-python-3"><a href="#安装-python-3"
class="headerlink"></a>安装 python 3</h3>
<ul>
<li>检查系统自带的版本:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.version)</span><br><span class="line">!&#123;sys.executable&#125; --version</span><br></pre></td></tr></table></figure>
<pre><code>3.10.5 | packaged by conda-forge | (main, Jun 14 2022, 07:04:59) [GCC 10.3.0]
Python 3.10.5</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">python --version</span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure>
<pre><code>Python 3.10.5
Python 3.10.5</code></pre>
<h3 id="pip"><a href="#pip" class="headerlink"></a>pip</h3>
<h4 id="安装-pip"><a href="#安装-pip" class="headerlink"></a>安装
pip</h4>
<p>检查 pip 是否安装以及版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure>
<pre><code>pip 22.1.2 from /home/lydia/miniconda3/lib/python3.10/site-packages/pip (python 3.10)</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">python -m pip --version</span><br></pre></td></tr></table></figure>
<pre><code>pip 22.1.2 from /home/lydia/miniconda3/lib/python3.10/site-packages/pip (python 3.10)</code></pre>
<p>安装 (Ubuntu):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python3-pip</span><br></pre></td></tr></table></figure>
<h4 id="用-pip-安装-python-包"><a href="#用-pip-安装-python-包"
class="headerlink"></a>用 pip 安装 python 包</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install &lt;package&gt;</span><br><span class="line">pip install --upgrade &lt;package&gt;</span><br><span class="line">pip uninstall &lt;package&gt;</span><br><span class="line">pip list</span><br><span class="line">pip list --outdated</span><br><span class="line">pip show &lt;package&gt;</span><br></pre></td></tr></table></figure>
<p>安装到根目录 (不推荐!)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -H pip install &lt;package&gt;</span><br></pre></td></tr></table></figure>
<p>[选项]</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<tbody>
<tr>
<td style="text-align: left;">-U, --upgrade</td>
<td style="text-align: left;">升级, 配合 install 使用</td>
</tr>
<tr>
<td style="text-align: left;">--force-reinstall</td>
<td style="text-align: left;">强制重新安装依赖</td>
</tr>
<tr>
<td style="text-align: left;">-I, --ignore-installed</td>
<td style="text-align: left;">强制安装 (无论是否已安装)</td>
</tr>
<tr>
<td style="text-align: left;">--no-cache-dir</td>
<td style="text-align: left;">不生成cache</td>
</tr>
<tr>
<td style="text-align: left;">-i
<font color=blue><em>url</em></font></td>
<td style="text-align: left;">使用指定源 (更改配置见 <a
href="#pip-镜像源">pip 镜像源</a>)</td>
</tr>
<tr>
<td
style="text-align: left;"><font color=blue><em>package</em></font>==x.x.x</td>
<td style="text-align: left;">指定版本, 错误版本号 (或为空)
将返回可用版本号</td>
</tr>
<tr>
<td
style="text-align: left;">"<font color=blue><em>package</em></font>&lt;x.x.x"</td>
<td style="text-align: left;">指定小于某版本的最新版本, 必须有引号</td>
</tr>
</tbody>
</table>
<p>检查包 (尝试导入, 查看包版本):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import &lt;package&gt;&quot;</span></span><br><span class="line">python -c <span class="string">&quot;import &lt;package&gt;; print(&lt;package&gt;.__version__)&quot;</span>  <span class="comment"># 版本号</span></span><br><span class="line">python -c <span class="string">&quot;import &lt;package&gt;; print(&lt;package&gt;.version)&quot;</span>  <span class="comment"># 安装位置</span></span><br></pre></td></tr></table></figure>
<h4 id="使-pip-安装-python-包到用户路径"><a
href="#使-pip-安装-python-包到用户路径" class="headerlink"></a>使 pip
安装 python 包到用户路径</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">python -m site | grep <span class="string">&#x27;USER_SITE&#x27;</span></span><br></pre></td></tr></table></figure>
<pre><code>USER_SITE: &#39;/home/lydia/.local/lib/python3.10/site-packages&#39; (doesn&#39;t exist)
ENABLE_USER_SITE: True</code></pre>
<ul>
<li>确认已创建用户包安装路径.<br></li>
<li>在 <code>~/.bashrc</code> 中设置 <code>PATH</code> 变量:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用 <code>install</code> 或 <code>list</code> 时加上选项
<font color=red>--user</font> (注意: <code>uninstall</code> 不用)</li>
</ul>
<blockquote>
<p><font color=#b32425><em>使用 Anaconda 路径下的 pip
时不需要这个选项</em></font></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --user &lt;pkg_name&gt;</span><br><span class="line">pip list --user</span><br><span class="line">pip list --outdated --user</span><br></pre></td></tr></table></figure>
<h3 id="anaconda"><a href="#anaconda"
class="headerlink"></a>Anaconda</h3>
<h4 id="安装-anaconda-或-miniconda-推荐"><a
href="#安装-anaconda-或-miniconda-推荐" class="headerlink"></a>安装
Anaconda 或 Miniconda (推荐)</h4>
<ul>
<li><p>安装 miniconda 64位 (默认安装到
<font color=blue>~/miniconda3/</font>)</p>
<p>下载 <a href="https://conda.io/miniconda.html"
class="uri">https://conda.io/miniconda.html</a></p></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>~/.bashrc</code> 加入如下语句:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/miniconda3/bin:<span class="variable">$PATH</span></span><br><span class="line">. <span class="variable">$HOME</span>/miniconda3/etc/profile.d/conda.sh</span><br></pre></td></tr></table></figure>
<p> 完成后执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<ul>
<li>安装好后先更新 conda 和 pip:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda update conda pip</span><br></pre></td></tr></table></figure>
<ul>
<li>帮助</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda [cmd] --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<p>miniconda 下载 <a href="https://conda.io/miniconda.html"
class="uri">https://conda.io/miniconda.html</a><br> 安装参考 <a
href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html"
class="uri">https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html</a></p>
<h4 id="environment"><a href="#environment"
class="headerlink"></a>environment</h4>
<p>默认环境为 base<br> <code>-n, --name &lt;env_name&gt;</code>
指定环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create --name &lt;env_name&gt; [&lt;packages&gt;] python=3.6</span><br><span class="line">conda create --name &lt;env_name&gt; --<span class="built_in">clone</span> base</span><br><span class="line"></span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">conda create --name intel intelpython3_core python=3</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除环境</span></span><br><span class="line">conda-env remove --name &lt;env_name&gt;</span><br><span class="line">*</span><br><span class="line"><span class="comment"># 列出信息</span></span><br><span class="line">conda info -e/--envs</span><br><span class="line">conda-env list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入环境</span></span><br><span class="line"><span class="built_in">source</span> activate &lt;env_name&gt;</span><br><span class="line">conda activate &lt;env_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离开环境</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在某环境中执行操作</span></span><br><span class="line">conda &lt;commands&gt; --name &lt;env_name&gt;</span><br></pre></td></tr></table></figure>
<h4 id="使用-conda-命令"><a href="#使用-conda-命令"
class="headerlink"></a>使用 conda 命令</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info</span><br><span class="line">conda list [&lt;packages&gt;]</span><br><span class="line">conda search &lt;package&gt;</span><br><span class="line">conda search &lt;package&gt; --info</span><br><span class="line">conda install &lt;packages&gt;</span><br><span class="line">conda update/upgrade &lt;packages&gt;</span><br><span class="line">conda remove/uninstall &lt;packages&gt;</span><br><span class="line">conda clean --all</span><br></pre></td></tr></table></figure>
<p>见 <code>conda --help</code> 或 <code>conda cmd --help</code>,
<code>conda search</code> 语法见 <a
href="https://github.com/conda/conda/blob/master/conda/models/match_spec.py"
class="uri">https://github.com/conda/conda/blob/master/conda/models/match_spec.py</a></p>
<p>配置: <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装确认时显示源的 url, 默认已开启</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls True</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止每次更新自动检查 conda 的更新, 默认True</span></span><br><span class="line">conda config --<span class="built_in">set</span> auto_update_conda False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止源优先而使用版本优先, 默认True</span></span><br><span class="line">conda config --<span class="built_in">set</span> channel_priority False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加设置, 例如增加源 (可使用 url 或别名)</span></span><br><span class="line">conda config --add channels &lt;channel&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某项设置的所有值, 例如删除所有自定义源</span></span><br><span class="line">conda config --remove-key channels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某项设置的某个值, 例如删除某个源</span></span><br><span class="line">conda config --remove channels &lt;channel&gt;</span><br></pre></td></tr></table></figure></p>
<p>用户配置文件 <code>~/.condarc</code> (见 <a
href="#conda-镜像源">conda 镜像源</a>)<br> 参考链接 <a
href="https://conda.io/docs/user-guide/configuration/use-condarc.html"
class="uri">https://conda.io/docs/user-guide/configuration/use-condarc.html</a></p>
<p>也可以在不同的环境用不同的配置文件:
<code>~/miniconda3/envs/&lt;env_name&gt;/.condarc</code></p>
<h3 id="镜像源"><a href="#镜像源" class="headerlink"></a>镜像源</h3>
<h4 id="pip-镜像源"><a href="#pip-镜像源" class="headerlink"></a>pip
镜像源</h4>
<p>用户配置文件:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line"><span class="built_in">cat</span> ~/.pip/pip.conf</span><br></pre></td></tr></table></figure>
<pre><code>[global]
index-url = &lt;https://pypi.douban.com/simple&gt;
trusted-host = pypi.doubanio.com</code></pre>
<h4 id="conda-镜像源"><a href="#conda-镜像源"
class="headerlink"></a>conda 镜像源</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add/--prepend channels &lt;new_channel&gt;</span><br><span class="line">conda config --append channels &lt;new_channel&gt;</span><br></pre></td></tr></table></figure>
<p>清华源:<br> <a
href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/"
class="uri">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</a><br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/"
class="uri">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>
<a
href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/"
class="uri">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br></p>
<p>channels 的默认的优先级为: 前排优先<br> 镜像源中
<code>pkgs/main</code> 通常比 <code>pkgs/free</code> 新,
因此将其放在最前.<br> 或使用 <code>channel_priority: false</code>,
见上一节 <a href="#使用-conda-命令">conda 设置</a>.</p>
<p>e.g.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels &lt;https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/&gt;</span><br></pre></td></tr></table></figure>
<p>此时 <code>~/.condarc</code> 的内容:</p>
<blockquote>
<p>channels:<br>  - <a
href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/"
class="uri">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</a><br>
 - defaults</p>
</blockquote>
<h3 id="troubleshooting"><a href="#troubleshooting"
class="headerlink"></a>Troubleshooting</h3>
<h4 id="conda-安装时指定源且禁用其他源"><a
href="#conda-安装时指定源且禁用其他源" class="headerlink"></a>conda
安装时指定源且禁用其他源</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install &lt;packages&gt; -c &lt;channel&gt; --override-channels</span><br></pre></td></tr></table></figure>
<h4 id="astropy-新版不再支持旧版-python"><a
href="#astropy-新版不再支持旧版-python" class="headerlink"></a>Astropy
新版不再支持旧版 Python</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install <span class="string">&quot;astropy&lt;3.0&quot;</span> <span class="comment"># for python &lt; 3.5</span></span><br></pre></td></tr></table></figure>
<h2 id="安装常用包"><a href="#安装常用包"
class="headerlink"></a>安装常用包</h2>
<h3 id="numpy-scipy-matplotlib"><a href="#numpy-scipy-matplotlib"
class="headerlink"></a>numpy, scipy, matplotlib</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line">conda install scipy</span><br><span class="line">conda install matplotlib</span><br></pre></td></tr></table></figure>
<p> Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure></p>
<p>配置启动文件 (Ubuntu), 在 <code>~/.bashrc</code> 中添加:
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONSTARTUP=<span class="variable">$HOME</span>/.pythonrc</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat ~/.pythonrc</span><br></pre></td></tr></table></figure>
<pre><code># Python startup file
# ~/.pythonrc
import matplotlib.pyplot as plt
from matplotlib import cm
import numpy as np
import os

print(&quot;&gt;&gt;&gt; import matplotlib.pyplot as plt&quot;)
print(&quot;&gt;&gt;&gt; from matplotlib import cm&quot;)
print(&quot;&gt;&gt;&gt; import numpy as np&quot;)
print(&quot;&gt;&gt;&gt; import os&quot;)

try:
    from pprint import pprint
except ImportError:
    pass
else:
    print(&quot;&gt;&gt;&gt; from pprint import pprint&quot;)

# Tab completion &amp; history
try:
    import atexit, readline, rlcompleter
except ImportError:
    pass
else:
    readline.parse_and_bind(&#39;tab: complete&#39;) # Tab completion
    readline.parse_and_bind(&#39;&#39;&#39;control-l:&quot;    &quot;&#39;&#39;&#39;) # Indent, since TAB is occupied
    histfile = os.path.join(os.environ[&#39;HOME&#39;], &#39;.pyhistory&#39;) # History file
    try:
        readline.read_history_file(histfile)
    except IOError:
        pass
    atexit.register(readline.write_history_file, histfile)
    del histfile, readline, rlcompleter
    print(&quot;--- Tab completion: [ON] ---&quot;)
    print(&quot;--- History: [ON] ---&quot;)
    print(&quot;--- [Tab] -&gt; [Ctrl+L] ---&quot;)</code></pre>
<h3 id="astropy-sunpy"><a href="#astropy-sunpy"
class="headerlink"></a>Astropy, SunPy</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install astropy</span><br><span class="line">conda install sunpy -c conda-forge</span><br></pre></td></tr></table></figure>
<p> Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install astropy</span><br><span class="line">pip install sunpy[all] pytest</span><br></pre></td></tr></table></figure></p>
<p>测试:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> astropy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>astropy.test()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sunpy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sunpy.self_test(online=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>如果出错: '$USER'权限问题, 见下面修改 <code>~/.sunpy/sunpyrc</code>
说明.</p>
<p>查看包信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">conda search <span class="string">&quot;conda-forge::sunpy&gt;=4.0&quot;</span></span><br></pre></td></tr></table></figure>
<pre><code>Loading channels: ...working... done
# Name                       Version           Build  Channel             
sunpy                          4.0.0 py310hde88566_0  conda-forge         
sunpy                          4.0.0  py38h71d37f0_0  conda-forge         
sunpy                          4.0.0  py39hd257fcd_0  conda-forge         
sunpy                          4.0.1 py310hde88566_0  conda-forge         
sunpy                          4.0.1  py38h71d37f0_0  conda-forge         
sunpy                          4.0.1  py39hd257fcd_0  conda-forge         
sunpy                          4.0.2 py310hde88566_0  conda-forge         
sunpy                          4.0.2  py38h71d37f0_0  conda-forge         
sunpy                          4.0.2  py39hd257fcd_0  conda-forge         
sunpy                          4.0.3 py310hde88566_0  conda-forge         
sunpy                          4.0.3  py38h71d37f0_0  conda-forge         
sunpy                          4.0.3  py39hd257fcd_0  conda-forge         </code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">conda search <span class="string">&quot;sunpy 4.0.3 py310hde88566_0&quot;</span> --info</span><br></pre></td></tr></table></figure>
<pre><code>Loading channels: ...working... done
sunpy 4.0.3 py310hde88566_0
---------------------------
file name   : sunpy-4.0.3-py310hde88566_0.tar.bz2
name        : sunpy
version     : 4.0.3
build       : py310hde88566_0
build number: 0
size        : 5.7 MB
license     : BSD-2-Clause
subdir      : linux-64
url         : &lt;https://conda.anaconda.org/conda-forge/linux-64/sunpy-4.0.3-py310hde88566_0.tar.bz2&gt;
md5         : 5831b8fde0edd2aa0ff9f42b237b7ba2
timestamp   : 2022-07-08 16:21:32 UTC
dependencies: 
  - asdf &gt;=2.8.0
  - asdf-astropy &gt;=0.1.1
  - astropy &gt;=4.1.0
  - beautifulsoup4 &gt;=4.8.0
  - cdflib &gt;=0.3.19,!=0.4.0
  - drms &gt;=0.6.1
  - glymur &gt;=0.8.18,!=0.9.0,!=0.9.5
  - h5netcdf &gt;=0.8.1
  - h5py &gt;=3.1.0
  - libgcc-ng &gt;=12
  - matplotlib-base &gt;=3.2.0
  - mpl_animators &gt;=1.0.0
  - numpy &gt;=1.21.6,&lt;2.0a0
  - pandas &gt;=1.0.0
  - parfive &gt;=1.2.0
  - python &gt;=3.10,&lt;3.11.0a0
  - python-dateutil &gt;=2.8.0
  - python_abi 3.10.* *_cp310
  - reproject
  - scikit-image &gt;=0.16.0
  - scipy &gt;=1.3.0
  - setuptools
  - sqlalchemy &gt;=1.3.4
  - tqdm &gt;=4.32.1
  - zeep &gt;=3.4.0</code></pre>
<p>用户文件位置: <code>~/.sunpy/sunpyrc</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat ~/.sunpy/sunpyrc</span><br></pre></td></tr></table></figure>
<pre><code>[general]
time_format = %Y-%m-%d %H:%M:%S
working_dir = /home/lydia/sunpy-downloads

[downloads]
download_dir = /home/lydia/sunpy-downloads/data
sample_dir = /home/lydia/sunpy-downloads/data/sample_data

[database]
url = sqlite:////home/lydia/sunpy-downloads/sunpydb.sqlite</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sunpy</span><br><span class="line">sunpy.util.system_info()</span><br></pre></td></tr></table></figure>
<pre><code>==============================
sunpy Installation Information
==============================

General
#######
OS: Ubuntu (18.04, Linux 4.19.128-microsoft-standard)
Arch: 64bit, (x86_64)
sunpy: 4.0.3
Installation path: /home/lydia/miniconda3/lib/python3.10/site-packages/sunpy-4.0.3.dist-info

Required Dependencies
#####################
astropy: 5.1
numpy: 1.23.1
packaging: 21.3
parfive: 1.5.1

Optional Dependencies
#####################
asdf: 2.12.0
asdf-astropy: 0.2.1
beautifulsoup4: 4.11.1
cdflib: 0.4.4
dask: 2022.7.0
drms: 0.6.2
glymur: 0.10.1
h5netcdf: 0.0.0
h5py: 3.7.0
matplotlib: 3.5.2
mpl-animators: 1.0.1
pandas: 1.4.1
python-dateutil: 2.8.2
reproject: 0.8
scikit-image: 0.19.3
scipy: 1.8.1
sqlalchemy: 1.4.39
tqdm: 4.64.0
zeep: 4.1.0</code></pre>
<p>设置下载位置:<br> (参考 <a
href="http://docs.sunpy.org/en/stable/guide/customization.html?=sunpy.config.set)"
class="uri">http://docs.sunpy.org/en/stable/guide/customization.html?=sunpy.config.set)</a></p>
<p>e.g. &gt; [downloads]<br>  download_dir = ...</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sunpy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sunpy.config.<span class="built_in">set</span>(<span class="string">&#x27;downloads&#x27;</span>, <span class="string">&#x27;download_dir&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;/home/&lt;user&gt;/&lt;your_path&gt;/sunpy-downloads/data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>退出后再进入 python 如果发现没有修改成功, 则需要手动修改
~/.sunpy/sunpyrc 文件.<br> 不能用 '$USER' 代替具体的用户名
'&lt;user&gt;'</p>
<h3 id="jupyter"><a href="#jupyter" class="headerlink"></a>Jupyter</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install jupyter -c conda-forge</span><br></pre></td></tr></table></figure>
<p> Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%%bash</span><br><span class="line">jupyter --path</span><br></pre></td></tr></table></figure>
<pre><code>config:
    /home/lydia/.jupyter
    /home/lydia/.local/etc/jupyter
    /home/lydia/miniconda3/etc/jupyter
    /usr/local/etc/jupyter
    /etc/jupyter
data:
    /home/lydia/.local/share/jupyter
    /home/lydia/miniconda3/share/jupyter
    /usr/local/share/jupyter
    /usr/share/jupyter
runtime:
    /home/lydia/.local/share/jupyter/runtime</code></pre>
<ul>
<li>设置双击打开 *.ipynb 文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nbopen</span><br></pre></td></tr></table></figure>
<p>再执行:</p>
<p>Linux/BSD: <br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m nbopen.install_xdg&lt;br&gt;</span><br><span class="line"> ```   </span><br><span class="line"></span><br><span class="line">Windows: &lt;br&gt;</span><br><span class="line">```bash</span><br><span class="line">python3 -m nbopen.install_win&lt;br&gt;</span><br></pre></td></tr></table></figure></p>
<p>Mac: <br>  Clone the repository
(https://github.com/takluyver/nbopen.git)<br>  and run
<code>./osx-install.sh</code><br><br>
之后即可在文件浏览器中选择文件的打开方式为
<code>Jupyter Notebook</code>.</p>
<blockquote>
<p>注意可能会更改 bash 脚本的默认打开方式.</p>
</blockquote>
<ul>
<li>Jupyter
插件集合<br>(https://github.com/ipython-contrib/jupyter_contrib_nbextensions)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install jupyter_contrib_nbextensions -c conda-forge</span><br></pre></td></tr></table></figure>
<p> Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br></pre></td></tr></table></figure> &gt; This also automatically installs the
Javascript and CSS files:<br>
<code>jupyter contrib nbextension install --sys-prefix</code></p>
<p>安装好后将同时启用 <code>Nbextensions</code> 选项卡,
手动选择需要的插件, 或者在命令行启用和禁用:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter nbextension list <span class="comment"># 查看</span></span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> &lt;path&gt; <span class="comment"># &lt;path&gt; 为上述 list 中的 &lt;extension&gt;/main</span></span><br><span class="line">jupyter nbextension <span class="built_in">disable</span> &lt;path&gt;</span><br></pre></td></tr></table></figure>
<p>注意用如果 jupyter 安装在 conda 路径, 手动安装插件
(<code>jupyter nbextension install</code>) 时需要指定
<font color=red>--sys-prefix</font></p>
<ul>
<li>notebook 主题 (https://github.com/dunovank/jupyter-themes)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyterthemes</span><br></pre></td></tr></table></figure>
<ul>
<li>演示代码过程的插件 (https://github.com/lgpage/nbtutor)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install nbtutor -c conda-forge</span><br></pre></td></tr></table></figure>
<p> Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install nbtutor</span><br><span class="line">jupyter nbextension install --overwrite --py nbtutor</span><br><span class="line">jupyter nbextension <span class="built_in">enable</span> --py nbtutor</span><br></pre></td></tr></table></figure></p>
<p>载入:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipython/jupyter</span></span><br><span class="line">%load_ext nbtutor</span><br></pre></td></tr></table></figure>
<p>使用:<br> CodeCell 中首行加入下面语句, 然后执行 Cell (numpy 等需要在
Cell 内导入) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipython/jupyter</span></span><br><span class="line">%%nbtutor -r -f</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">%%nbtutor -r -f -i  <span class="comment"># 缩减显示</span></span><br></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink"></a>其他</h3>
<ul>
<li>PeakUtils (http://peakutils.readthedocs.io/en/latest/)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;https://bitbucket.org/lucashnegri/peakutils.git&gt;</span><br><span class="line"><span class="built_in">cd</span> peakutils</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> peakutils</span><br></pre></td></tr></table></figure>
<ul>
<li>LMfit-py (https://github.com/lmfit/lmfit-py)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install lmfit -c conda-forge</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">pip install lmfit</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> lmfit</span><br></pre></td></tr></table></figure>
<ul>
<li>HDF5包 (http://docs.h5py.org/en/latest/index.html)<br></li>
</ul>
<p><strong>pandas</strong> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install pytables pandas</span><br></pre></td></tr></table></figure>  Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tables pandas</span><br></pre></td></tr></table></figure> <br><br>
<strong>h5py</strong> (http://docs.h5py.org/en/latest/index.html)
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install h5py  <span class="comment"># 推荐. 将同时安装 hdf5, 并得到 h5dump 等命令</span></span><br></pre></td></tr></table></figure>  Or <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install h5py  <span class="comment"># 需要 sudo apt-get install libhdf5-dev</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>CDF包<br></li>
</ul>
<p>安装 spacepy (https://pythonhosted.org/SpacePy)</p>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install cdflib <span class="comment"># &lt;https://github.com/MAVENSDC/cdflib&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>EVTK (https://bitbucket.org/pauloh/pyevtk)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mercurial  <span class="comment"># 得到 hg 命令</span></span><br><span class="line"></span><br><span class="line">hg <span class="built_in">clone</span> &lt;https://bitbucket.org/pauloh/pyevtk&gt;</span><br><span class="line"><span class="built_in">cd</span> pyevtk</span><br><span class="line">python setup.py build --debug install</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hg pull &amp;&amp; hg update default <span class="comment"># 更新</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> evtk.hl <span class="keyword">import</span> gridToVTK</span><br></pre></td></tr></table></figure>
<ul>
<li>Mayavi (http://docs.enthought.com/mayavi/mayavi)</li>
</ul>
<p> 需要先安装 cython (conda 或 pip)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install mayavi  <span class="comment"># 将同时安装 vtk. (pip 是目前 mayavi 最保险的安装方式)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell</span></span><br><span class="line">mayavi2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>conda</tag>
        <tag>astropy</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>Example: Downloading Data Using Fido</title>
    <url>//fido.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/fido.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
</p>
<p>Reference <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html</a></p>
<p>See also: <a href="/jsoc.html">Example: downloading data from
JSOC</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs</span><br></pre></td></tr></table></figure>
<p>To be clear, here we use <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs</span><br></pre></td></tr></table></figure> instead of examples in <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html</a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure> <span id="more"></span></p>
<h2 id="searching-for-data"><a href="#searching-for-data"
class="headerlink"></a>Searching for data</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = Fido.search(</span><br><span class="line">    attrs.Time(<span class="string">&#x27;2014-01-01T00:00:00&#x27;</span>, <span class="string">&#x27;2014-01-01T00:01:00&#x27;</span>),</span><br><span class="line">    <span class="comment"># UTC time as default</span></span><br><span class="line">    attrs.Instrument(<span class="string">&#x27;aia&#x27;</span>),</span><br><span class="line">    attrs.Wavelength(<span class="number">304</span> * u.AA) | attrs.Wavelength(<span class="number">171</span> * u.AA)</span><br><span class="line">)</span><br><span class="line">response</span><br></pre></td></tr></table></figure>
Results from 2 Providers:<br><br>5 Results from the
VSOClient:<br><i>QTable length=5</i>
<table id="table23199520252144" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
Start Time [1]
</th>
<th>
End Time [1]
</th>
<th>
Source
</th>
<th>
Instrument
</th>
<th>
Type
</th>
<th>
Wavelength [2]
</th>
</tr>
</thead>
<thead>
<tr>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
Angstrom
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str19
</th>
<th>
str19
</th>
<th>
str3
</th>
<th>
str3
</th>
<th>
str8
</th>
<th>
float64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01 00:00:07
</td>
<td>
2014-01-01 00:00:08
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:19
</td>
<td>
2014-01-01 00:00:20
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:31
</td>
<td>
2014-01-01 00:00:32
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:43
</td>
<td>
2014-01-01 00:00:44
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:55
</td>
<td>
2014-01-01 00:00:56
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
</table>
<br>5 Results from the VSOClient:<br><i>QTable length=5</i>
<table id="table23199530661536" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
Start Time [1]
</th>
<th>
End Time [1]
</th>
<th>
Source
</th>
<th>
Instrument
</th>
<th>
Type
</th>
<th>
Wavelength [2]
</th>
</tr>
</thead>
<thead>
<tr>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
Angstrom
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str19
</th>
<th>
str19
</th>
<th>
str3
</th>
<th>
str3
</th>
<th>
str8
</th>
<th>
float64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01 00:00:11
</td>
<td>
2014-01-01 00:00:12
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:23
</td>
<td>
2014-01-01 00:00:24
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:35
</td>
<td>
2014-01-01 00:00:36
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:47
</td>
<td>
2014-01-01 00:00:48
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:59
</td>
<td>
2014-01-01 00:01:00
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
</table>
<p><br></p>
<h2 id="indexing"><a href="#indexing"
class="headerlink"></a>Indexing</h2>
<ul>
<li><p>First index: client (still necessary even if results are only
found for a single client)</p></li>
<li><p>Second index: rows (must be integers or slices, <strong>not
list</strong>)</p></li>
</ul>
<p>See also <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html#indexing-search-results"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/fido.html#indexing-search-results</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>5 Results from the
VSOClient:<br><i>QTable length=5</i>
<table id="table23199520359032" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
Start Time [1]
</th>
<th>
End Time [1]
</th>
<th>
Source
</th>
<th>
Instrument
</th>
<th>
Type
</th>
<th>
Wavelength [2]
</th>
</tr>
</thead>
<thead>
<tr>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
Angstrom
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str19
</th>
<th>
str19
</th>
<th>
str3
</th>
<th>
str3
</th>
<th>
str8
</th>
<th>
float64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01 00:00:11
</td>
<td>
2014-01-01 00:00:12
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:23
</td>
<td>
2014-01-01 00:00:24
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:35
</td>
<td>
2014-01-01 00:00:36
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:47
</td>
<td>
2014-01-01 00:00:48
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:59
</td>
<td>
2014-01-01 00:01:00
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
</table>
<p><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">1</span>, ::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>3 Results from the
VSOClient:<br><i>QTable length=3</i>
<table id="table23199520361608" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
Start Time [1]
</th>
<th>
End Time [1]
</th>
<th>
Source
</th>
<th>
Instrument
</th>
<th>
Type
</th>
<th>
Wavelength [2]
</th>
</tr>
</thead>
<thead>
<tr>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
Angstrom
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str19
</th>
<th>
str19
</th>
<th>
str3
</th>
<th>
str3
</th>
<th>
str8
</th>
<th>
float64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01 00:00:11
</td>
<td>
2014-01-01 00:00:12
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:35
</td>
<td>
2014-01-01 00:00:36
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
<tr>
<td>
2014-01-01 00:00:59
</td>
<td>
2014-01-01 00:01:00
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
171.0 .. 171.0
</td>
</tr>
</table>
<p><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>1 Results from the
VSOClient:<br><i>QTable length=1</i>
<table id="table23199531124496" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
Start Time [1]
</th>
<th>
End Time [1]
</th>
<th>
Source
</th>
<th>
Instrument
</th>
<th>
Type
</th>
<th>
Wavelength [2]
</th>
</tr>
</thead>
<thead>
<tr>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
Angstrom
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str19
</th>
<th>
str19
</th>
<th>
str3
</th>
<th>
str3
</th>
<th>
str8
</th>
<th>
float64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01 00:00:19
</td>
<td>
2014-01-01 00:00:20
</td>
<td>
SDO
</td>
<td>
AIA
</td>
<td>
FULLDISK
</td>
<td>
304.0 .. 304.0
</td>
</tr>
</table>
<p><br></p>
<h2 id="downloading-data"><a href="#downloading-data"
class="headerlink"></a>Downloading data</h2>
<p>Download the entire results:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = Fido.fetch(response, path=<span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Download a subset:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = Fido.fetch(response[<span class="number">0</span>, <span class="number">0</span>], path=<span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><code>Fido.fetch</code> will output a progress bar by default.</p>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>JSOC Download Example</title>
    <url>//jsoc-download-example.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/fido.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> attrs, jsoc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Suppress some warnings</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> astropy.utils.exceptions <span class="keyword">import</span> AstropyDeprecationWarning</span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>, category=FutureWarning)</span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>, category=AstropyDeprecationWarning)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JSOC string: &quot;aia.lev1_euv_12s[2014-10-26T10:00:00Z-2014-10-26T11:00:00Z@1m][193,304]&#123;image&#125;&quot;</span></span><br><span class="line">client = jsoc.JSOCClient()</span><br><span class="line">response = client.search(</span><br><span class="line">    attrs.jsoc.Time(<span class="string">&#x27;2014-10-26T10:00:00&#x27;</span>, <span class="string">&#x27;2014-10-26T10:30:00&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Notify(<span class="string">&#x27;xxx@xxx&#x27;</span>),  <span class="comment"># email</span></span><br><span class="line">    attrs.jsoc.Series(<span class="string">&#x27;aia.lev1_euv_12s&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Segment(<span class="string">&#x27;image&#x27;</span>),</span><br><span class="line">    attrs.Sample(<span class="number">10.</span> * u.<span class="built_in">min</span>),  <span class="comment"># interval</span></span><br><span class="line">    attrs.jsoc.Wavelength(<span class="number">193</span> * u.AA) | attrs.jsoc.Wavelength(<span class="number">304</span> * u.AA)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">response</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<i>Table length=8</i>
<table id="table23026665135352" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-10-26T10:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_2
</td>
<td>
193
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:10:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_2
</td>
<td>
193
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:20:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_2
</td>
<td>
193
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:30:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_2
</td>
<td>
193
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:10:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:20:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2156
</td>
</tr>
<tr>
<td>
2014-10-26T10:30:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2156
</td>
</tr>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests = client.request_data(response)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests[<span class="number">0</span>].<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests[<span class="number">0</span>].status</span><br></pre></td></tr></table></figure>
<p>如官网所述, 只有为'1'时才可以下载, 但有时还是'2'时也可以下
(可能是状态有延迟?).</p>
<p>总之如果发现下面的语句不能执行, 请再等一会再试.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = client.get_request(requests, path=<span class="string">&#x27;./data&#x27;</span>, overwrite=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><code>overwrite</code> 默认为 False,
即跳过已存在的文件(即使该文件数据不全, 因此建议设为 True)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res.wait() </span><br></pre></td></tr></table></figure>
<p><code>.wait()</code> 将显示进度条, 结束后显示已下载的文件名.
如中途显示网络出错或中断这个语句, 再次执行该语句即可
(下载过程不受影响).</p>
<p>如果发现该 <code>.wait()</code> 卡死不动, 可以先结束该语句.<br>
(Jupyter 中的操作: 按 <code>Esc</code> 或点击页面空白处保证该 Cell
为命令模式而非编辑模式, 即左侧的竖条为蓝色, 然后按两次 <code>I</code>
即中断该 Cell).<br> 随后执行下面语句, 然后再回去执行
<code>.wait()</code> 看是否恢复.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res.poke()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>Example: Downloading Data From JSOC</title>
    <url>//jsoc.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/fido.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
</p>
<p>Reference <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%load_ext autoreload</span><br><span class="line">%autoreload <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Suppress warnings of pandas, astropy</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>, category=FutureWarning)</span><br><span class="line"><span class="keyword">from</span> astropy.utils.exceptions <span class="keyword">import</span> AstropyDeprecationWarning</span><br><span class="line">warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>, category=AstropyDeprecationWarning)</span><br></pre></td></tr></table></figure>
<p>To be clear, here we use <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs</span><br></pre></td></tr></table></figure> instead of examples in <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html</a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> Fido, attrs <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure> <span id="more"></span></p>
<h2 id="getting-information"><a href="#getting-information"
class="headerlink"></a>Getting information</h2>
<p><code>drms</code> - Python module for accessing HMI, AIA and MDI
data<br> - <a href="https://github.com/kbg/drms"
class="uri">https://github.com/kbg/drms</a> - <a
href="http://drms.readthedocs.io/en/stable/tutorial.html"
class="uri">http://drms.readthedocs.io/en/stable/tutorial.html</a></p>
<h3 id="series"><a href="#series" class="headerlink"></a>Series</h3>
<p><img data-src='/jsoc/hmi01.png'/></p>
<p>Import the <code>drms</code> module and create an instance of the
<code>drms.Client</code> class:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> drms</span><br><span class="line">c = drms.Client()</span><br></pre></td></tr></table></figure>
<p>List available <code>Series</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.series(<span class="string">r&#x27;aia\..*&#x27;</span>)  <span class="comment"># regex, case-insensitive</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;aia.flatfield&#39;,
 &#39;aia.lev1&#39;,
 &#39;aia.lev1_euv_12s&#39;,
 &#39;aia.lev1_uv_24s&#39;,
 &#39;aia.lev1_vis_1h&#39;,
 &#39;aia.master_pointing3h&#39;,
 &#39;aia.response&#39;,
 &#39;aia.temperature_summary_300s&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.series(<span class="string">r&#x27;hmi\.b.*&#x27;</span>)  <span class="comment"># regex, case-insensitive</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;hmi.B_720s&#39;,
 &#39;hmi.B_720s_dcon&#39;,
 &#39;hmi.B_720s_dconS&#39;,
 &#39;hmi.Bharp_720s&#39;,
 &#39;hmi.Bharp_720s_nrt&#39;,
 &#39;hmi.b_135s&#39;,
 &#39;hmi.b_720s_e15w1332_cea&#39;,
 &#39;hmi.b_720s_e15w1332_cutout&#39;,
 &#39;hmi.b_synoptic&#39;,
 &#39;hmi.b_synoptic_small&#39;,
 &#39;hmi.bmap_lowres_latlon_720s&#39;]</code></pre>
<h3 id="primekeys"><a href="#primekeys"
class="headerlink"></a>PrimeKeys</h3>
<p>Find out the <code>PrimeKeys</code> supported in any
<code>Series</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.pkeys(<span class="string">&#x27;aia.lev1_euv_12s&#x27;</span>)  <span class="comment"># case-insensitive</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;T_REC&#39;, &#39;WAVELNTH&#39;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.pkeys(<span class="string">&#x27;hmi.B_720s&#x27;</span>)  <span class="comment"># case-insensitive</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;T_REC&#39;]</code></pre>
<h3 id="segments"><a href="#segments"
class="headerlink"></a>Segments</h3>
<p>Find out the <code>Segments</code> supported in any
<code>Series</code>:</p>
<ul>
<li>'aia.lev1_euv_12s'</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">si = c.info(<span class="string">&#x27;aia.lev1_euv_12s&#x27;</span>)</span><br><span class="line">si.segments</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
type
</th>
<th>
units
</th>
<th>
protocol
</th>
<th>
dims
</th>
<th>
note
</th>
</tr>
<tr>
<th>
name
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
image
</th>
<td>
int
</td>
<td>
None
</td>
<td>
link via lev1
</td>
<td>
None
</td>
<td>
AIA level 1 image
</td>
</tr>
<tr>
<th>
spikes
</th>
<td>
int
</td>
<td>
None
</td>
<td>
link via lev1
</td>
<td>
None
</td>
<td>
Cosmic ray information
</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">si.segments.index.values  <span class="comment"># To a `ndarray`</span></span><br></pre></td></tr></table></figure>
<pre><code>array([&#39;image&#39;, &#39;spikes&#39;], dtype=object)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">si.segments.index[<span class="number">0</span>]  <span class="comment"># Use slice to pick a value</span></span><br></pre></td></tr></table></figure>
<pre><code>&#39;image&#39;</code></pre>
<ul>
<li>'hmi.b_720s'</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">si = c.info(<span class="string">&#x27;hmi.b_720s&#x27;</span>)</span><br><span class="line">si.segments[:<span class="number">4</span>]  <span class="comment"># Use slice to pick rows</span></span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
type
</th>
<th>
units
</th>
<th>
protocol
</th>
<th>
dims
</th>
<th>
note
</th>
</tr>
<tr>
<th>
name
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
inclination
</th>
<td>
int
</td>
<td>
None
</td>
<td>
link via MDATA
</td>
<td>
None
</td>
<td>
Inclination
</td>
</tr>
<tr>
<th>
azimuth
</th>
<td>
int
</td>
<td>
None
</td>
<td>
link via MDATA
</td>
<td>
None
</td>
<td>
Azimuth before disambiguation
</td>
</tr>
<tr>
<th>
disambig
</th>
<td>
char
</td>
<td>
</td>
<td>
fits
</td>
<td>
4096x4096
</td>
<td>
Flag for 180 degree change in azimuth
</td>
</tr>
<tr>
<th>
field
</th>
<td>
int
</td>
<td>
None
</td>
<td>
link via MDATA
</td>
<td>
None
</td>
<td>
Field Strength
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="basic-usage"><a href="#basic-usage" class="headerlink"></a>Basic
usage</h2>
<p>See <a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html</a></p>
<blockquote>
<p>There are two ways of downloading JSOC data. - One way is using
Sunpy’s unified search interface, known as<code>Fido</code>.<br>
<code>Fido</code> supplies a single, easy and consistent way to to
obtain most forms of solar physics data. - An alternative way to fetch
data from JSOC is by using the underlying <code>JSOCClient</code>.<br>
This option can be preferred when the complex searches are to be made,
or when you need to separate the staging and downloading steps, which is
not supported by <code>Fido</code>.</p>
</blockquote>
<h3 id="fido"><a href="#fido" class="headerlink"></a>Fido</h3>
<h4 id="searching-for-data"><a href="#searching-for-data"
class="headerlink"></a>Searching for data</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = Fido.search(</span><br><span class="line">    attrs.jsoc.Time(<span class="string">&#x27;2014-01-01T00:00:00&#x27;</span>, <span class="string">&#x27;2014-01-01T00:00:30&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Notify(<span class="string">&#x27;lydiazly@nju.edu.cn&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Series(<span class="string">&#x27;aia.lev1_euv_12s&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Wavelength(<span class="number">304</span> * u.AA) | attrs.jsoc.Wavelength(<span class="number">171</span> * u.AA)</span><br><span class="line">)</span><br><span class="line">response</span><br></pre></td></tr></table></figure>
Results from 2 Providers:<br><br>3 Results from the
JSOCClient:<br><i>Table length=3</i>
<table id="table23285989288984" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:25Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
</table>
<br>3 Results from the JSOCClient:<br><i>Table length=3</i>
<table id="table23285988917200" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:25Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(response)</span><br></pre></td></tr></table></figure>
<pre><code>sunpy.net.fido_factory.UnifiedResponse</code></pre>
<h4 id="indexing"><a href="#indexing"
class="headerlink"></a>Indexing</h4>
<ul>
<li><p>First index: client (still necessary even if results are only
found for a single client)</p></li>
<li><p>Second index: rows (must be <strong>iterable</strong>, different
from [<a href="/fido.html">Example: downloading data using
Fido</a>])</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>3 Results from the
JSOCClient:<br><i>Table length=3</i>
<table id="table22680339934904" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:25Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">1</span>, ::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>2 Results from the
JSOCClient:<br><i>Table length=2</i>
<table id="table22680349474264" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:25Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">0</span>, [<span class="number">2</span>]]  <span class="comment"># Not `response[0, 2]` !</span></span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>1 Results from the
JSOCClient:<br><i>Table length=1</i>
<table id="table22680349474768" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:25Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
</table>
<p><br></p>
<h4 id="downloading-data"><a href="#downloading-data"
class="headerlink"></a>Downloading data</h4>
<p>Download the entire results:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = Fido.fetch(response, path=<span class="string">&#x27;./data&#x27;</span>)  <span class="comment"># Will output a progress bar by default</span></span><br></pre></td></tr></table></figure>
<h3 id="jsocclient"><a href="#jsocclient"
class="headerlink"></a>JSOCClient</h3>
<blockquote>
<p>The JSOC stages data before you can download it, so a JSOC query is a
<strong>three</strong> stage process. 1.
<strong><code>search</code></strong>: query the JSOC for records and a
table of these records is returned.<br> The result is
<code>UnifiedResponse</code> for <code>Fido</code> while
<code>JSOCResponse</code> for <code>JSOCClient</code> -
<strong><code>request_data</code></strong>: request these records to be
staged for download. - <strong><code>get_request</code></strong>:
download.</p>
<p>(<code>Fido</code> combines the stages into 2, <code>search</code>
and <code>fetch</code>.)</p>
</blockquote>
<h4 id="searching-for-data-1"><a href="#searching-for-data-1"
class="headerlink"></a>Searching for data</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net <span class="keyword">import</span> jsoc</span><br><span class="line">client = jsoc.JSOCClient()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = client.search(</span><br><span class="line">    attrs.jsoc.Time(<span class="string">&#x27;2014-01-01T00:00:00&#x27;</span>, <span class="string">&#x27;2014-01-01T00:00:20&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Notify(<span class="string">&#x27;lydiazly@nju.edu.cn&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Series(<span class="string">&#x27;aia.lev1_euv_12s&#x27;</span>),</span><br><span class="line">    attrs.jsoc.Wavelength(<span class="number">304</span> * u.AA) | attrs.jsoc.Wavelength(<span class="number">171</span> * u.AA)</span><br><span class="line">)</span><br><span class="line">response</span><br></pre></td></tr></table></figure>
<i>Table length=4</i>
<table id="table23453611657088" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p>Note here we get a single table.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(response)</span><br></pre></td></tr></table></figure>
<pre><code>sunpy.net.jsoc.jsoc.JSOCResponse</code></pre>
<h4 id="indexing-1"><a href="#indexing-1"
class="headerlink"></a>Indexing</h4>
<p>An integer get a <code>Row</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<i>Row index=2</i>
<table id="table23453611657088">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p>A <strong>iterable</strong> get a <code>Table</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure>
<i>Table length=1</i>
<table id="table23453620502480" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p>Convert a <code>Row</code> to a <code>Table</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> astropy.table.table <span class="keyword">import</span> Table</span><br><span class="line">Table(response[<span class="number">2</span>].table)</span><br></pre></td></tr></table></figure>
<i>Table length=1</i>
<table id="table23453611454080" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<p>Other examples:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<i>Table length=2</i>
<table id="table23453620500632" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<i>Table length=2</i>
<table id="table23453611657032" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:13Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[[<span class="number">0</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure>
<i>Table length=2</i>
<table id="table23453611658600" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str20
</th>
<th>
str7
</th>
<th>
str5
</th>
<th>
int64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_4
</td>
<td>
304
</td>
<td>
2145
</td>
</tr>
<tr>
<td>
2014-01-01T00:00:01Z
</td>
<td>
SDO/AIA
</td>
<td>
AIA_3
</td>
<td>
171
</td>
<td>
2145
</td>
</tr>
</table>
<h4 id="downloading-data-1"><a href="#downloading-data-1"
class="headerlink"></a>Downloading data</h4>
<p>Download the entire results:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = client.fetch(response, path=<span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>Export request pending. [id=&quot;JSOC_20180710_1151&quot;, status=2]
Waiting for 0 seconds...
Export request pending. [id=&quot;JSOC_20180710_1151&quot;, status=1]
Waiting for 5 seconds...
4 URLs found for download. Full request totalling 17MB
Export request pending. [id=&quot;JSOC_20180710_1152&quot;, status=2]
Waiting for 0 seconds...
4 URLs found for download. Full request totalling 24MB</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res.wait()  <span class="comment"># Show the progress bar &amp; wait to finish downloading.</span></span><br></pre></td></tr></table></figure>
<p>Or separate out the staging to <code>request_data</code> &amp;
<code>get_request</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests = client.request_data(response)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<pre><code>&#39;JSOC_20180708_435&#39;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.status</span><br></pre></td></tr></table></figure>
<pre><code>0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = client.get_request(requests, path=<span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res.wait()</span><br></pre></td></tr></table></figure>
<p>So far, the best way to download a subset of the results is to
<strong>make a query again</strong>.</p>
<p>Or use <strong><code>JSOCClient</code></strong> (and a custom
function) instead of <strong><code>Fido</code></strong> to search for
data.</p>
<p>See details below:</p>
<p>If slice the result as <code>response[2]</code>, everything is OK
except <code>query_args</code> is lost.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response.query_args</span><br></pre></td></tr></table></figure>
<pre><code>[&#123;&#39;wavelength&#39;: &lt;Quantity 304. Angstrom&gt;,
  &#39;start_time&#39;: datetime.datetime(2014, 1, 1, 0, 0, 35),
  &#39;end_time&#39;: datetime.datetime(2014, 1, 1, 0, 0, 55),
  &#39;notify&#39;: &#39;lydiazly@nju.edu.cn&#39;,
  &#39;series&#39;: &#39;aia.lev1_euv_12s&#39;&#125;,
 &#123;&#39;wavelength&#39;: &lt;Quantity 171. Angstrom&gt;,
  &#39;start_time&#39;: datetime.datetime(2014, 1, 1, 0, 0, 35),
  &#39;end_time&#39;: datetime.datetime(2014, 1, 1, 0, 0, 55),
  &#39;notify&#39;: &#39;lydiazly@nju.edu.cn&#39;,
  &#39;series&#39;: &#39;aia.lev1_euv_12s&#39;&#125;]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response[<span class="number">2</span>].query_args</span><br></pre></td></tr></table></figure>
<p>This will cause an error in <code>fetch</code>.</p>
<h2 id="constructing-complex-queries"><a
href="#constructing-complex-queries" class="headerlink"></a>Constructing
complex queries</h2>
<h3 id="time"><a href="#time" class="headerlink"></a>Time</h3>
<p><a
href="http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html"
class="uri">http://docs.sunpy.org/en/stable/guide/acquiring_data/jsoc.html</a>
&gt; Start and end times for the query (any date/time format understood
by SunPy’s <code>parse_time</code> function can be used to specify dates
and time). <strong>The Time attribute takes UTC time, as
default.</strong><br> If you need to pass a Time in some other time
scale, such as TAI, pass an Astropy Time object</p>
<p>See <a
href="http://docs.sunpy.org/en/stable/guide/time.html#parse-time"
class="uri">http://docs.sunpy.org/en/stable/guide/time.html#parse-time</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.time <span class="keyword">import</span> parse_time, is_time, is_time_in_given_format</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_time(<span class="string">&#x27;2014-01-01T00:00:00&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">is_time_in_given_format(<span class="string">&#x27;2014-01-01T00:00:00Z&#x27;</span>, <span class="string">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>True</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse_time(<span class="string">&#x27;2015.08.27_06:00:00_TAI&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>datetime.datetime(2015, 8, 27, 6, 0)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse_time(<span class="string">&#x27;2014-01-01T00:00:00Z&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>datetime.datetime(2014, 1, 1, 0, 0)</code></pre>
<p>If <code>sunpy.time</code> doesn't inlude this format:
"%Y-%m-%dT%H:%M:%SZ", use <a
href="https://github.com/lydiazly/python-intro/blob/master/scripts/sunpy-add-time-fmt.sh">a
bash script</a> to add it:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!sunpy-add-time-fmt</span><br></pre></td></tr></table></figure>
<pre><code>Added this format to
/home/lydia/miniconda3/lib/python3.6/site-packages/sunpy/time/time.py:

    [01;31m[K&quot;%Y-%m-%dT%H:%M:%SZ&quot;[m[K,      # Example 2007-05-04T21:08:12Z

=== Done!(sunpy-add-time-fmt) ===</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parse_time(<span class="string">&#x27;2014-01-01T00:00:00Z&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>datetime.datetime(2014, 1, 1, 0, 0)</code></pre>
<p>For convenience, use a custom function to pass a time string in 'TAI'
scale:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> tai</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tai(<span class="string">&#x27;2014-01-01T00:00:00&#x27;</span>)  <span class="comment"># Returns a single object</span></span><br></pre></td></tr></table></figure>
<pre><code>&lt;Time object: scale=&#39;tai&#39; format=&#39;datetime&#39; value=2014-01-01 00:00:00&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tai(<span class="string">&#x27;2015.08.27_06:00:00_TAI&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;Time object: scale=&#39;tai&#39; format=&#39;datetime&#39; value=2015-08-27 06:00:00&gt;</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tai(<span class="string">&#x27;2015.08.27_06:00:00_TAI&#x27;</span>, <span class="string">&#x27;2015.08.27_06:01:00_TAI&#x27;</span>)  <span class="comment"># Returns a list</span></span><br></pre></td></tr></table></figure>
<pre><code>[&lt;Time object: scale=&#39;tai&#39; format=&#39;datetime&#39; value=2015-08-27 06:00:00&gt;,
 &lt;Time object: scale=&#39;tai&#39; format=&#39;datetime&#39; value=2015-08-27 06:01:00&gt;]</code></pre>
<h3 id="searching-for-data-2"><a href="#searching-for-data-2"
class="headerlink"></a>Searching for data</h3>
<p>JSOC <a href="http://jsoc.stanford.edu/ajax/lookdata.html"
class="uri">http://jsoc.stanford.edu/ajax/lookdata.html</a></p>
<ul>
<li>To make a request, <a
href="http://jsoc.stanford.edu/ajax/register_email.html">register your
email first</a> :</li>
</ul>
<p><img data-src='/jsoc/hmi03-1.png' width='800' /></p>
<p>Example of <a
href="http://jsoc.stanford.edu/ajax/lookdata.html">online JSOC
interface</a> :</p>
<p><img data-src='/jsoc/hmi02.png' width='900' /></p>
<p><img data-src='/jsoc/hmi03-2.png' width='900' /></p>
<p>Use <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">attrs.jsoc.Segment(<span class="string">&#x27;...&#x27;</span>) &amp;  attrs.jsoc.&lt;attr&gt;(<span class="string">&#x27;...&#x27;</span>) ...</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">attrs.jsoc.Segment(<span class="string">&#x27;...&#x27;</span>) |  attrs.jsoc.&lt;attr&gt;(<span class="string">&#x27;...&#x27;</span>) ...</span><br></pre></td></tr></table></figure> or <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net.attr <span class="keyword">import</span> AttrAnd, AttrOr</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttrAnd(<span class="built_in">list</span>(<span class="built_in">map</span>(attrs.jsoc.&lt;attr&gt;, &lt;<span class="built_in">list</span>&gt;)))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AttrOr(<span class="built_in">list</span>(<span class="built_in">map</span>(attrs.jsoc.&lt;attr&gt;, &lt;<span class="built_in">list</span>&gt;)))</span><br></pre></td></tr></table></figure> to pass multiple attributes.</p>
<p>Note: &gt; The attributes which support
<strong><code>&amp;</code></strong> are
<strong><code>PrimeKey</code></strong> and
<strong><code>Segment</code></strong>. Using
<strong><code>&amp;</code></strong> with any other attributes will throw
an error.</p>
<ul>
<li>Specify attributes:</li>
</ul>
<p>e.g.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trange = tai(<span class="string">&#x27;2015-08-27T05:00:00&#x27;</span>, <span class="string">&#x27;2015-08-27T06:00:00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">segments = [<span class="string">&#x27;inclination&#x27;</span>, <span class="string">&#x27;azimuth&#x27;</span>, <span class="string">&#x27;disambig&#x27;</span>, <span class="string">&#x27;field&#x27;</span>]</span><br><span class="line"></span><br><span class="line">series = <span class="string">&#x27;hmi.B_720s&#x27;</span>  <span class="comment"># &#x27;hmi.b_720s&#x27; is OK</span></span><br><span class="line"></span><br><span class="line">interval = <span class="number">10</span> * u.<span class="built_in">min</span>  <span class="comment"># every 10 min.</span></span><br><span class="line"></span><br><span class="line">email = <span class="string">&#x27;lydiazly@nju.edu.cn&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Making a query:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sunpy.net.attr <span class="keyword">import</span> AttrAnd, AttrOr</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = Fido.search(</span><br><span class="line">    attrs.jsoc.Time(*trange),</span><br><span class="line">    attrs.jsoc.Series(series),</span><br><span class="line">    attrs.jsoc.Notify(email),</span><br><span class="line">    attrs.Sample(interval),</span><br><span class="line">    AttrAnd(<span class="built_in">list</span>(<span class="built_in">map</span>(attrs.jsoc.Segment, segments)))</span><br><span class="line">    <span class="comment"># i.e. attrs.jsoc.Segment(&#x27;...&#x27;) &amp;  attrs.jsoc.Segment(&#x27;...&#x27;) ...</span></span><br><span class="line">)</span><br><span class="line">response</span><br></pre></td></tr></table></figure>
Results from 1 Provider:<br><br>6 Results from the
JSOCClient:<br><i>Table length=6</i>
<table id="table23187962870808" class="table-striped table-bordered table-condensed">
<thead>
<tr>
<th>
T_REC
</th>
<th>
TELESCOP
</th>
<th>
INSTRUME
</th>
<th>
WAVELNTH
</th>
<th>
CAR_ROT
</th>
</tr>
</thead>
<thead>
<tr>
<th>
str23
</th>
<th>
str7
</th>
<th>
str9
</th>
<th>
float64
</th>
<th>
int64
</th>
</tr>
</thead>
<tr>
<td>
2015.08.27_05:00:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
<tr>
<td>
2015.08.27_05:12:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
<tr>
<td>
2015.08.27_05:24:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
<tr>
<td>
2015.08.27_05:36:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
<tr>
<td>
2015.08.27_05:48:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
<tr>
<td>
2015.08.27_06:00:00_TAI
</td>
<td>
SDO/HMI
</td>
<td>
HMI_SIDE1
</td>
<td>
6173.0
</td>
<td>
2167
</td>
</tr>
</table>
<p><br></p>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>IDL 8.7 Python Bridge 试用</title>
    <url>/2018-07-25-IDL-8.7.html</url>
    <content><![CDATA[<p>在 <a href="http://harrisgeospatial.com">HARRIS 官网</a> 申请了 <a
href="http://harrisgeospatial.com/docs/WhatsNew.html">IDL 8.7</a> 的
Linux 版本试用, 咨询客服之后终于收到了链接.</p>
<p>先测试一下 Python Bridge 功能.</p>
<ul>
<li>Ubuntu 16.04 LTS</li>
<li>Python 3.6 Anaconda</li>
<li>需要使用收到的激活码 (试用期一个月.
激活之后运行程序不会自动退出)</li>
</ul>
<p>参考 <a
href="https://www.harrisgeospatial.com/docs/Python.html">Python Bridge
官方文档</a></p>
<span id="more"></span>
<h2 id="安装"><a href="#安装" class="headerlink"></a>1. 安装</h2>
<p>下载之后解压这两个文件:<br> <code>envi55-linux.tar.gz</code><br>
<code>flexnetserver2017.08-linux.tar.gz</code></p>
<p>以安装至 <code>~/software/harris</code> 为例. <br> 执行安装脚本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./envi55-linux/install.sh</span><br><span class="line">$ ./flexnetserver2017.08-linux/install.sh</span><br></pre></td></tr></table></figure>
<p><br> 添加路径到 <code>~/.bashrc</code> (注意将
<code>miniconda3/lib</code> 替换成你的 python lib 路径):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.bashrc</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/miniconda3/lib:<span class="variable">$HOME</span>/software/harris/envi/idl/bin/bin.linux.x86_64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/software/harris/envi55/bin/envi_setup.bash</span><br></pre></td></tr></table></figure>
<p>(如果 <code>miniconda3/lib</code> 加入到 <code>LD_LIBRARY_PATH</code>
之后影响了其他程序使用, 因此处理方法见 <a
href="#5-troubleshooting">Troubleshooting</a>) <br><br> 随后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="激活"><a href="#激活" class="headerlink"></a>2. 激活</h2>
<p>经过上述步骤, 图形界面的激活程序 <code>harrislicense</code>
已被加入系统路径.</p>
<p>打开</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ harrislicense</span><br></pre></td></tr></table></figure>
<p>或使用命令行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/harris/envi/idl/license_utils/bin.linux.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate</span></span><br><span class="line">$ ./activate -a &lt;activation-code&gt; [-q &lt;quantity&gt;]</span><br><span class="line"><span class="comment"># e.g.</span></span><br><span class="line">$ ./activate -a &lt;activation-code&gt; -q 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deactivate</span></span><br><span class="line">$ ./activate -a &lt;activation-code&gt; -q 0</span><br></pre></td></tr></table></figure>
<p>必要时将会提示需要 root 权限.</p>
<h2 id="安装-idl-python-bridge"><a href="#安装-idl-python-bridge"
class="headerlink"></a>3. 安装 IDL Python bridge</h2>
<p>首先确认 python 命令在系统路径 <code>PATH</code> 中.</p>
<p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/software/harris/envi/idl/lib/bridges</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink"></a>4. 使用</h2>
<ul>
<li><a
href="https://www.harrisgeospatial.com/docs/PythonToIDL.html">Python To
IDL</a></li>
</ul>
<p>能使用的功能比较有限.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> idlpy <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;IDL.run(<span class="string">&#x27;for i=0, 3 do begin &amp; print, i &amp; endfor&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.harrisgeospatial.com/docs/IDLToPython.html">IDL
To Python</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IDL&gt; &gt;&gt;&gt;<span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<p>注意用这种写法时, python 的 <code>&gt;&gt;&gt;</code>
提示符之后没有空格.</p>
<p>或使用语句块 (Enter 退出):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IDL&gt; &gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy.random <span class="keyword">as</span> ran</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = ran.rand(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = plt.plot(arr)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">IDL&gt;</span><br></pre></td></tr></table></figure>
<p>或使用以下方式将 python 语句结果赋值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IDL&gt; np = Python.Import(<span class="string">&#x27;numpy&#x27;</span>)</span><br><span class="line">IDL&gt; arr = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])</span><br><span class="line">IDL&gt; <span class="built_in">help</span>, arr</span><br><span class="line">ARR             FLOAT     = Array[<span class="number">3</span>]</span><br><span class="line">IDL&gt; arr = np.arange(<span class="number">3</span>)          </span><br><span class="line">IDL&gt; <span class="built_in">help</span>, arr         </span><br><span class="line">ARR             LONG64    = Array[<span class="number">3</span>]</span><br><span class="line">IDL&gt; arr = np.arange(<span class="number">3.</span>)</span><br><span class="line">IDL&gt; <span class="built_in">help</span>, arr          </span><br><span class="line">ARR             DOUBLE    = Array[<span class="number">3</span>]</span><br><span class="line">IDL&gt; arr = np.ones(<span class="number">3</span>)   </span><br><span class="line">IDL&gt; <span class="built_in">help</span>, arr       </span><br><span class="line">ARR             DOUBLE    = Array[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>其他用法参见官方文档:</p>
<ul>
<li><a
href="https://www.harrisgeospatial.com/docs/pythondataconvert.html">Parameter
Passing and Data Conversion</a></li>
<li><a href="https://www.harrisgeospatial.com/docs/idl_kernel.html">IDL
IPython Notebook Kernel</a></li>
</ul>
<h2 id="troubleshooting"><a href="#troubleshooting"
class="headerlink"></a>5. Troubleshooting</h2>
<p>出现 &gt; .../lib/libuuid.so.1: no version information available
...</p>
<p>这是因为使用 anaconda 的 python, 默认调用的是 anaconda 的
libuuid.so.1, 版本较低, 使用系统的 libuuid.so.1 即可解决.</p>
<p>或者出现 <code>miniconda3/lib</code> 加入
<code>LD_LIBRARY_PATH</code> 之后影响其他程序调用的情况.</p>
<p>同时考虑可能出现的这两种问题的解决办法如下:<br><br></p>
<p><strong>使用自定义脚本替代 <code>idl</code> 命令</strong></p>
<p>由于 idl 使用了 <code>alias</code> 来调用程序, 优先级最高, 因此需要在
<code>.bashrc</code> 中重新 <code>alias</code>.</p>
<p>以 miniconda3 为例, 新建脚本(注意替换相应路径):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python lib</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$HOME</span>/miniconda3/lib:<span class="variable">$LD_LIBRARY_PATH</span>:<span class="variable">$HOME</span>/software/harris/envi/idl/bin/bin.linux.x86_64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># libuuid issue</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/lib/x86_64-linux-gnu:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== <span class="variable">$0</span> ===&quot;</span></span><br><span class="line"><span class="variable">$HOME</span>/software/harris/envi55/idl87/bin/idl <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<p>假设将脚本放在 <code>~/bin</code> , 保证该路径在 <code>PATH</code> 中
( <code>export PATH=$HOME/bin:$PATH</code> ).</p>
<p>在 <code>~/.bashrc</code> 中去掉 <a href="#1-安装">安装</a> 中添加的
<code>LD_LIBRARY_PATH</code> 行, 并在 <code>envi_setup.bash</code>
行之后添加:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> idl=<span class="variable">$HOME</span>/bin/idl</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>之后再用 <code>idl</code> 命令即调用的是自定义的脚本.</p>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>astronomy</tag>
        <tag>install</tag>
        <tag>idl</tag>
      </tags>
  </entry>
  <entry>
    <title>Example: Plot HMI</title>
    <url>//example_plothmi.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/example_hmi.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
<wbr> <a class="btn" href="https://pan.baidu.com/s/1nwsIcDr?pwd=s5re"><i class="fa fa-download fa-fw"></i>Example Data</a> <wbr> <a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/sunpy-modules.zip"><i class="fa fa-download fa-fw"></i>User Module</a><nobr>
(<a href="https://github.com/lydiazly/scripts-sunpy/tree/master/modules">source</a>
/ <a href="/usr_sunpy.html">doc</a>)
</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division, print_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reload user modules automatically</span></span><br><span class="line"><span class="comment"># %load_ext autoreload</span></span><br><span class="line"><span class="comment"># %autoreload 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># notebook, inline, ...</span></span><br><span class="line">%matplotlib notebook</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> astropy.coordinates <span class="keyword">import</span> SkyCoord</span><br><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># To use user modules</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../modules&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;Python version: %s&#x27; % sys.version.split(&#x27;(&#x27;)[0])  # Python version: 3.6.6 |Anaconda, Inc.| </span></span><br><span class="line"><span class="comment"># print(&#x27;SunPy version: %s&#x27; % sunpy.__version__)  # SunPy version: 0.9.3</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="read-data"><a href="#read-data" class="headerlink"></a>Read
data</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fnames = (<span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.inclination.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.azimuth.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.disambig.fits&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> read_sdo</span><br><span class="line">mapb, mapi, mapa, mapd = <span class="built_in">list</span>(<span class="built_in">map</span>(read_sdo, fnames))</span><br></pre></td></tr></table></figure>
<pre><code>hmi.B_720s.20150827_052400_TAI.field.fits   [4096, 4096]
hmi.B_720s.20150827_052400_TAI.inclination.fits [4096, 4096]
hmi.B_720s.20150827_052400_TAI.azimuth.fits [4096, 4096]
hmi.B_720s.20150827_052400_TAI.disambig.fits    [4096, 4096]</code></pre>
<ul>
<li>Disambiguate:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapa.data[mapd.data &gt; <span class="number">3</span>] += <span class="number">180.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Transform to vector components:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapbx = deepcopy(mapb)</span><br><span class="line">mapby = deepcopy(mapb)</span><br><span class="line">mapbz = deepcopy(mapb)</span><br><span class="line">mapbx.data[:] = mapb.data * np.sin(np.deg2rad(mapi.data)) * np.cos(np.deg2rad(mapa.data + <span class="number">270.</span>))</span><br><span class="line">mapby.data[:] = mapb.data * np.sin(np.deg2rad(mapi.data)) * np.sin(np.deg2rad(mapa.data + <span class="number">270.</span>))</span><br><span class="line">mapbz.data[:] = mapb.data * np.cos(np.deg2rad(mapi.data))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Suppress metadata warnings</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;mapbx, mapby, mapbz&#125;:</span><br><span class="line">    i.meta[<span class="string">&#x27;hgln_obs&#x27;</span>] = <span class="number">0.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapbz</span><br></pre></td></tr></table></figure>
<pre><code>SunPy Map
---------
Observatory:         SDO
Instrument:      HMI SIDE1
Detector:        HMI
Measurement:         hmi
Wavelength:      6173.0
Observation Date:    2015-08-27 05:22:21
Exposure Time:       0.000000 s
Dimension:       [4096. 4096.] pix
Coordinate System:   helioprojective
Scale:           [0.504376 0.504376] arcsec / pix
Reference Pixel:     [2033.825928 2053.603271] pix
Reference Coord:     [0. 0.] arcsec
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])</code></pre>
<ul>
<li>Use <code>sunpy.instr.aia.aiaprep()</code> Processes a level 1
AIAMap into a level 1.5 AIAMap.<br> <a
href="https://docs.sunpy.org/en/stable/api/sunpy.instr.aia.aiaprep.html"
class="uri">https://docs.sunpy.org/en/stable/api/sunpy.instr.aia.aiaprep.html</a></li>
</ul>
<blockquote>
<p>From <strong>sunpy 0.9.3</strong>,
<code>sunpy.instr.aia.aiaprep()</code> supports both <code>AIAMap</code>
&amp; <code>HMIMap</code> objects.</p>
</blockquote>
<p><strong>Note</strong>: Improve <code>aiaprep</code> in
<code>&lt;python_path&gt;/site-packages/sunpy/instr/aia.py</code>:<br>
   at line: <code>tempmap = aiamap.rotate(...)</code><br>    add
<code>order=3</code> (recommend, this will keep NaNs) and set
<code>missing=np.nan</code> in <code>rotate()</code></p>
<p>There is a modified function <code>aiaprep_usr()</code> in
<code>usr_sunpy</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># After `aiaprep`:</span></span><br><span class="line"><span class="comment"># - North is aligned with the y axis.</span></span><br><span class="line"><span class="comment"># - Each pixel is 0.6 arcsec across.</span></span><br><span class="line"><span class="comment"># - The center of the sun is at the center of the image.</span></span><br><span class="line"><span class="comment"># This may be a bit slow.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from sunpy.instr.aia import aiaprep</span></span><br><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> aiaprep_usr <span class="keyword">as</span> aiaprep</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;level 1 -&gt; level 1.5 ...&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">    warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    mapbx = aiaprep(mapbx)</span><br><span class="line">    mapby = aiaprep(mapby)</span><br><span class="line">    mapbz = aiaprep(mapbz)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;level    =&#x27;</span>, mapbz.meta[<span class="string">&#x27;lvl_num&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rsun_obs =&#x27;</span>, mapbz.meta[<span class="string">&#x27;rsun_obs&#x27;</span>] * u.arcsec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r_sun    =&#x27;</span>, mapbz.meta[<span class="string">&#x27;r_sun&#x27;</span>] * u.pix)</span><br></pre></td></tr></table></figure>
<pre><code>level 1 -&gt; level 1.5 ...
level    = 1.5
rsun_obs = 949.495178 arcsec
r_sun    = 1582.4919633333334 pix</code></pre>
<ul>
<li><strong>Or</strong>, use <code>rotate()</code> manually:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DO NOT execute this cell if `sunpy.instr.aia.aiaprep()` has been called.</span></span><br><span class="line"><span class="comment"># `rotate` function will remove old CROTA keywords.</span></span><br><span class="line"><span class="comment"># This may be a bit slow if order = 3.</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;lvl_num&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> mapbz.meta <span class="keyword">or</span> mapbz.meta[<span class="string">&#x27;lvl_num&#x27;</span>] &lt; <span class="number">1.5</span>:</span><br><span class="line">    order = <span class="number">3</span></span><br><span class="line">    scale_factor = (mapbz.scale[<span class="number">0</span>] / <span class="number">0.6</span>).value</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;rotate(CCW) &amp; recenter &amp; rescale ...&#x27;</span>)</span><br><span class="line">    <span class="comment"># Suppress warnings of NaNs:</span></span><br><span class="line">    <span class="keyword">with</span> np.errstate(invalid=<span class="string">&#x27;ignore&#x27;</span>):</span><br><span class="line">        mapbx = mapbx.rotate(order=order, recenter=<span class="literal">True</span>, scale=scale_factor, missing=np.nan)</span><br><span class="line">        mapby = mapby.rotate(order=order, recenter=<span class="literal">True</span>, scale=scale_factor, missing=np.nan)</span><br><span class="line">        mapbz = mapbz.rotate(order=order, recenter=<span class="literal">True</span>, scale=scale_factor, missing=np.nan)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Rotation angle = %f deg (CCW)&#x27;</span> % -mapb.meta[<span class="string">&#x27;crota2&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>Level 1.5:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapbz</span><br></pre></td></tr></table></figure>
<pre><code>SunPy Map
---------
Observatory:         SDO
Instrument:      HMI SIDE1
Detector:        HMI
Measurement:         hmi
Wavelength:      6173.0
Observation Date:    2015-08-27 05:22:21
Exposure Time:       0.000000 s
Dimension:       [4096. 4096.] pix
Coordinate System:   helioprojective
Scale:           [0.6 0.6] arcsec / pix
Reference Pixel:     [2048.5 2048.5] pix
Reference Coord:     [0. 0.] arcsec
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])</code></pre>
<p>Check the disk center ('crpix1', 'crpix2'):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pixel number start from 1</span></span><br><span class="line">pcenter = ((mapbz.meta[<span class="string">&#x27;crpix1&#x27;</span>] - <span class="number">1</span>) * u.pix, (mapbz.meta[<span class="string">&#x27;crpix2&#x27;</span>] - <span class="number">1</span>) * u.pix)</span><br><span class="line">center = mapbz.pixel_to_world(*pcenter)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[Image_center] (%.3f, %.3f) pixel = (%7.4f, %7.4f) arcsec  (lon, lat) = (%8.5f, %8.5f) deg&#x27;</span> %</span><br><span class="line">      ((mapbz.dimensions.x.value-<span class="number">1.</span>)/<span class="number">2.</span>, (mapbz.dimensions.y.value-<span class="number">1.</span>)/<span class="number">2.</span>,</span><br><span class="line">        mapbz.center.Tx.value, mapbz.center.Ty.value,</span><br><span class="line">        mapbz.center.heliographic_stonyhurst.lon.value, mapbz.center.heliographic_stonyhurst.lat.value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[ Disk_center] (%.3f, %.3f) pixel = (%7.4f, %7.4f) arcsec  (lon, lat) = (%8.5f, %8.5f) deg&#x27;</span> %</span><br><span class="line">      (pcenter[<span class="number">0</span>].value, pcenter[<span class="number">1</span>].value, center.Tx.value, center.Ty.value,</span><br><span class="line">       center.heliographic_stonyhurst.lon.value, center.heliographic_stonyhurst.lat.value))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[ Observation] (lon, lat, radius) = (%g deg, %g deg, %g m)&#x27;</span> %</span><br><span class="line">      (mapbz.heliographic_longitude.value, mapbz.heliographic_latitude.value, mapbz.observer_coordinate.radius.value))</span><br></pre></td></tr></table></figure>
<pre><code>[Image_center] (2047.500, 2047.500) pixel = ( 0.3000,  0.3000) arcsec  (lon, lat) = ( 0.01816,  7.10702) deg
[ Disk_center] (2047.500, 2047.500) pixel = ( 0.0000,  0.0000) arcsec  (lon, lat) = ( 0.00000,  7.08900) deg
[ Observation] (lon, lat, radius) = (0 deg, 7.089 deg, 1.51197e+11 m)</code></pre>
<p>A quick look:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mapbz.peek()</span><br></pre></td></tr></table></figure>
<p><img data-src="/example_plothmi/plothmi1.png" width="640"></p>
<h2 id="plot"><a href="#plot" class="headerlink"></a>Plot</h2>
<p><a
href="https://docs.sunpy.org/en/stable/guide/plotting.html?highlight=peek#plotting-maps-with-wcsaxes"
class="uri">https://docs.sunpy.org/en/stable/guide/plotting.html?highlight=peek#plotting-maps-with-wcsaxes</a></p>
<p>User function <code>plot_map()</code> will invoke <code>plot()</code>
of sunpy.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map</span><br><span class="line"></span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax1 = fig1.add_subplot(<span class="number">111</span>, projection=mapbz)</span><br><span class="line"><span class="comment"># This plot function will simply invoke mapbz.plot(), if keyword `coords` is not specified.</span></span><br><span class="line">plot_map(mapbz, ax=ax1, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Properties</span></span><br><span class="line">mapbz.draw_limb(axes=ax1, color=<span class="string">&#x27;b&#x27;</span>, linewidth=<span class="number">1.5</span>)  <span class="comment"># default zorder=100 in `draw_limb()`</span></span><br><span class="line">ax1.plot_coord(mapbz.center, <span class="string">&#x27;rx&#x27;</span>, markersize=<span class="number">10</span>, linewidth=<span class="number">1.5</span>, label=<span class="string">&#x27;Image center&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ax1.plot_coord(center, <span class="string">&#x27;bx&#x27;</span>, markersize=<span class="number">10</span>, linewidth=<span class="number">1.5</span>, label=<span class="string">&#x27;Disk center&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">ax1.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, fontsize=<span class="number">8</span>, markerscale=<span class="number">0.6</span>);</span><br><span class="line"><span class="comment"># fig1.savefig(&#x27;example_plothmi_disk.png&#x27;, dpi=200, bbox_inches=&#x27;tight&#x27;)</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/example_plothmi/plothmi2.png" width="800"></p>
<h2 id="submap"><a href="#submap" class="headerlink"></a>Submap</h2>
<p><a
href="http://docs.sunpy.org/en/v0.9.3/code_ref/map.html?highlight=peek#sunpy.map.mapbase.GenericMap.submap"
class="uri">http://docs.sunpy.org/en/v0.9.3/code_ref/map.html?highlight=peek#sunpy.map.mapbase.GenericMap.submap</a><br>
<a
href="http://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html"
class="uri">http://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html</a></p>
<p><strong><code>submap(bottom_left, top_right=None)</code><br></strong>
* <strong>bottom_left</strong> (astropy.units.Quantity or SkyCoord) –
The bottom_left coordinate of the rectangle.<br> If a SkyCoord it can
have shape (2,) and also define top_right.<br> If specifying pixel
coordinates it must be given as an Quantity object with units of pixel.
* <strong>top_right</strong> (astropy.units.Quantity or SkyCoord) – The
top_right coordinate of the rectangle.<br> Can only be omitted if
bottom_left has shape (2,).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xrange = (<span class="number">300.</span>, <span class="number">800.</span>) * u.arcsec</span><br><span class="line">yrange = (-<span class="number">500.</span>, -<span class="number">100.</span>) * u.arcsec</span><br><span class="line"></span><br><span class="line">subcoord = SkyCoord(xrange, yrange, frame=mapbz.coordinate_frame)</span><br><span class="line">smapbx = mapbx.submap(subcoord)</span><br><span class="line">smapby = mapby.submap(subcoord)</span><br><span class="line">smapbz = mapbz.submap(subcoord)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Submap: (%s, %s) arcsec  (%d x %d)&#x27;</span></span><br><span class="line">      % (xrange.value, yrange.value, *smapbz.data.shape[::-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>Submap: ([300. 800.], [-500. -100.]) arcsec  (833 x 666)</code></pre>
<p><strong><code>draw_rectangle(bottom_left, width, height, axes=None, **kwargs)</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map</span><br><span class="line"></span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax1 = fig1.add_subplot(<span class="number">111</span>, projection=mapbz)</span><br><span class="line">plot_map(mapbz, ax=ax1, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, grid_color=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mapbz.draw_limb(axes=ax1, color=&#x27;b&#x27;, linewidth=1.5)</span></span><br><span class="line">mapbz.draw_rectangle(subcoord[<span class="number">0</span>], xrange[<span class="number">1</span>]-xrange[<span class="number">0</span>], yrange[<span class="number">1</span>]-yrange[<span class="number">0</span>], axes=ax1, color=<span class="string">&#x27;yellow&#x27;</span>, linewidth=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify xlim, ylim by pixels</span></span><br><span class="line"><span class="comment"># lim_arcsec = ((-1000.1, 1000.1) * u.arcsec, (-1000.1, 1000.1) * u.arcsec)</span></span><br><span class="line"><span class="comment"># lim_pix = mapbz.world_to_pixel(SkyCoord(*lim_arcsec, frame=mapbz.coordinate_frame))  # pix</span></span><br><span class="line"><span class="comment"># ax1.set_xlim(lim_pix[0].value)  # pix</span></span><br><span class="line"><span class="comment"># ax1.set_ylim(lim_pix[1].value);  # pix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Clip NaNs</span></span><br><span class="line">valid_index = np.where(np.isfinite(mapbz.data))</span><br><span class="line">ax1.set_xlim((valid_index[<span class="number">0</span>].<span class="built_in">min</span>()-<span class="number">100</span>, valid_index[<span class="number">0</span>].<span class="built_in">max</span>()+<span class="number">100</span>))  <span class="comment"># pix</span></span><br><span class="line">ax1.set_ylim((valid_index[<span class="number">1</span>].<span class="built_in">min</span>()-<span class="number">100</span>, valid_index[<span class="number">1</span>].<span class="built_in">max</span>()+<span class="number">100</span>));  <span class="comment"># pix</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/example_plothmi/plothmi3.png" width="800"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map, plot_vmap</span><br><span class="line"></span><br><span class="line">fig2 = plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax2 = fig2.add_subplot(<span class="number">111</span>, projection=smapbz)</span><br><span class="line">im2 = plot_map(smapbz, ax=ax2, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, grid=<span class="number">10</span>*u.deg, title=mapbz.latex_name+<span class="string">&#x27; (submap)&#x27;</span>)</span><br><span class="line">plot_vmap(smapbx, smapby, smapbz, ax2, cmin=<span class="number">20.</span>, vmax=<span class="number">500.</span>, cmap=<span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">          scale_units=<span class="string">&#x27;xy&#x27;</span>, scale=<span class="number">1</span>/<span class="number">0.05</span>, minlength=<span class="number">0.02</span>);</span><br></pre></td></tr></table></figure>
<p><img data-src="/example_plothmi/plothmi4.png" width="900"></p>
<h3 id="without-disambiguation"><a href="#without-disambiguation"
class="headerlink"></a>Without disambiguation:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map, plot_vmap</span><br><span class="line"></span><br><span class="line">fig2 = plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax2 = fig2.add_subplot(<span class="number">111</span>, projection=smapbz)</span><br><span class="line">im2 = plot_map(smapbz, ax=ax2, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, grid=<span class="number">10</span>*u.deg, title=mapbz.latex_name+<span class="string">&#x27; (submap)&#x27;</span>)</span><br><span class="line">plot_vmap(smapbx, smapby, smapbz, ax2, cmin=<span class="number">20.</span>, vmax=<span class="number">500.</span>, cmap=<span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">          scale_units=<span class="string">&#x27;xy&#x27;</span>, scale=<span class="number">1</span>/<span class="number">0.05</span>, minlength=<span class="number">0.02</span>);</span><br></pre></td></tr></table></figure>
<p><img data-src="/example_plothmi/plothmi5.png" width="900"></p>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>SunPy Scripts Updates</title>
    <url>/2018-10-14-sunpy-scripts-updates.html</url>
    <content><![CDATA[<p>Update:</p>
<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/example_hmi.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
<wbr> <a class="btn" href="https://pan.baidu.com/s/1nwsIcDr?pwd=s5re"><i class="fa fa-download fa-fw"></i>Example Data</a> <wbr> <a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/sunpy-modules.zip"><i class="fa fa-download fa-fw"></i>User Module</a><nobr>
(<a href="https://github.com/lydiazly/scripts-sunpy/tree/master/modules">source</a>
/ <a href="/usr_sunpy.html">doc</a>)
</p>
<p>[ Tested ]</p>
<p>Ubuntu 16.04 LTS</p>
<table>
<thead>
<tr>
<th style="text-align: center;">Date</th>
<th style="text-align: center;">Python</th>
<th style="text-align: center;">Sunpy</th>
<th style="text-align: center;">NumPy</th>
<th style="text-align: center;">SciPy</th>
<th style="text-align: center;">Matplotlib</th>
<th style="text-align: center;">Astropy</th>
<th style="text-align: center;">Pandas</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">2018-10-13</td>
<td style="text-align: center;">3.6.6</td>
<td style="text-align: center;"><strong>0.9.3</strong></td>
<td style="text-align: center;">1.15.2</td>
<td style="text-align: center;">1.1.0</td>
<td style="text-align: center;">3.0.0</td>
<td style="text-align: center;">3.0.4</td>
<td style="text-align: center;">0.23.4</td>
</tr>
</tbody>
</table>
<ul>
<li>Add <code>aiaprep_usr()</code>.</li>
<li>Change parameter list of <code>plot_map()</code>,
<code>plot_vmap()</code>, <code>proj_matrix()</code>.</li>
<li>Change return value of <code>_get_image_params()</code> from a tuple
to a dict.</li>
<li>Adjust positions of colorbar &amp; title.</li>
<li>Fix docs.</li>
</ul>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sunpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Example: Projection</title>
    <url>//example_projection.html</url>
    <content><![CDATA[<p>
<a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/notebooks/example_hmi.zip"><i class="fa fa-download fa-fw"></i>Jupyter Notebook</a>
<wbr> <a class="btn" href="https://pan.baidu.com/s/1nwsIcDr?pwd=s5re"><i class="fa fa-download fa-fw"></i>Example Data</a> <wbr> <a class="btn" href="https://github.com/lydiazly/python-intro/raw/master/sunpy-modules.zip"><i class="fa fa-download fa-fw"></i>User Module</a><nobr>
(<a href="https://github.com/lydiazly/scripts-sunpy/tree/master/modules">source</a>
/ <a href="/usr_sunpy.html">doc</a>)
</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division, print_function</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reload user modules automatically</span></span><br><span class="line"><span class="comment"># %load_ext autoreload</span></span><br><span class="line"><span class="comment"># %autoreload 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># notebook, inline, ...</span></span><br><span class="line">%matplotlib notebook</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> astropy.coordinates <span class="keyword">import</span> SkyCoord</span><br><span class="line"><span class="keyword">import</span> astropy.units <span class="keyword">as</span> u</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sunpy.<span class="built_in">map</span></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># To use user modules</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;../modules&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;Python version: %s&#x27; % sys.version.split(&#x27;(&#x27;)[0])  # Python version: 3.6.6 |Anaconda, Inc.|</span></span><br><span class="line"><span class="comment"># print(&#x27;SunPy version: %s&#x27; % sunpy.__version__)  # SunPy version: 0.9.3</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="read-data"><a href="#read-data" class="headerlink"></a>Read
data</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fnames = (<span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.field.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.inclination.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.azimuth.fits&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;data/hmi.B_720s.20150827_052400_TAI.disambig.fits&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> read_sdo</span><br><span class="line">mapb, mapi, mapa, mapd = <span class="built_in">list</span>(<span class="built_in">map</span>(read_sdo, fnames))</span><br></pre></td></tr></table></figure>
<pre><code>hmi.B_720s.20150827_052400_TAI.field.fits   [4096, 4096]
hmi.B_720s.20150827_052400_TAI.inclination.fits [4096, 4096]
hmi.B_720s.20150827_052400_TAI.azimuth.fits [4096, 4096]
hmi.B_720s.20150827_052400_TAI.disambig.fits    [4096, 4096]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disambiguate</span></span><br><span class="line">mapa.data[mapd.data &gt; <span class="number">3</span>] += <span class="number">180.</span></span><br><span class="line"></span><br><span class="line">mapbx = deepcopy(mapb)</span><br><span class="line">mapby = deepcopy(mapb)</span><br><span class="line">mapbz = deepcopy(mapb)</span><br><span class="line">mapbx.data[:] = mapb.data * np.sin(np.deg2rad(mapi.data)) * np.cos(np.deg2rad(mapa.data + <span class="number">270.</span>))</span><br><span class="line">mapby.data[:] = mapb.data * np.sin(np.deg2rad(mapi.data)) * np.sin(np.deg2rad(mapa.data + <span class="number">270.</span>))</span><br><span class="line">mapbz.data[:] = mapb.data * np.cos(np.deg2rad(mapi.data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Suppress metadata warnings</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;mapbx, mapby, mapbz&#125;:</span><br><span class="line">    i.meta[<span class="string">&#x27;hgln_obs&#x27;</span>] = <span class="number">0.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> aiaprep_usr <span class="keyword">as</span> aiaprep</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;level 1 -&gt; level 1.5 ...&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">    warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    mapbx = aiaprep(mapbx)</span><br><span class="line">    mapby = aiaprep(mapby)</span><br><span class="line">    mapbz = aiaprep(mapbz)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;level    =&#x27;</span>, mapbz.meta[<span class="string">&#x27;lvl_num&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;rsun_obs =&#x27;</span>, mapbz.meta[<span class="string">&#x27;rsun_obs&#x27;</span>] * u.arcsec)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r_sun    =&#x27;</span>, mapbz.meta[<span class="string">&#x27;r_sun&#x27;</span>] * u.pix)</span><br></pre></td></tr></table></figure>
<pre><code>level 1 -&gt; level 1.5 ...
level    = 1.5
rsun_obs = 949.495178 arcsec
r_sun    = 1582.4919633333334 pix</code></pre>
<h2 id="submap"><a href="#submap" class="headerlink"></a>Submap</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xrange = (<span class="number">500.</span>,<span class="number">800.</span>) * u.arcsec</span><br><span class="line">yrange = (-<span class="number">450.</span>,-<span class="number">200.</span>) * u.arcsec</span><br><span class="line"></span><br><span class="line">subcoord = SkyCoord(xrange, yrange, frame=mapbz.coordinate_frame)</span><br><span class="line">smapbx = mapbx.submap(subcoord)</span><br><span class="line">smapby = mapby.submap(subcoord)</span><br><span class="line">smapbz = mapbz.submap(subcoord)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Submap: (%s, %s) arcsec  (%d x %d)&#x27;</span></span><br><span class="line">      % (xrange.value, yrange.value, *smapbz.data.shape[::-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map</span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax1 = fig1.add_subplot(<span class="number">111</span>, projection=mapbz)</span><br><span class="line">plot_map(mapbz, ax=ax1, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, grid_color=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">mapbz.draw_rectangle(subcoord[<span class="number">0</span>], xrange[<span class="number">1</span>]-xrange[<span class="number">0</span>], yrange[<span class="number">1</span>]-yrange[<span class="number">0</span>], axes=ax1, color=<span class="string">&#x27;yellow&#x27;</span>, linewidth=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify xlim, ylim by pixels</span></span><br><span class="line"><span class="comment"># lim_arcsec = ((-1000.1, 1000.1) * u.arcsec, (-1000.1, 1000.1) * u.arcsec)</span></span><br><span class="line"><span class="comment"># lim_pix = mapbz.world_to_pixel(SkyCoord(*lim_arcsec, frame=mapbz.coordinate_frame))  # pix</span></span><br><span class="line"><span class="comment"># ax1.set_xlim(lim_pix[0].value)  # pix</span></span><br><span class="line"><span class="comment"># ax1.set_ylim(lim_pix[1].value);  # pix</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Clip NaNs</span></span><br><span class="line">valid_index = np.where(np.isfinite(mapbz.data))</span><br><span class="line">ax1.set_xlim((valid_index[<span class="number">0</span>].<span class="built_in">min</span>()-<span class="number">100</span>, valid_index[<span class="number">0</span>].<span class="built_in">max</span>()+<span class="number">100</span>))  <span class="comment"># pix</span></span><br><span class="line">ax1.set_ylim((valid_index[<span class="number">1</span>].<span class="built_in">min</span>()-<span class="number">100</span>, valid_index[<span class="number">1</span>].<span class="built_in">max</span>()+<span class="number">100</span>));  <span class="comment"># pix</span></span><br></pre></td></tr></table></figure>
<pre><code>Submap: ([500. 800.], [-450. -200.]) arcsec  (500 x 417)</code></pre>
<p><img data-src="/example_projection/projection1.png" width="800"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> plot_map, plot_vmap</span><br><span class="line"></span><br><span class="line">iskip, jskip = (<span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">fig2 = plt.figure(figsize=(<span class="number">9</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax2 = fig2.add_subplot(<span class="number">111</span>, projection=smapbz)</span><br><span class="line">im2 = plot_map(smapbz, ax=ax2, vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, grid=<span class="number">10</span>*u.deg, title=mapbz.latex_name+<span class="string">&#x27; (submap)&#x27;</span>)</span><br><span class="line">plot_vmap(smapbx, smapby, smapbz, ax2, iskip=iskip, jskip=jskip, cmin=<span class="number">50.</span>, vmax=<span class="number">500.</span>, cmap=<span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">          scale_units=<span class="string">&#x27;xy&#x27;</span>, scale=<span class="number">1</span>/<span class="number">0.05</span>, minlength=<span class="number">0.02</span>);</span><br></pre></td></tr></table></figure>
<p><img data-src="/example_projection/projection2.png" width="900"></p>
<h2 id="projection"><a href="#projection"
class="headerlink"></a>Projection</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> usr_sunpy <span class="keyword">import</span> image_to_helio</span><br><span class="line"></span><br><span class="line">hx, hy = image_to_helio(smapbz)</span><br><span class="line">smapbx_h, smapby_h, smapbz_h = image_to_helio(smapbx, smapby, smapbz)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;(xmin, xmax) = (%9.3f, %9.3f) arcsec\n(ymin, ymax) = (%9.3f, %9.3f) arcsec&#x27;</span> %</span><br><span class="line">      (hx.<span class="built_in">min</span>(), hx.<span class="built_in">max</span>(), hy.<span class="built_in">min</span>(), hy.<span class="built_in">min</span>()))</span><br></pre></td></tr></table></figure>
<pre><code>(xmin, xmax) = ( -251.988,   251.988) arcsec
(ymin, ymax) = ( -156.811,  -156.811) arcsec</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iskip, jskip = (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fig3 = plt.figure(figsize=(<span class="number">9</span>, <span class="number">4.5</span>), dpi=<span class="number">100</span>)</span><br><span class="line">ax3 = fig3.add_subplot(<span class="number">111</span>)</span><br><span class="line">im3 = plot_map(smapbz_h, ax=ax3, coords=(hx, hy), cmap=<span class="string">&#x27;gray&#x27;</span>,</span><br><span class="line">               vmin=-<span class="number">2000.</span>, vmax=<span class="number">2000.</span>, title=mapbz.latex_name+<span class="string">&#x27; (projected)&#x27;</span>)</span><br><span class="line">plot_vmap(smapbx_h, smapby_h, smapbz_h, ax3, coords=(hx, hy),</span><br><span class="line">          iskip=iskip, jskip=jskip, cmin=<span class="number">100.</span>, vmax=<span class="number">300.</span>, cmap=<span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">          scale_units=<span class="string">&#x27;xy&#x27;</span>, scale=<span class="number">1</span>/<span class="number">0.04</span>, minlength=<span class="number">0.02</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Properties</span></span><br><span class="line">ax3.grid(<span class="literal">True</span>, ls=<span class="string">&#x27;:&#x27;</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">ax3.set_xlim((-<span class="number">170</span>,<span class="number">170</span>))  <span class="comment"># arcsec</span></span><br><span class="line">ax3.set_ylim((-<span class="number">110</span>,<span class="number">100</span>));  <span class="comment"># arcsec</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/example_projection/projection3.png" width="900"></p>
]]></content>
      <categories>
        <category>Lecture Topics</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
        <tag>sunpy</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 pickle 模块存取 dict</title>
    <url>/2018-10-20-pickle.html</url>
    <content><![CDATA[<p>Python 自带一个存取 dict 到二进制文件的工具 <a
href="https://docs.python.org/3/library/pickle.html">pickle</a>,
支持数值型的 key (<a
href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez.html">numpy.savez</a>
和 <a
href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savez_compressed.html">numpy.savez_compressed</a>
只支持字符串作为 key).</p>
<p>用法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># 存入</span></span><br><span class="line">pickle.dump(data, <span class="built_in">open</span>(<span class="string">&quot;filename.p&quot;</span>, <span class="string">&quot;wb&quot;</span>))  <span class="comment"># type(data): dict</span></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">data = pickle.load(<span class="built_in">open</span>(<span class="string">&quot;filename.p&quot;</span>, <span class="string">&quot;rb&quot;</span>))  <span class="comment"># 返回一个 dict</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>以下示例特地使用了数值型的 key:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1.1</span>:<span class="number">1.1</span>, <span class="number">2</span>:<span class="number">2</span>&#125;  <span class="comment"># 以 float 和 int 作为 key</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(a, <span class="built_in">open</span>(<span class="string">&quot;data.p&quot;</span>, <span class="string">&quot;wb&quot;</span>))  <span class="comment"># 并不会自动添加后缀名</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = pickle.load(<span class="built_in">open</span>(<span class="string">&quot;data.p&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.keys()</span><br><span class="line">dict_keys([<span class="number">1.1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">1.1</span>]</span><br><span class="line"><span class="number">1.1</span></span><br></pre></td></tr></table></figure>
<p>注意 <code>pickle.load()</code> 返回的类型是 dict, 但
<code>numpy.load()</code> 读取 '*.npz' 文件所返回是一个可以像 dict
一样使用 key 来索引数据的 <code>numpy.lib.npyio.NpzFile</code> 对象.</p>
<p>'*.p' 文件的大小和非压缩的 '*.npz' (<code>numpy.savez()</code>) 一致,
然而压缩过的 '*.npz' (<code>numpy.savez_compressed()</code>)
显然占用空间更小, 因此在方便的情况下 (例如 key 是字符串,
读取后直接操作数据而不需要得到一个 dict), 推荐优先使用 numpy. <br><br>
如果要存入上述示例中同样的数据到 '*.npz' 格式, 需要转换 key 的类型
(读取时也需要使用字符串型的 key):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="built_in">str</span>(key):value <span class="keyword">for</span> key, value <span class="keyword">in</span> a.items()&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;1.1&#x27;</span>: <span class="number">1.1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.savez_compressed(<span class="string">&#x27;data2&#x27;</span>, **a)  <span class="comment"># 会自动添加后缀名, 得到 &#x27;data2.npz&#x27;</span></span><br></pre></td></tr></table></figure>
<hr />
<p>其他数据存取教程:</p>
<ul>
<li><a href="/main.html#常见数据文件读写">Python 简易教程 (lecture for
Solar Group)</a>
<ul>
<li><a href="/main.html#一般情况">一般情况</a></li>
<li><a href="/main.html#txt-csv-文件读写">txt, csv 文件读写</a></li>
<li><a href="/main.html#numpy-save-文件读写">numpy save
文件读写</a></li>
<li><a href="/main.html#idl-sav-文件读取">IDL sav 文件读取</a></li>
<li><a href="/main.html#fits-文件读取">FITS 文件读取</a></li>
</ul></li>
<li><a href="/advance.html#其他格式文件读写">Python 进阶 (lecture for
Solar Group)</a>
<ul>
<li><a href="/advance.html#用-pandas-读-csv">用 pandas 读 csv</a></li>
<li><a href="/advance.html#fortran-二进制文件读写">Fortran
二进制文件读写</a></li>
<li><a href="/advance.html#hdf5-文件读写-ncdf-cdf-文件读取">HDF5
文件读写, NCDF, CDF 文件读取</a></li>
<li><a href="/advance.html#numpy-to-vtk">NumPy to VTK</a></li>
<li><a href="/advance.html#matlab-mat-文件读写">Matlab mat
文件读写</a></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>Python Tips</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Notes: Invoke Variables From Scripts in Interactive Mode</title>
    <url>/2018-10-15-scripts-and-interactive-mode.html</url>
    <content><![CDATA[<p>目的是从交互环境调用脚本产生的变量, 可用于调试脚本和测试数据等等.</p>
<p>比如当前目录下有一个包含如下内容的脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="方法-1.-shell---interactive-mode-推荐"><a
href="#方法-1.-shell---interactive-mode-推荐"
class="headerlink"></a>方法 1. shell -&gt; interactive mode (推荐)</h3>
<p>使用 <code>-i</code> 选项:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell</span></span><br><span class="line">$ python -i test.py</span><br></pre></td></tr></table></figure>
<p>执行结束随即进入 python 交互环境, 并且保留了脚本中定义的变量:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="方法-2.-in-ipython-jupyter-第二推荐"><a
href="#方法-2.-in-ipython-jupyter-第二推荐" class="headerlink"></a>方法
2. In ipython / jupyter (第二推荐)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ipython</span></span><br><span class="line">In [<span class="number">1</span>]: %run test.py</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: a</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: %who</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: %whos</span><br><span class="line">Variable   <span class="type">Type</span>    Data/Info</span><br><span class="line">----------------------------</span><br><span class="line">a          <span class="built_in">int</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="方法-3.-in-interactive-mode"><a
href="#方法-3.-in-interactive-mode" class="headerlink"></a>方法 3. In
interactive mode</h3>
<blockquote>
<p><strong>NOTE</strong>: Python 3 取消了 <code>execfile()</code>
这个函数! 如今使用 <code>exec()</code>.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="built_in">open</span>(<span class="string">&#x27;test.py&#x27;</span>).read())</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>()</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">globals</span>()[<span class="string">&#x27;a&#x27;</span>]  <span class="comment"># same as vars()[&#x27;a&#x27;]</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>但这之后文件并没有关闭, 虽然多数时候没有影响, 但如果实在要关闭,
建议使用 <code>with</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.py&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())  <span class="comment"># ctrl+D to exit the block</span></span><br></pre></td></tr></table></figure>
<p>总之十分不方便, 因此不推荐. <br><br> 对于没有使用
<code>if __name__ == "__main__"</code> 的脚本, 当脚本处在当前目录或
<code>$PYTHONPATH</code> 中时, 也可以有比较方便的办法<br>(
注意这里因为是调用 module 的形式, 所以不要加 '.py' ):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> test</span><br><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><br> 补充说明在 python 交互环境中查看当前环境中的变量的方法 (ipython
/ jupyter 使用 <code>%who</code>, <code>%whos</code> 即可):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>()  <span class="comment"># without an argument, return the names in the current scope</span></span><br><span class="line"><span class="built_in">globals</span>()  <span class="comment"># a dictionary containing the current scope&#x27;s global variables</span></span><br><span class="line"><span class="built_in">locals</span>()  <span class="comment"># a dictionary containing the current scope&#x27;s local variables</span></span><br><span class="line"><span class="built_in">vars</span>()  <span class="comment"># without arguments, equivalent to locals();</span></span><br><span class="line">        <span class="comment"># with an argument, equivalent to object.__dict__.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python Tips</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas sep=&#39;&#92;s+&#39; 的问题</title>
    <url>/2018-12-04-pandas-sep.html</url>
    <content><![CDATA[<p>Pandas 的 <code>read_table</code> (<a
href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_table.html">官方文档</a>)
和 <code>read_csv</code> (<a
href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html">官方文档</a>)
(指定分隔符的情况下两者无区别), 有关键字 <code>sep=</code>
(<code>read_table</code> 默认为 <code>sep='\t'</code>,
<code>read_csv</code> 默认为 <code>sep=','</code>).</p>
<p>但当需要指定多个空格的情况下, 指定 <code>sep='\s+'</code>
可能无法被正确识别. <span id="more"></span></p>
<p>请使用 <strong><code>' +'</code></strong> 代替.</p>
<p>官方文档中关于 <code>sep</code> 关键字的说明有如下描述:</p>
<blockquote>
<p>In addition, separators longer than 1 character and <strong>different
from <code>'\s+'</code></strong> will be interpreted as regular
expressions and will also force the use of the Python parsing
engine.</p>
</blockquote>
<p>指定 <code>sep='\s+'</code> 可能无法被正确识别,</p>
<p>暂时的办法是:<br> 加上参数 <code>engine='python'</code>, 或使用
<strong><code>' +'</code></strong> 代替 (此时
<code>engine='python'</code>).<br> 如果设为 <code>engine='c'</code>,
速度较快, 但不便识别正则表达, 追求效率的话可以配合使用:<br>
<code>quoting=3</code> (即使用 <code>csv.QUOTE_NONE</code>)</p>
<hr />
<p>Pandas 的读取方法简单介绍参见: <a
href="/advance.html#用-pandas-读-csv">用 pandas 读 csv</a></p>
]]></content>
      <categories>
        <category>Python Tips</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Limit the memory usage in Windows 10 WSL2</title>
    <url>/2022-07-16-Limit-memory-usage-in-Windows-10-WSL2.html</url>
    <content><![CDATA[<h2 id="limit-the-memory-usage"><a href="#limit-the-memory-usage"
class="headerlink"></a>Limit the memory usage</h2>
<p>It was annoying that WSL2 was always eating up my poor RAM. The
following solution worked. [<a
href="https://www.aleksandrhovhannisyan.com/blog/limiting-memory-usage-in-wsl-2/">Reference</a>]</p>
<p>My distribution is:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu<span class="literal">-18</span>.<span class="number">04</span>    Running         <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Create a configure file named <code>.wslconfig</code> in your user
directory in Windows.</p>
<p>Open PowerShell as administrator, shutdown WSL2 and edit the
file:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; wsl <span class="literal">--shutdown</span></span><br><span class="line">&gt; notepad <span class="string">&quot;<span class="variable">$env:USERPROFILE</span>\.wslconfig&quot;</span></span><br></pre></td></tr></table></figure>
<p>For me the content is:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=2GB</span><br><span class="line">swap=0</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>After these steps, the memory usage of my WSL2 never bothered me
again.</p>
<h2 id="compact-the-virtual-disk"><a href="#compact-the-virtual-disk"
class="headerlink"></a>Compact the virtual disk</h2>
<p>This file always occupies a huge amount of space:
<code>%USERPROFILE%\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_*\LocalState\ext4.vhdx</code>.
It's because WSL2 won't actually release the space after files are
deleted. The solution is to compact the virtual disk to reduce its size
as follows. [<a
href="https://github.com/microsoft/WSL/issues/4699">Reference</a>]</p>
<p>Open PowerShell as Administrator:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; wsl <span class="literal">--shutdown</span></span><br><span class="line">&gt; diskpart</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace &lt;user&gt; and &lt;pkg&gt; by yours. Must be a full path.</span></span><br><span class="line">DISKPART&gt; <span class="built_in">select</span> vdisk file=<span class="string">&quot;C:\Users\&lt;user&gt;\AppData\Local\Packages\CanonicalGroupLimited.&lt;pkg&gt;\LocalState\ext4.vhdx&quot;</span></span><br><span class="line">  DiskPart successfully selected the virtual disk file.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compact and wait for several minutes</span></span><br><span class="line">DISKPART&gt; compact vdisk</span><br><span class="line">  <span class="number">100</span> percent completed</span><br><span class="line">  DiskPart successfully compacted the virtual disk file.</span><br><span class="line"></span><br><span class="line">DISKPART&gt; detach vdisk</span><br></pre></td></tr></table></figure>
<p>Press <code>Ctrl+C</code> to exit <code>DISKPART</code>. <br></p>
<p>P.S. This didn't work for me (<code>optimize-vhd</code> is not
found):</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">optimize-vhd</span> <span class="literal">-Path</span> .\ext4.vhdx <span class="literal">-Mode</span> full</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>New Web App: Star Path Viewer</title>
    <url>//star-path-viewer.html</url>
    <content><![CDATA[<p><img alt="thumbnail" data-src="https://stardial-astro.github.io/star-path-data/images/star-path-viewer_thumbnail.png" width="480"></p>
<p>We formed a team named Stardial and published our first website: <a
href="https://star-path-viewer.pages.dev">Star Path Viewer</a>. This is
an open-source web application designed for academic research. This
astronomical tool allows users to trace the path of any planet or star
across the sky based on a chosen date in either the Gregorian or Julian
calendar, spanning millennia into both the past and the future.</p>
<p>Compared to other existing tools, Star Path Viewer provides more
precise information on star positions and rising/setting times, which is
crucial for historians when dating historical events by correlating
astrometric data with historical records. The tool also enables future
prediction of star paths, aiding users in planning astronomical
observations.</p>
<p>The star search is compatible with Chinese star names. It is a
valuable function for historians of science studying ancient Chinese
archives and astronomy.</p>
<p>Check out the <a
href="https://github.com/stardial-astro/star-path-viewer">GitHub
repository</a> for more infomation.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>astronomy</tag>
      </tags>
  </entry>
</search>
